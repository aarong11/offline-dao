[
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://dao.example.org/schemas/animal.schema.json",
  "title": "Animal",
  "description": "Schema for animal biological entities, extending the base biological entity schema",
  "type": "object",
  "allOf": [
    {
      "$ref": "biological_entity.schema.json"
    },
    {
      "properties": {
        "classification": {
          "properties": {
            "entity_type": {
              "const": "animal",
              "description": "Must be 'animal' for this schema"
            }
          }
        },
        "mobility": {
          "type": "object",
          "description": "Movement characteristics of the animal",
          "properties": {
            "locomotion_type": {
              "type": "array",
              "description": "Primary means of locomotion",
              "items": {
                "type": "string",
                "enum": [
                  "flying",
                  "swimming",
                  "walking",
                  "running",
                  "crawling",
                  "jumping",
                  "burrowing",
                  "climbing",
                  "sessile",
                  "other"
                ]
              }
            },
            "home_range": {
              "type": "object",
              "description": "Typical area the animal traverses",
              "properties": {
                "value": {
                  "type": "number"
                },
                "unit": {
                  "type": "string",
                  "enum": [
                    "m²",
                    "km²",
                    "ha",
                    "acres"
                  ]
                }
              }
            },
            "migration_pattern": {
              "type": "string",
              "description": "Migration behavior if applicable"
            },
            "activity_period": {
              "type": "array",
              "description": "Typical periods of activity",
              "items": {
                "type": "string",
                "enum": [
                  "diurnal",
                  "nocturnal",
                  "crepuscular",
                  "cathemeral"
                ]
              }
            },
            "territorial": {
              "type": "boolean",
              "description": "Whether the animal defends territory"
            }
          }
        },
        "diet": {
          "type": "object",
          "description": "Feeding characteristics",
          "properties": {
            "diet_type": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "carnivore",
                  "herbivore",
                  "omnivore",
                  "detritivore",
                  "filter_feeder",
                  "parasite",
                  "other"
                ]
              }
            },
            "feeding_method": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "How the animal acquires food"
            },
            "preferred_food": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Preferred food items or species"
            },
            "dietary_requirements": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Special dietary needs"
            }
          }
        },
        "social_structure": {
          "type": "object",
          "description": "Social organization and behavior",
          "properties": {
            "social_group": {
              "type": "string",
              "enum": [
                "solitary",
                "pair",
                "family",
                "herd",
                "flock",
                "school",
                "pod",
                "colony",
                "other"
              ],
              "description": "Primary social grouping"
            },
            "group_size": {
              "type": "object",
              "properties": {
                "typical": {
                  "type": "number"
                },
                "range": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  },
                  "minItems": 2,
                  "maxItems": 2
                }
              }
            },
            "dominance_hierarchy": {
              "type": "boolean",
              "description": "Whether the social group has a dominance hierarchy"
            },
            "mating_system": {
              "type": "string",
              "enum": [
                "monogamous",
                "polygynous",
                "polyandrous",
                "polygynandrous",
                "promiscuous",
                "other"
              ],
              "description": "Mating system pattern"
            },
            "parental_care": {
              "type": "string",
              "description": "Parental care behavior"
            }
          }
        },
        "reproduction": {
          "type": "object",
          "description": "Reproductive characteristics",
          "properties": {
            "reproductive_mode": {
              "type": "string",
              "enum": [
                "sexual",
                "asexual",
                "both"
              ],
              "description": "Primary mode of reproduction"
            },
            "sexual_dimorphism": {
              "type": "boolean",
              "description": "Whether males and females have distinct appearances"
            },
            "breeding_season": {
              "type": "string",
              "description": "Time of year breeding typically occurs"
            },
            "gestation_period": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "number"
                },
                "unit": {
                  "type": "string",
                  "enum": [
                    "days",
                    "weeks",
                    "months"
                  ]
                }
              },
              "description": "Length of pregnancy or incubation"
            },
            "litter_size": {
              "type": "object",
              "properties": {
                "typical": {
                  "type": "number"
                },
                "range": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  },
                  "minItems": 2,
                  "maxItems": 2
                }
              },
              "description": "Number of offspring typically produced"
            },
            "maturation_time": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "number"
                },
                "unit": {
                  "type": "string",
                  "enum": [
                    "days",
                    "weeks",
                    "months",
                    "years"
                  ]
                }
              },
              "description": "Time to reach sexual maturity"
            }
          }
        },
        "physical_characteristics": {
          "type": "object",
          "description": "Physical attributes specific to animals",
          "properties": {
            "body_dimensions": {
              "type": "object",
              "properties": {
                "length": {
                  "$ref": "measurements/spatial_measurement.schema.json"
                },
                "height": {
                  "$ref": "measurements/spatial_measurement.schema.json"
                },
                "wingspan": {
                  "$ref": "measurements/spatial_measurement.schema.json"
                },
                "weight": {
                  "$ref": "measurements/spatial_measurement.schema.json"
                }
              }
            },
            "coloration": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Body coloring and patterns"
            },
            "distinctive_features": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Notable physical characteristics"
            }
          }
        },
        "behavior": {
          "type": "object",
          "description": "Behavioral characteristics",
          "properties": {
            "communication_methods": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "How the animal communicates"
            },
            "vocalizations": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Types of sounds produced"
            },
            "behavioral_adaptations": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Special behavioral traits"
            }
          }
        },
        "habitat": {
          "type": "object",
          "description": "Detailed habitat information",
          "properties": {
            "preferred_habitat": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Types of environments preferred"
            },
            "niche": {
              "type": "string",
              "description": "Ecological niche description"
            },
            "range": {
              "type": "object",
              "properties": {
                "geographic_regions": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "elevation_range": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  },
                  "minItems": 2,
                  "maxItems": 2,
                  "description": "Minimum and maximum elevation in meters"
                },
                "depth_range": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  },
                  "minItems": 2,
                  "maxItems": 2,
                  "description": "Minimum and maximum depth in meters (for aquatic animals)"
                }
              }
            }
          }
        },
        "tracked_by": {
          "type": "array",
          "description": "Devices or systems used to track the animal",
          "items": {
            "type": "object",
            "properties": {
              "device_id": {
                "type": "string",
                "description": "ID of tracking device"
              },
              "device_type": {
                "type": "string",
                "enum": [
                  "gps_collar",
                  "radio_tag",
                  "satellite_tag",
                  "pit_tag",
                  "band",
                  "acoustic_tag",
                  "other"
                ],
                "description": "Type of tracking technology"
              },
              "attachment_location": {
                "type": "string",
                "description": "Where on the animal the device is attached"
              },
              "installation_date": {
                "type": "string",
                "format": "date-time"
              },
              "battery_life": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "number"
                  },
                  "unit": {
                    "type": "string",
                    "enum": [
                      "days",
                      "months",
                      "years"
                    ]
                  }
                }
              },
              "data_transmission": {
                "type": "string",
                "enum": [
                  "real-time",
                  "store-on-board",
                  "proximity-download",
                  "other"
                ],
                "description": "How data is retrieved from the device"
              }
            },
            "required": [
              "device_id",
              "device_type"
            ]
          }
        },
        "conservation": {
          "type": "object",
          "description": "Conservation-specific information",
          "properties": {
            "threats": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Known threats to the species"
            },
            "conservation_efforts": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Current conservation initiatives"
            },
            "population_trend": {
              "type": "string",
              "enum": [
                "increasing",
                "stable",
                "decreasing",
                "unknown"
              ],
              "description": "Overall population trend"
            },
            "estimated_population": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "number"
                },
                "year": {
                  "type": "integer"
                },
                "confidence": {
                  "type": "string",
                  "enum": [
                    "high",
                    "medium",
                    "low"
                  ]
                }
              }
            }
          }
        }
      }
    }
  ],
  "required": [
    "mobility",
    "diet"
  ],
  "additionalProperties": false,
  "__meta": {
    "file": "/Users/a/Documents/schemas/animal.schema.json",
    "timestamp": "2025-05-13 12:35:43"
  }
}
,
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://dao.example.org/schemas/attachment.schema.json",
  "title": "DAO Attachment / Blob",
  "description": "References an external file or large payload stored off‑graph (IPFS, local file, S3, etc.). Can be linked from experiments, tasks, or deltas via content‑ID hash.",
  "type": "object",
  "required": [
    "cid",
    "media_type",
    "size_bytes"
  ],
  "properties": {
    "cid": {
      "type": "string",
      "description": "Content identifier. Recommended formats: `sha256:<hex>`, `ipfs://<CIDv1>`, `b3sum:<base64>`.",
      "pattern": "^(sha256|ipfs|b3sum):.+$"
    },
    "media_type": {
      "type": "string",
      "description": "IANA media type or custom label (e.g., `text/csv`, `application/zip`, `image/png`).",
      "minLength": 3
    },
    "size_bytes": {
      "type": "integer",
      "minimum": 0,
      "description": "Uncompressed byte length of the attachment."
    },
    "encoding": {
      "type": "string",
      "description": "If stored as base64, gzip, etc., specify encoding chain (e.g., `gzip+base64`).",
      "minLength": 1
    },
    "description": {
      "type": "string",
      "description": "Human description of the blob (\"model weights v1\", \"raw sensor CSV\").",
      "maxLength": 256
    },
    "created_at": {
      "type": "string",
      "format": "date-time",
      "description": "ISO‑8601 timestamp when blob was first referenced."
    },
    "meta": {
      "type": "object",
      "description": "Free‑form implementation details (e.g., storage URL, encryption scheme).",
      "additionalProperties": true
    }
  },
  "additionalProperties": false,
  "examples": [
    {
      "cid": "ipfs://b43t2g245365",
      "media_type": "application/gzip",
      "size_bytes": 24576,
      "encoding": "gzip",
      "description": "Compressed model checkpoint",
      "created_at": "2025-05-13T14:05:22Z"
    }
  ],
  "__meta": {
    "file": "/Users/a/Documents/schemas/attachment.schema.json",
    "timestamp": "2025-05-13 00:54:24"
  }
}
,
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://dao.example.org/schemas/biological_entity.schema.json",
  "title": "Biological Entity",
  "description": "Base schema for all biological entities including animals, plants, and other organisms.",
  "type": "object",
  "required": [
    "id",
    "taxonomy",
    "classification"
  ],
  "properties": {
    "id": {
      "type": "string",
      "description": "Unique identifier for this biological entity"
    },
    "taxonomy": {
      "type": "object",
      "description": "Taxonomic classification information",
      "required": [
        "scientific_name"
      ],
      "properties": {
        "scientific_name": {
          "type": "string",
          "description": "Binomial or trinomial scientific name (e.g., 'Canis lupus', 'Quercus alba')"
        },
        "common_name": {
          "type": "string",
          "description": "Common or vernacular name"
        },
        "kingdom": {
          "type": "string",
          "description": "Kingdom classification (e.g., 'Animalia', 'Plantae')"
        },
        "phylum": {
          "type": "string",
          "description": "Phylum or division"
        },
        "class": {
          "type": "string",
          "description": "Class classification"
        },
        "order": {
          "type": "string",
          "description": "Order classification"
        },
        "family": {
          "type": "string",
          "description": "Family classification"
        },
        "genus": {
          "type": "string",
          "description": "Genus classification"
        },
        "species": {
          "type": "string",
          "description": "Species classification"
        },
        "subspecies": {
          "type": "string",
          "description": "Subspecies classification if applicable"
        }
      }
    },
    "classification": {
      "type": "object",
      "description": "Additional classification information",
      "properties": {
        "entity_type": {
          "type": "string",
          "enum": [
            "animal",
            "plant",
            "fungus",
            "bacterium",
            "protist",
            "virus",
            "other"
          ],
          "description": "The broad biological category"
        },
        "conservation_status": {
          "type": "string",
          "enum": [
            "extinct",
            "extinct_in_wild",
            "critically_endangered",
            "endangered",
            "vulnerable",
            "near_threatened",
            "conservation_dependent",
            "least_concern",
            "data_deficient",
            "not_evaluated",
            "not_applicable"
          ],
          "description": "IUCN Red List or equivalent conservation status"
        },
        "is_domesticated": {
          "type": "boolean",
          "description": "Whether the entity is domesticated"
        },
        "is_genetically_modified": {
          "type": "boolean",
          "description": "Whether the entity is genetically modified or engineered"
        },
        "ecological_role": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Ecological roles (e.g., 'producer', 'consumer', 'decomposer', 'keystone species')"
        }
      }
    },
    "observed_attributes": {
      "type": "object",
      "description": "Observable characteristics and state",
      "properties": {
        "growth_stage": {
          "type": "string",
          "description": "Current developmental or life stage"
        },
        "health_status": {
          "type": "string",
          "description": "Current health condition"
        },
        "age": {
          "type": "object",
          "properties": {
            "value": {
              "type": "number"
            },
            "unit": {
              "type": "string",
              "enum": [
                "hours",
                "days",
                "weeks",
                "months",
                "years"
              ]
            },
            "estimated": {
              "type": "boolean"
            }
          }
        },
        "first_observed": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when entity was first observed"
        },
        "last_observed": {
          "type": "string",
          "format": "date-time",
          "description": "Most recent observation timestamp"
        }
      }
    },
    "location": {
      "type": "object",
      "description": "Current or last known location",
      "properties": {
        "coordinates": {
          "type": "object",
          "properties": {
            "latitude": {
              "type": "number"
            },
            "longitude": {
              "type": "number"
            },
            "elevation": {
              "type": "number"
            }
          }
        },
        "habitat": {
          "type": "string",
          "description": "Habitat type or description"
        },
        "region": {
          "type": "string",
          "description": "Geographic region identifier"
        }
      }
    },
    "provenance": {
      "type": "object",
      "description": "Origin and tracking information",
      "properties": {
        "origin": {
          "type": "string",
          "description": "Source or origin of the entity"
        },
        "collected_by": {
          "type": "string",
          "description": "ID reference to the contributor who collected or first documented this entity"
        },
        "tracked_by": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "IDs of contributors or systems tracking this entity"
        },
        "identification_method": {
          "type": "string",
          "description": "Method used to identify the biological entity"
        }
      }
    },
    "measurements": {
      "type": "array",
      "description": "Associated physical measurements",
      "items": {
        "$ref": "measurement.schema.json"
      }
    },
    "observations": {
      "type": "array",
      "description": "Temporal series of observation events",
      "items": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "observer": {
            "type": "string",
            "description": "ID reference to contributor who made this observation"
          },
          "location": {
            "type": "string",
            "description": "Location reference at time of observation"
          },
          "notes": {
            "type": "string"
          },
          "measurements": {
            "type": "array",
            "items": {
              "$ref": "measurement.schema.json"
            }
          },
          "images": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            }
          }
        },
        "required": [
          "timestamp",
          "observer"
        ]
      }
    },
    "tags": {
      "type": "array",
      "description": "Array of identification tags or markers",
      "items": {
        "type": "object",
        "properties": {
          "tag_id": {
            "type": "string",
            "description": "Identifier for physical tag, band, or marker"
          },
          "tag_type": {
            "type": "string",
            "description": "Type of tag (e.g., 'rfid', 'band', 'collar', 'dye_mark')"
          },
          "applied_date": {
            "type": "string",
            "format": "date-time"
          },
          "applied_by": {
            "type": "string",
            "description": "ID reference to contributor who applied the tag"
          }
        },
        "required": [
          "tag_id",
          "tag_type"
        ]
      }
    },
    "project_id": {
      "type": "string",
      "description": "Associated project identifier"
    },
    "meta": {
      "type": "object",
      "description": "Additional metadata and extension points",
      "additionalProperties": true
    }
  },
  "additionalProperties": false,
  "__meta": {
    "file": "/Users/a/Documents/schemas/biological_entity.schema.json",
    "timestamp": "2025-05-13 12:28:54"
  }
}
,
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://dao.example.org/schemas/channel_adapter.schema.json",
  "title": "Channel Adapter Schema",
  "description": "Defines a concrete software adapter that speaks to a specific Transmission Medium (e.g., AirTag rename, Wi‑Fi SSID beacon, Bitcoin mempool).  The adapter exposes the uniform async interface `write(bytes)` / `read()`.  This schema captures its static capabilities so routing code can pick the right adapter at runtime.",
  "type": "object",
  "required": [
    "id",
    "type",
    "medium_id",
    "max_bytes",
    "library"
  ],
  "properties": {
    "id": {
      "type": "string",
      "description": "Canonical slug; prefix `ch.` recommended (e.g., `ch.airtag-rename`).",
      "pattern": "^[a-z0-9_.-]+$"
    },
    "type": {
      "const": "ChannelAdapter",
      "description": "Fixed discriminator so graph loaders can quickly determine object class."
    },
    "medium_id": {
      "type": "string",
      "description": "`id` of the `TransmissionMedium` this adapter rides on (e.g., `tm.airtag-rename`)."
    },
    "max_bytes": {
      "type": "integer",
      "minimum": 1,
      "description": "Hard ceiling (after encryption + header) that `write()` accepts per call."
    },
    "library": {
      "type": "string",
      "description": "Primary Python package or system tool the adapter uses (e.g., `pyicloud`, `bluez`, `bitcoinlib`)."
    },
    "requires_hardware": {
      "type": "boolean",
      "default": false,
      "description": "True if special hardware (USB dongle, SDR, YubiKey) is mandatory."
    },
    "directionality": {
      "type": "string",
      "enum": [
        "tx-only",
        "rx-only",
        "bidirectional"
      ],
      "default": "bidirectional",
      "description": "Whether adapter can both write and read or is limited to one direction."
    },
    "bandwidth_bps": {
      "type": "number",
      "minimum": 0,
      "description": "Typical sustained throughput in bytes per second (best‑effort estimate)."
    },
    "setup_instructions": {
      "type": "string",
      "description": "Markdown snippet describing how to install drivers, obtain API keys, etc."
    },
    "meta": {
      "type": "object",
      "description": "Open field for adapter‑specific details (e.g., BLE MAC address, RPC endpoint).",
      "additionalProperties": true
    }
  },
  "additionalProperties": false,
  "examples": [
    {
      "id": "ch.airtag-rename",
      "type": "ChannelAdapter",
      "medium_id": "tm.airtag-rename",
      "max_bytes": 26,
      "library": "pyicloud",
      "requires_hardware": false,
      "directionality": "bidirectional",
      "bandwidth_bps": 13,
      "setup_instructions": "Needs iCloud app‑specific password stored in env `ICLOUD_PWD`."
    }
  ],
  "__meta": {
    "file": "/Users/a/Documents/schemas/channel_adapter.schema.json",
    "timestamp": "2025-05-13 00:32:45"
  }
}
,
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://dao.example.org/schemas/common/cognition/base_cognitive_state.schema.json",
  "title": "Base Cognitive State",
  "description": "Abstract base schema for all cognitive state records (psychological, emotional) with common fields",
  "type": "object",
  "required": [
    "human_id",
    "timestamp",
    "epoch",
    "previous_state_cid"
  ],
  "properties": {
    "human_id": {
      "type": "string",
      "description": "Reference to the human contributor this state belongs to"
    },
    "timestamp": {
      "type": "string",
      "format": "date-time",
      "description": "When this cognitive state was recorded"
    },
    "epoch": {
      "type": "string",
      "description": "Local epoch marker when this state was recorded (human-readable event or ISO8601)"
    },
    "notes": {
      "type": "string",
      "description": "Optional freeform notes about this cognitive state"
    },
    "previous_state_cid": {
      "type": "string",
      "description": "CID reference to the previous state record, forming a verifiable chain",
      "pattern": "^(sha256|sha3):[a-f0-9]{64}$"
    },
    "signature": {
      "$ref": "../signature.schema.json",
      "description": "Cryptographic signature for this record"
    },
    "task_context": {
      "type": "object",
      "description": "Optional task-related context for this cognitive state",
      "properties": {
        "project_id": {
          "type": "string",
          "description": "ID of the related project (if relevant)"
        },
        "task_id": {
          "type": "string",
          "description": "ID of the related task (if relevant)"
        },
        "phase": {
          "type": "string",
          "description": "Phase of work when this state was recorded"
        }
      }
    },
    "external_factors": {
      "type": "array",
      "description": "External factors potentially influencing this cognitive state",
      "items": {
        "type": "object",
        "required": [
          "factor",
          "estimated_impact"
        ],
        "properties": {
          "factor": {
            "type": "string",
            "description": "Description of the external factor"
          },
          "estimated_impact": {
            "type": "integer",
            "minimum": 1,
            "maximum": 10,
            "description": "Estimated impact of this factor (1-10)"
          }
        }
      }
    },
    "duration": {
      "type": "string",
      "description": "How long this state has persisted (ISO 8601 duration)"
    }
  },
  "__meta": {
    "file": "/Users/a/Documents/schemas/common/cognition/base_cognitive_state.schema.json",
    "timestamp": "2025-05-13 11:58:53"
  }
}
,
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://dao.example.org/schemas/common/cognition/memory_context.schema.json",
  "title": "Memory Context",
  "description": "Schema for capturing contextual information about memories to support AI-assisted recall",
  "type": "object",
  "properties": {
    "emotional_context": {
      "type": "object",
      "properties": {
        "emotional_state_cid": {
          "type": "string",
          "pattern": "^(sha256|sha3):[a-f0-9]{64}$",
          "description": "CID reference to associated emotional state"
        },
        "valence": {
          "type": "integer",
          "minimum": -5,
          "maximum": 5,
          "description": "Emotional tone from very negative (-5) to very positive (+5)"
        },
        "intensity": {
          "type": "integer",
          "minimum": 1,
          "maximum": 10,
          "description": "Intensity of emotions associated with this memory (1-10)"
        }
      }
    },
    "psychological_context": {
      "type": "object",
      "properties": {
        "psychological_state_cid": {
          "type": "string",
          "pattern": "^(sha256|sha3):[a-f0-9]{64}$",
          "description": "CID reference to associated psychological state"
        },
        "stress_level": {
          "type": "integer",
          "minimum": 1,
          "maximum": 10,
          "description": "Stress level at time of memory formation (1-10)"
        },
        "cognitive_load": {
          "type": "integer",
          "minimum": 1,
          "maximum": 10,
          "description": "Cognitive load at time of memory formation (1-10)"
        }
      }
    },
    "temporal_context": {
      "type": "object",
      "properties": {
        "event_timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "When the remembered event occurred (may differ from record timestamp)"
        },
        "duration": {
          "type": "string",
          "description": "Duration of the remembered event (ISO 8601 duration format)"
        },
        "recurrence": {
          "type": "string",
          "enum": [
            "one_time",
            "recurring",
            "habitual",
            "ongoing"
          ],
          "description": "Whether this memory represents a single or recurring event"
        }
      }
    },
    "spatial_context": {
      "type": "object",
      "properties": {
        "location_type": {
          "type": "string",
          "description": "Type of location (home, work, etc.)"
        },
        "region": {
          "type": "string",
          "description": "General region or area (not precise coordinates)"
        }
      }
    },
    "perceptual_context": {
      "type": "object",
      "description": "Sensory information associated with the memory",
      "properties": {
        "visual": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Visual elements associated with the memory"
        },
        "auditory": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Sounds associated with the memory"
        },
        "other_sensory": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "sense",
              "description"
            ],
            "properties": {
              "sense": {
                "type": "string",
                "enum": [
                  "taste",
                  "smell",
                  "touch",
                  "proprioception",
                  "other"
                ],
                "description": "Type of sensory information"
              },
              "description": {
                "type": "string",
                "description": "Description of the sensory information"
              }
            }
          },
          "description": "Other sensory information associated with the memory"
        }
      }
    },
    "social_context": {
      "type": "object",
      "description": "Social information associated with the memory",
      "properties": {
        "people": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "People present or mentioned (use pseudonyms or roles)"
        },
        "social_setting": {
          "type": "string",
          "enum": [
            "alone",
            "one_on_one",
            "small_group",
            "large_group",
            "public",
            "online",
            "other"
          ],
          "description": "Social setting of the memory"
        }
      }
    },
    "semantic_cues": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "Keywords or concepts that might trigger this memory"
    }
  },
  "__meta": {
    "file": "/Users/a/Documents/schemas/common/cognition/memory_context.schema.json",
    "timestamp": "2025-05-13 11:59:21"
  }
}
,
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://dao.example.org/schemas/common/custody_event.schema.json",
  "title": "Custody Event",
  "description": "Cryptographically signed, timestamped custody event representing a change in custody, inspection, or transformation of a DAO resource or asset.",
  "type": "object",
  "required": [
    "event_type",
    "actor_id",
    "timestamp"
  ],
  "properties": {
    "event_type": {
      "type": "string",
      "description": "Type of custody event",
      "enum": [
        "transfer",
        "receipt",
        "inspection",
        "transformation",
        "creation",
        "destruction",
        "maintenance",
        "update",
        "validation",
        "other"
      ]
    },
    "actor_id": {
      "type": "string",
      "description": "Device ID or contributor ID responsible for this custody event"
    },
    "timestamp": {
      "type": "string",
      "format": "date-time",
      "description": "When this custody event occurred"
    },
    "location": {
      "type": "string",
      "description": "Physical or logical location where the custody event occurred (e.g., geo coordinates, facility name, network location)"
    },
    "notes": {
      "type": "string",
      "description": "Optional human-readable notes about this custody event"
    },
    "signature": {
      "$ref": "../common/signature.schema.json",
      "description": "Cryptographic signature for integrity verification"
    },
    "previous_hash": {
      "type": "string",
      "description": "Hash of the previous event in the custody chain for tamper-evident chaining"
    },
    "nonce": {
      "type": "string",
      "description": "Optional nonce used to prevent replay attacks"
    },
    "metadata": {
      "type": "object",
      "description": "Additional event-specific metadata",
      "additionalProperties": true
    }
  },
  "additionalProperties": false,
  "__meta": {
    "file": "/Users/a/Documents/schemas/common/custody_event.schema.json",
    "timestamp": "2025-05-13 13:36:29"
  }
}
,
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://dao.example.org/schemas/common/signature.schema.json",
  "title": "Cryptographic Signature",
  "description": "Common schema for cryptographic signatures used across the DAO ecosystem",
  "type": "object",
  "required": [
    "value",
    "algorithm",
    "public_key"
  ],
  "properties": {
    "value": {
      "type": "string",
      "description": "Base64-encoded signature value"
    },
    "algorithm": {
      "type": "string",
      "description": "Signature algorithm used",
      "enum": [
        "ed25519",
        "sha256-ecdsa",
        "secp256k1",
        "rsa-sha256"
      ]
    },
    "public_key": {
      "type": "string",
      "description": "Public key or key identifier to use for verification"
    },
    "timestamp": {
      "type": "string",
      "format": "date-time",
      "description": "When the signature was created"
    },
    "nonce": {
      "type": "string",
      "description": "Optional nonce used in signature generation for replay protection"
    },
    "meta": {
      "type": "object",
      "description": "Additional signature metadata (e.g., key derivation info, certificate paths)"
    }
  },
  "additionalProperties": false,
  "__meta": {
    "file": "/Users/a/Documents/schemas/common/signature.schema.json",
    "timestamp": "2025-05-13 12:03:16"
  }
}
,
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://dao.example.org/schemas/contributors/ai_contributor.schema.json",
  "title": "AI Contributor",
  "description": "Schema for AI agents that contribute to projects",
  "allOf": [
    {
      "$ref": "./contributor_base.schema.json"
    },
    {
      "type": "object",
      "properties": {
        "model_family": {
          "type": "string"
        },
        "capabilities": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "version": {
          "type": "string"
        },
        "operational_mode": {
          "enum": [
            "local",
            "cloud",
            "hybrid"
          ]
        }
      }
    }
  ],
  "__meta": {
    "file": "/Users/a/Documents/schemas/contributors/ai_contributor.schema.json",
    "timestamp": "2025-05-13 10:07:02"
  }
}
,
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://dao.example.org/schemas/contributors/contributor_base.schema.json",
  "title": "Contributor Base",
  "description": "Abstract base schema for all contributors to the DAO ecosystem.",
  "type": "object",
  "properties": {
    "id": {
      "type": "string",
      "description": "Unique identifier for this contributor"
    },
    "display_name": {
      "type": "string",
      "description": "Public-facing name or alias"
    },
    "entity_type": {
      "type": "string",
      "description": "Type of contributor",
      "enum": [
        "human",
        "ai_agent",
        "hybrid",
        "dao",
        "other"
      ]
    },
    "created_at": {
      "type": "string",
      "format": "date-time",
      "description": "Timestamp when the contributor was registered"
    },
    "public_key": {
      "type": "string",
      "description": "Base64-encoded public key used for signing or identification"
    },
    "notes": {
      "type": "string",
      "description": "Optional freeform metadata or provenance information"
    }
  },
  "required": [
    "id",
    "entity_type"
  ],
  "__meta": {
    "file": "/Users/a/Documents/schemas/contributors/contributor_base.schema.json",
    "timestamp": "2025-05-13 02:36:19"
  }
}
,
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://dao.example.org/schemas/contributors/contributor.schema.json",
  "title": "Contributor (Pseudonymous Participant)",
  "description": "Schema for a contributor node in the DAO graph. Captures skills, resources, public key, linked identities, devices, and contribution history while preserving anonymity.",
  "type": "object",
  "required": [
    "anon_id",
    "public_key",
    "skills",
    "resources",
    "availability",
    "epoch",
    "devices",
    "score"
  ],
  "properties": {
    "anon_id": {
      "type": "string",
      "pattern": "^[a-zA-Z0-9._-]{3,64}$",
      "description": "Chosen pseudonym. 3–64 URL‑safe characters."
    },
    "public_key": {
      "type": "string",
      "description": "Base64‑encoded Ed25519 (or other) public key used for signature verification."
    },
    "skills": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "uniqueItems": true,
      "description": "Free‑form skill keywords provided by contributor."
    },
    "resources": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "uniqueItems": true,
      "description": "Assets/tools contributor can supply (GPU, lab, budget, etc.)."
    },
    "availability": {
      "type": "string",
      "description": "Availability statement (e.g., 'weekends', '5h/week')."
    },
    "epoch": {
      "type": "string",
      "description": "Local epoch marker when the identity was created (human‑readable event or ISO8601)."
    },
    "location": {
      "type": "string",
      "description": "Optional coarse location hint (do not reveal precise GPS).",
      "minLength": 0
    },
    "max_parallel": {
      "type": "integer",
      "minimum": 1,
      "default": 1,
      "description": "How many tasks contributor is willing to run in parallel."
    },
    "linked_identities": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "Pseudonyms linked by the contributor (if any)."
    },
    "multisig": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "Additional signers participating in link signature multisig."
    },
    "link_signature": {
      "type": "string",
      "description": "Base64 signature over linked identities list."
    },
    "score": {
      "type": "number",
      "minimum": 0,
      "description": "Reputation or trust score (0–∞)."
    },
    "contributions": {
      "type": "array",
      "description": "History of task contributions (lightweight ledger).",
      "items": {
        "type": "object",
        "required": [
          "project_id",
          "task_id",
          "status"
        ],
        "properties": {
          "project_id": {
            "type": "string"
          },
          "task_id": {
            "type": "string"
          },
          "hours": {
            "type": "number",
            "minimum": 0
          },
          "status": {
            "type": "string",
            "enum": [
              "in_progress",
              "submitted",
              "accepted",
              "rejected"
            ]
          }
        }
      }
    },
    "devices": {
      "type": "array",
      "description": "Registered devices controlled by this contributor.",
      "items": {
        "$ref": "../device.schema.json"
      }
    },
    "device_access": {
      "type": "array",
      "description": "Explicit device access permissions granted to other identities.",
      "items": {
        "type": "object",
        "required": [
          "device_id",
          "scope"
        ],
        "properties": {
          "device_id": {
            "type": "string"
          },
          "scope": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "uniqueItems": true
          }
        }
      }
    },
    "tags": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "uniqueItems": true,
      "description": "Extra searchable labels (language, timezone, etc.)."
    },
    "meta": {
      "type": "object",
      "description": "Open field for any additional contributor data."
    }
  },
  "additionalProperties": false,
  "__meta": {
    "file": "/Users/a/Documents/schemas/contributors/contributor.schema.json",
    "timestamp": "2025-05-13 02:38:54"
  }
}
,
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://dao.example.org/schemas/contributors/dao_contributor.schema.json",
  "title": "DAO Contributor",
  "description": "Schema for organizations that contribute to projects",
  "allOf": [
    {
      "$ref": "./contributor_base.schema.json"
    },
    {
      "type": "object",
      "properties": {
        "mission": {
          "type": "string"
        },
        "linked_projects": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "governance_model": {
          "type": "string"
        }
      }
    }
  ],
  "__meta": {
    "file": "/Users/a/Documents/schemas/contributors/dao_contributor.schema.json",
    "timestamp": "2025-05-13 10:07:38"
  }
}
,
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://dao.example.org/schemas/contributors/human_contributor.schema.json",
  "title": "Human Contributor",
  "description": "Schema for human individuals that contribute to projects with support for internal state tracking and cryptographic verification",
  "allOf": [
    {
      "$ref": "./contributor_base.schema.json"
    },
    {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "const": "Human",
          "description": "Type discriminator for Human contributor"
        },
        "pseudonym": {
          "type": "string",
          "description": "Chosen pseudonym for identity protection",
          "pattern": "^[a-zA-Z0-9._-]{3,64}$"
        },
        "skills": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of self-reported skills and capabilities"
        },
        "region": {
          "type": "string",
          "description": "General geographic region, not precise location"
        },
        "current_state": {
          "description": "References to the most recent psychological and emotional states",
          "type": "object",
          "properties": {
            "psychological_state_cid": {
              "type": "string",
              "description": "CID reference to the most recent psychological state record",
              "pattern": "^(sha256|sha3):[a-f0-9]{64}$"
            },
            "emotional_state_cid": {
              "type": "string",
              "description": "CID reference to the most recent emotional state record",
              "pattern": "^(sha256|sha3):[a-f0-9]{64}$"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time",
              "description": "When the state references were last updated"
            }
          }
        },
        "memory_anchor": {
          "type": "string",
          "description": "CID of the most recent memory record, forming a verifiable chain",
          "pattern": "^(sha256|sha3):[a-f0-9]{64}$"
        },
        "cryptographic_identifiers": {
          "type": "array",
          "description": "List of alternative cryptographic identifiers for this human",
          "items": {
            "type": "object",
            "required": [
              "type",
              "identifier"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "pgp",
                  "eth_address",
                  "did",
                  "ssh",
                  "x509",
                  "other"
                ],
                "description": "Type of cryptographic identifier"
              },
              "identifier": {
                "type": "string",
                "description": "The actual identifier value"
              },
              "proof": {
                "type": "string",
                "description": "Optional proof linking this identifier to the primary identity"
              }
            }
          }
        },
        "signature": {
          "type": "object",
          "required": [
            "value",
            "algorithm",
            "public_key"
          ],
          "properties": {
            "value": {
              "type": "string",
              "description": "Base64-encoded signature value"
            },
            "algorithm": {
              "type": "string",
              "description": "Signature algorithm used (e.g., 'ed25519', 'sha256-ecdsa')",
              "enum": [
                "ed25519",
                "sha256-ecdsa",
                "secp256k1",
                "rsa-sha256"
              ]
            },
            "public_key": {
              "type": "string",
              "description": "Public key or key identifier to use for verification"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time",
              "description": "When the signature was created"
            }
          },
          "description": "Cryptographic signature for this record"
        }
      },
      "required": [
        "type",
        "pseudonym",
        "signature"
      ]
    }
  ],
  "__meta": {
    "file": "/Users/a/Documents/schemas/contributors/human_contributor.schema.json",
    "timestamp": "2025-05-13 11:48:11"
  }
}
,
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://dao.example.org/schemas/device.schema.json",
  "title": "Contributor Device",
  "description": "Schema for a hardware device associated with a Contributor (laptop, sensor node, signed sentinel Pi, etc.).  Used for device‑access verification and nonce rotation logs.",
  "type": "object",
  "required": [
    "device_id",
    "nonce",
    "responsibility",
    "activated_at"
  ],
  "properties": {
    "device_id": {
      "type": "string",
      "description": "Base64‑encoded hash of device serial + nonce."
    },
    "nonce": {
      "type": "string",
      "description": "Random nonce used to salt the device hash."
    },
    "responsibility": {
      "type": "string",
      "description": "Role of the device (sentinel, dev‑laptop, signer, etc.)."
    },
    "activated_at": {
      "type": "string",
      "format": "date-time",
      "description": "Epoch marker or RFC 3339 timestamp when the device was first authorised."
    },
    "deactivated_at": {
      "type": "string",
      "format": "date-time",
      "description": "Optional timestamp when the device was revoked."
    },
    "note": {
      "type": "string",
      "description": "Optional human note on device purpose."
    },
    "custody_log": {
      "type": "array",
      "description": "Chronological list of custody events for tracking device possession, maintenance, and transfers",
      "items": {
        "$ref": "common/custody_event.schema.json"
      }
    },
    "manufacturing_resources": {
      "type": "array",
      "description": "Resources used in the device's manufacturing",
      "items": {
        "type": "object",
        "required": [
          "resource_id",
          "quantity"
        ],
        "properties": {
          "resource_id": {
            "type": "string",
            "description": "Reference to a resource schema id"
          },
          "quantity": {
            "type": "number"
          },
          "unit": {
            "type": "string"
          },
          "source_location": {
            "type": "string"
          },
          "renewable_percentage": {
            "type": "number",
            "minimum": 0,
            "maximum": 100,
            "description": "Percentage from renewable sources (Unit: %, UCUM code for percent)"
          }
        }
      }
    },
    "operational_resources": {
      "type": "array",
      "description": "Resources consumed during device operation",
      "items": {
        "type": "object",
        "required": [
          "resource_id",
          "consumption_rate"
        ],
        "properties": {
          "resource_id": {
            "type": "string",
            "description": "Reference to a resource schema id"
          },
          "consumption_rate": {
            "type": "number",
            "description": "Rate of consumption"
          },
          "rate_unit": {
            "type": "string",
            "description": "Unit of consumption rate (e.g., 'kW.h/d' for kilowatt-hours per day)"
          },
          "variable": {
            "type": "boolean",
            "description": "Whether consumption rate is variable",
            "default": false
          },
          "peak_consumption": {
            "type": "number",
            "description": "Maximum consumption rate"
          }
        }
      }
    },
    "device_specifications": {
      "type": "object",
      "description": "Technical specifications of the device",
      "properties": {
        "manufacturer": {
          "type": "string"
        },
        "model": {
          "type": "string"
        },
        "serial_number": {
          "type": "string"
        },
        "hardware_version": {
          "type": "string"
        },
        "firmware_version": {
          "type": "string"
        },
        "components": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "component_type": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "manufacturer": {
                "type": "string"
              },
              "resource_id": {
                "type": "string",
                "description": "Reference to component as resource"
              }
            }
          }
        }
      }
    }
  },
  "additionalProperties": false,
  "examples": [
    {
      "device_id": "YmFzZTY0aGFzaA==",
      "nonce": "3b9ee0e5",
      "responsibility": "sentinel",
      "activated_at": "2025-05-13T12:00:00Z"
    }
  ],
  "__meta": {
    "file": "/Users/a/Documents/schemas/device.schema.json",
    "timestamp": "2025-05-13 13:37:54"
  }
}
,
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://dao.example.org/schemas/emotional_state.schema.json",
  "title": "Emotional State",
  "description": "Schema for tracking a person's emotional intensity over time with cryptographic verification",
  "allOf": [
    {
      "$ref": "./common/cognition/base_cognitive_state.schema.json"
    },
    {
      "type": "object",
      "required": [
        "type",
        "emotions"
      ],
      "properties": {
        "type": {
          "type": "string",
          "const": "EmotionalState",
          "description": "Type discriminator for this schema"
        },
        "emotions": {
          "type": "array",
          "description": "List of emotions being experienced",
          "minItems": 1,
          "items": {
            "type": "object",
            "required": [
              "name",
              "intensity"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the emotion",
                "examples": [
                  "anxiety",
                  "motivation",
                  "joy",
                  "sadness",
                  "anger",
                  "fear",
                  "surprise",
                  "trust"
                ]
              },
              "intensity": {
                "type": "integer",
                "minimum": 1,
                "maximum": 10,
                "description": "Subjective intensity rating of the emotion (1-10)"
              },
              "notes": {
                "type": "string",
                "description": "Optional context or details about this emotion"
              },
              "triggers": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Optional factors that triggered this emotion"
              }
            }
          }
        },
        "valence": {
          "type": "integer",
          "minimum": -5,
          "maximum": 5,
          "description": "Overall emotional valence from very negative (-5) to very positive (+5)"
        },
        "arousal": {
          "type": "integer",
          "minimum": 1,
          "maximum": 10,
          "description": "Overall emotional intensity or arousal (1-10)"
        },
        "related_psychological_state_cid": {
          "type": "string",
          "description": "Optional CID reference to a related psychological state record",
          "pattern": "^(sha256|sha3):[a-f0-9]{64}$"
        }
      }
    }
  ],
  "examples": [
    {
      "type": "EmotionalState",
      "human_id": "h.jane_researcher",
      "timestamp": "2023-11-15T14:45:12Z",
      "epoch": "After receiving project feedback",
      "emotions": [
        {
          "name": "anxiety",
          "intensity": 7,
          "notes": "Related to upcoming presentation",
          "triggers": [
            "deadline",
            "public speaking"
          ]
        },
        {
          "name": "motivation",
          "intensity": 8,
          "notes": "Excited about positive feedback"
        }
      ],
      "valence": 2,
      "arousal": 8,
      "notes": "Mixed feelings about the project progress",
      "previous_state_cid": "sha256:b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9b0c1d2e3f4a5b6c7d8e9f0a1b2c3",
      "related_psychological_state_cid": "sha256:a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9b0c1d2e3f4a5b6c7d8e9f0a1b2",
      "signature": {
        "value": "base64-signature-here",
        "algorithm": "ed25519",
        "public_key": "base64-public-key-here",
        "timestamp": "2023-11-15T14:45:12Z"
      }
    }
  ],
  "__meta": {
    "file": "/Users/a/Documents/schemas/emotional_state.schema.json",
    "timestamp": "2025-05-13 12:03:09"
  }
}
,
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://dao.example.org/schemas/epoch_log_entry.schema.json",
  "title": "Epoch Log Entry",
  "description": "Human‑observable time marker stored locally and embedded in every project delta, providing a tamper‑evident, offline‑friendly ordering signal (e.g., ‘first frost’, ‘moon over trees’).",
  "type": "object",
  "required": [
    "marker",
    "signed_by",
    "timestamp"
  ],
  "additionalProperties": false,
  "properties": {
    "marker": {
      "type": "string",
      "minLength": 1,
      "description": "Short natural‑language description of the real‑world event or observation."
    },
    "location": {
      "type": "string",
      "description": "Optional fuzzy or privacy‑preserving location hint (‘Greenbelt near river’)."
    },
    "signed_by": {
      "type": "array",
      "minItems": 1,
      "items": {
        "type": "string",
        "minLength": 1
      },
      "description": "List of pseudonym IDs that attest to this marker."
    },
    "timestamp": {
      "type": "string",
      "format": "date-time",
      "description": "UTC timestamp when the entry was recorded (RFC 3339)."
    },
    "signature": {
      "type": "string",
      "description": "Detached Ed25519 signature over the canonical JSON representation (all fields except ‘signature’ itself)."
    },
    "public_key": {
      "type": "string",
      "description": "Base64‑encoded public key corresponding to the signature, enabling offline verification."
    },
    "meta": {
      "type": "object",
      "description": "Free‑form extension object for application‑specific keys (e.g., weather data, image hash).",
      "additionalProperties": true
    }
  },
  "__meta": {
    "file": "/Users/a/Documents/schemas/epoch_log_entry.schema.json",
    "timestamp": "2025-05-13 00:45:36"
  }
}
,
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://dao.example.org/schemas/experiment.schema.json",
  "title": "DAO Federated‑Research Experiment Node",
  "description": "Standard JSON Schema for an Experiment node in the DAO research graph. Each experiment tests or documents a transmission medium, algorithm, or any other R&D topic, enabling collaborators to merge results in a tamper‑evident way.",
  "type": "object",
  "required": [
    "id",
    "type",
    "title",
    "hypothesis",
    "created_at",
    "lead",
    "status"
  ],
  "additionalProperties": false,
  "properties": {
    "id": {
      "type": "string",
      "description": "Unique slug identifier (prefixed with \"ex.\").",
      "pattern": "^ex\\.[a-z0-9_-]{3,64}$"
    },
    "type": {
      "const": "Experiment",
      "description": "Node class discriminator, must be the literal string 'Experiment'."
    },
    "title": {
      "type": "string",
      "minLength": 4,
      "maxLength": 160
    },
    "hypothesis": {
      "type": "string",
      "description": "Short statement of what the experiment seeks to prove or measure.",
      "minLength": 8
    },
    "lead": {
      "type": "string",
      "description": "Anon‑ID of the primary contributor responsible for the experiment."
    },
    "contributors": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "Optional list of additional contributor anon‑IDs."
    },
    "created_at": {
      "type": "string",
      "format": "date-time",
      "description": "ISO‑8601 timestamp when the experiment node was first created."
    },
    "updated_at": {
      "type": "string",
      "format": "date-time",
      "description": "Timestamp automatically refreshed on each edit."
    },
    "status": {
      "type": "string",
      "description": "Current lifecycle state of the experiment.",
      "enum": [
        "idea",
        "design",
        "running",
        "completed",
        "abandoned"
      ]
    },
    "tags": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "Free‑form or ontology‑based tags (e.g., 'urgent-alert', 'low-bandwidth')."
    },
    "protocol": {
      "type": "object",
      "description": "Technical recipe to run the experiment.",
      "required": [
        "medium_id",
        "transport"
      ],
      "properties": {
        "medium_id": {
          "type": "string",
          "description": "ID of the TransmissionMedium node the experiment targets."
        },
        "transport": {
          "type": "string",
          "description": "Name of the Transport implementation to use (e.g., 'TcpTransport')."
        },
        "parameters": {
          "type": "object",
          "description": "Key‑value map of protocol‑specific knobs (symbol size, retry, etc.).",
          "additionalProperties": {
            "type": [
              "number",
              "string",
              "boolean",
              "array",
              "object",
              "null"
            ]
          }
        }
      },
      "additionalProperties": false
    },
    "metrics": {
      "type": "object",
      "description": "Dict of quantitative metrics captured after execution (latency, loss, throughput).",
      "additionalProperties": {
        "type": "number"
      }
    },
    "result_digest": {
      "type": "string",
      "description": "Optional SHA‑256 or multihash of raw result artifact stored elsewhere."
    },
    "attachments": {
      "type": "array",
      "description": "URIs (IPFS, HTTPS, git) where raw data, code, or reports are stored.",
      "items": {
        "type": "string",
        "format": "uri"
      }
    },
    "status_history": {
      "type": "array",
      "description": "Chronological log of status changes.",
      "items": {
        "type": "object",
        "required": [
          "status",
          "timestamp"
        ],
        "properties": {
          "status": {
            "$ref": "#/properties/status"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "note": {
            "type": "string",
            "maxLength": 280
          }
        },
        "additionalProperties": false
      }
    }
  },
  "__meta": {
    "file": "/Users/a/Documents/schemas/experiment.schema.json",
    "timestamp": "2025-05-13 10:05:28"
  }
}
,
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://dao.example.org/schemas/funding_entry.schema.json",
  "title": "DAO Funding Entry Schema",
  "description": "A single record of funds allocated to a DAO Project (grant, donation, bounty pool, etc.).",
  "type": "object",
  "required": [
    "id",
    "amount",
    "source",
    "timestamp"
  ],
  "properties": {
    "id": {
      "type": "string",
      "description": "UUID v4 for this funding entry."
    },
    "amount": {
      "type": "number",
      "exclusiveMinimum": 0,
      "description": "Amount of currency units provided. Exact unit comes from project context or `currency` in meta."
    },
    "source": {
      "type": "string",
      "minLength": 1,
      "description": "Name or identifier of the funder (org, person, wallet address)."
    },
    "timestamp": {
      "type": "string",
      "format": "date-time",
      "description": "ISO‑8601 UTC timestamp when funds became available."
    },
    "tags": {
      "type": "array",
      "description": "Free‑form classification tags (e.g., matching, grant, quadratic).",
      "items": {
        "type": "string"
      },
      "uniqueItems": true,
      "default": []
    },
    "milestone": {
      "type": "string",
      "description": "Milestone or deliverable this funding is tied to, if any."
    },
    "conditions": {
      "type": "string",
      "description": "Human‑readable payout conditions (escrow, audit, etc.)."
    },
    "timeline": {
      "type": "string",
      "description": "Expected timeline / vesting schedule text."
    },
    "meta": {
      "type": "object",
      "description": "Open slot for currency code, transaction hash, escrow address, etc.",
      "additionalProperties": true,
      "default": {}
    }
  },
  "__meta": {
    "file": "/Users/a/Documents/schemas/funding_entry.schema.json",
    "timestamp": "2025-05-13 00:38:25"
  }
}
,
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://dao.example.org/schemas/graph_edge.meta.schema.json",
  "title": "DAO Graph Edge (Generic)",
  "description": "Common schema for every edge record inside the DAO federated‑research graph export bundle.  An edge connects two node `id`s, names its semantic `type`, and may carry arbitrary key/value properties.",
  "type": "object",
  "required": [
    "id",
    "type",
    "source",
    "target"
  ],
  "properties": {
    "id": {
      "type": "string",
      "description": "Unique slug or UUID for this edge (e.g., 'edge.tm.bitmempool->ch.mcudp')."
    },
    "type": {
      "type": "string",
      "description": "Semantic relationship name. Examples: 'supports_transport', 'tests_medium', 'optimised_for', 'fallback_to', 'depends_on', 'part_of', etc."
    },
    "source": {
      "type": "string",
      "description": "`id` of the source node. Must exist as a node in the same graph package."
    },
    "target": {
      "type": "string",
      "description": "`id` of the target node. Must exist as a node in the same graph package."
    },
    "properties": {
      "type": "object",
      "description": "Optional edge‑specific properties (weight, max_packet_b, comment, etc.). Keys free‑form, values any JSON type.",
      "additionalProperties": true
    }
  },
  "additionalProperties": false,
  "__meta": {
    "file": "/Users/a/Documents/schemas/graph_edge.meta.schema.json",
    "timestamp": "2025-05-13 00:50:33"
  }
}
,
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://dao.example.org/schemas/graph_node.meta.schema.json",
  "title": "DAO Graph Node – Meta Header",
  "description": "Fields common to **all** node classes in the DAO research graph export (Project, Task, TransmissionMedium, Experiment, Contributor, etc.).  Individual node schemas `$ref` this meta‑schema and then add their own domain‑specific properties.",
  "type": "object",
  "required": [
    "id",
    "type"
  ],
  "additionalProperties": false,
  "properties": {
    "id": {
      "type": "string",
      "pattern": "^[a-z0-9_.-]+$",
      "description": "Stable, URL‑safe slug.  Must be unique across the graph (e.g., `tm.bitcoin-mempool`, `ex.fnt-udp-wifi`)."
    },
    "type": {
      "type": "string",
      "description": "Concrete node class (e.g., `Project`, `Task`, `TransmissionMedium`, `Experiment`, `Contributor`).  Downstream schemas restrict this further with `enum`."
    },
    "label": {
      "type": "string",
      "description": "Optional human‑friendly name/title.  UI components display this if present."
    },
    "tags": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "uniqueItems": true,
      "description": "Taxonomy tokens like `suitable_for:urgent-alert`, `protocol:bitcoin`."
    },
    "created_at": {
      "type": "string",
      "format": "date-time",
      "description": "RFC 3339 timestamp when the node was first created in UTC."
    },
    "updated_at": {
      "type": "string",
      "format": "date-time",
      "description": "RFC 3339 timestamp of the last modification in UTC.  Can be omitted on first commit."
    },
    "meta": {
      "type": "object",
      "description": "Open container for implementation‑specific extensions (URLs, hashes, notes).  No validation is applied here to stay future‑proof."
    }
  },
  "examples": [
    {
      "id": "tm.wifi-ssid",
      "type": "TransmissionMedium",
      "label": "Wi‑Fi SSID Broadcast",
      "tags": [
        "suitable_for:offline-sync",
        "protocol:802.11"
      ],
      "created_at": "2025-05-13T18:00:00Z"
    },
    {
      "id": "ex.fec-fountain",
      "type": "Experiment",
      "label": "Fountain FEC over BLE Name",
      "tags": [
        "fec",
        "ble"
      ],
      "created_at": "2025-05-20T09:12:00Z",
      "updated_at": "2025-06-01T14:30:00Z",
      "meta": {
        "lead_researcher": "anon-fox1337",
        "repo": "ipfs://bafy.../notebook.ipynb"
      }
    }
  ],
  "__meta": {
    "file": "/Users/a/Documents/schemas/graph_node.meta.schema.json",
    "timestamp": "2025-05-13 00:52:19"
  }
}
,
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://dao.example.org/schemas/institution.schema.json",
  "title": "Institution",
  "description": "Schema for modeling institutions and companies across jurisdictions, legal systems, and economic roles",
  "type": "object",
  "allOf": [
    {
      "$ref": "./graph_node.meta.schema.json"
    },
    {
      "type": "object",
      "required": [
        "id",
        "name",
        "institution_type",
        "legal_form",
        "jurisdiction",
        "status"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for this institution"
        },
        "name": {
          "type": "string",
          "description": "Official name of the institution"
        },
        "aliases": {
          "type": "array",
          "description": "Alternative names, trading names, or abbreviations",
          "items": {
            "type": "string"
          }
        },
        "institution_type": {
          "type": "string",
          "description": "Category of institution",
          "enum": [
            "private_company",
            "non_profit",
            "government_agency",
            "university",
            "foundation",
            "dao",
            "other"
          ]
        },
        "description": {
          "type": "string",
          "description": "Brief description of the institution's purpose or activities"
        },
        "legal_metadata": {
          "type": "object",
          "description": "Legal and registration information",
          "properties": {
            "legal_form": {
              "type": "string",
              "description": "Legal structure (e.g., LLC, GmbH, Foundation)",
              "examples": [
                "LLC",
                "GmbH",
                "AG",
                "Inc",
                "Ltd",
                "Foundation",
                "501(c)(3)"
              ]
            },
            "jurisdiction": {
              "type": "object",
              "description": "Legal jurisdiction where the institution is registered",
              "required": [
                "country_code"
              ],
              "properties": {
                "country_code": {
                  "type": "string",
                  "description": "ISO 3166-1 alpha-2 country code",
                  "pattern": "^[A-Z]{2}$"
                },
                "subdivision": {
                  "type": "string",
                  "description": "State, province, or other subdivision"
                }
              }
            },
            "registration_id": {
              "type": "string",
              "description": "Official registration/identification number"
            },
            "incorporated_at": {
              "type": "string",
              "format": "date",
              "description": "Date of incorporation or establishment"
            },
            "dissolved_at": {
              "type": "string",
              "format": "date",
              "description": "Date of dissolution (if applicable)"
            },
            "status": {
              "type": "string",
              "description": "Current operational status",
              "enum": [
                "active",
                "dormant",
                "dissolved",
                "in_formation",
                "bankrupt",
                "restructuring"
              ]
            },
            "regulated_by": {
              "type": "array",
              "description": "Regulatory bodies that oversee this institution",
              "items": {
                "type": "string",
                "examples": [
                  "US-SEC",
                  "FCA",
                  "CNIL",
                  "MAS",
                  "FINMA"
                ]
              }
            }
          }
        },
        "compliance": {
          "type": "object",
          "description": "Compliance and governance information",
          "properties": {
            "compliance_certifications": {
              "type": "array",
              "description": "Compliance standards and certifications",
              "items": {
                "type": "object",
                "properties": {
                  "certification": {
                    "type": "string",
                    "examples": [
                      "GDPR",
                      "SOC2",
                      "ISO/IEC 27001",
                      "PCI-DSS"
                    ]
                  },
                  "issued_at": {
                    "type": "string",
                    "format": "date"
                  },
                  "expires_at": {
                    "type": "string",
                    "format": "date"
                  },
                  "issued_by": {
                    "type": "string"
                  },
                  "certification_id": {
                    "type": "string"
                  }
                },
                "required": [
                  "certification"
                ]
              }
            },
            "governance_model": {
              "type": "string",
              "description": "Primary governance mechanism",
              "enum": [
                "board_directed",
                "member_voted",
                "smart_contract",
                "government_controlled",
                "cooperative",
                "single_owner"
              ]
            },
            "economic_activity": {
              "type": "array",
              "description": "Primary economic activities",
              "items": {
                "type": "string",
                "examples": [
                  "mining",
                  "finance",
                  "research",
                  "technology",
                  "education",
                  "manufacturing"
                ]
              }
            },
            "industry_classification": {
              "type": "object",
              "description": "Standard industry classifications",
              "properties": {
                "code_type": {
                  "type": "string",
                  "description": "Classification system used",
                  "enum": [
                    "NAICS",
                    "NACE",
                    "SIC",
                    "ISIC",
                    "GICS"
                  ]
                },
                "code": {
                  "type": "string",
                  "description": "Classification code"
                },
                "description": {
                  "type": "string",
                  "description": "Description of the industry classification"
                }
              }
            }
          }
        },
        "relationships": {
          "type": "object",
          "description": "Organizational relationships",
          "properties": {
            "affiliated_entities": {
              "type": "array",
              "description": "Related organizations including subsidiaries, parent orgs, contractors",
              "items": {
                "type": "object",
                "properties": {
                  "entity_id": {
                    "type": "string",
                    "description": "Reference to another institution"
                  },
                  "relationship_type": {
                    "type": "string",
                    "enum": [
                      "parent",
                      "subsidiary",
                      "affiliate",
                      "contractor",
                      "partner",
                      "investor"
                    ]
                  },
                  "ownership_percentage": {
                    "type": "number",
                    "description": "Ownership stake percentage (0-100)",
                    "minimum": 0,
                    "maximum": 100
                  },
                  "description": {
                    "type": "string"
                  }
                },
                "required": [
                  "entity_id",
                  "relationship_type"
                ]
              }
            },
            "operational_scope": {
              "type": "string",
              "description": "Geographical scope of operations",
              "enum": [
                "local",
                "national",
                "multinational",
                "digital_only",
                "global"
              ]
            },
            "operating_regions": {
              "type": "array",
              "description": "Specific regions of operation",
              "items": {
                "type": "string",
                "examples": [
                  "EU",
                  "APAC",
                  "North America",
                  "Global"
                ]
              }
            }
          }
        },
        "cryptographic_identity": {
          "type": "object",
          "description": "Cryptographic signing and identity information",
          "properties": {
            "signature": {
              "$ref": "./common/signature.schema.json"
            },
            "authorized_representative_id": {
              "type": "string",
              "description": "Link to contributor authorized to sign on behalf of institution"
            },
            "contract_reference": {
              "type": "string",
              "format": "uri",
              "description": "URI to signed legal terms or contract"
            },
            "public_keys": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "key_id": {
                    "type": "string"
                  },
                  "key_type": {
                    "type": "string",
                    "enum": [
                      "ed25519",
                      "secp256k1",
                      "rsa",
                      "pgp"
                    ]
                  },
                  "key_value": {
                    "type": "string"
                  },
                  "purpose": {
                    "type": "string",
                    "enum": [
                      "signing",
                      "encryption",
                      "authentication",
                      "general"
                    ]
                  }
                },
                "required": [
                  "key_id",
                  "key_type",
                  "key_value"
                ]
              }
            }
          }
        },
        "contact_info": {
          "type": "object",
          "description": "Contact information",
          "properties": {
            "address": {
              "type": "object",
              "properties": {
                "street_address": {
                  "type": "string"
                },
                "city": {
                  "type": "string"
                },
                "state": {
                  "type": "string"
                },
                "postal_code": {
                  "type": "string"
                },
                "country": {
                  "type": "string"
                }
              }
            },
            "email": {
              "type": "string",
              "format": "email"
            },
            "phone": {
              "type": "string"
            },
            "website": {
              "type": "string",
              "format": "uri"
            }
          }
        },
        "founded_at": {
          "type": "string",
          "format": "date",
          "description": "Date when the institution was founded (may differ from incorporation date)"
        },
        "funding_sources": {
          "type": "array",
          "description": "References to funding entries",
          "items": {
            "type": "string"
          }
        },
        "dataset_references": {
          "type": "array",
          "description": "References to datasets owned or managed by this institution",
          "items": {
            "type": "string"
          }
        },
        "device_manufacturing": {
          "type": "array",
          "description": "References to devices manufactured by this institution",
          "items": {
            "type": "string"
          }
        },
        "tags": {
          "type": "array",
          "description": "User-defined tags for categorization",
          "items": {
            "type": "string"
          }
        },
        "metadata": {
          "type": "object",
          "description": "Additional metadata or extension points",
          "additionalProperties": true
        }
      }
    }
  ],
  "additionalProperties": false,
  "examples": [
    {
      "id": "inst-1234",
      "name": "Acme Corporation",
      "aliases": [
        "Acme Corp.",
        "ACME"
      ],
      "institution_type": "private_company",
      "description": "Technology and manufacturing conglomerate",
      "legal_metadata": {
        "legal_form": "Inc",
        "jurisdiction": {
          "country_code": "US",
          "subdivision": "Delaware"
        },
        "registration_id": "DE-12345678",
        "incorporated_at": "1998-03-15",
        "status": "active",
        "regulated_by": [
          "US-SEC",
          "US-FDA"
        ]
      },
      "compliance": {
        "compliance_certifications": [
          {
            "certification": "ISO/IEC 27001",
            "issued_at": "2022-05-10",
            "expires_at": "2025-05-09",
            "issued_by": "ISO Certification Authority",
            "certification_id": "ISO-27001-AC-123456"
          },
          {
            "certification": "SOC2",
            "issued_at": "2023-01-15",
            "expires_at": "2024-01-14"
          }
        ],
        "governance_model": "board_directed",
        "economic_activity": [
          "technology",
          "manufacturing",
          "research"
        ],
        "industry_classification": {
          "code_type": "NAICS",
          "code": "334220",
          "description": "Radio and Television Broadcasting and Wireless Communications Equipment Manufacturing"
        }
      },
      "relationships": {
        "affiliated_entities": [
          {
            "entity_id": "inst-2345",
            "relationship_type": "subsidiary",
            "ownership_percentage": 100,
            "description": "Fully owned R&D subsidiary"
          },
          {
            "entity_id": "inst-3456",
            "relationship_type": "contractor",
            "description": "Manufacturing partner"
          }
        ],
        "operational_scope": "multinational",
        "operating_regions": [
          "North America",
          "EU",
          "APAC"
        ]
      },
      "cryptographic_identity": {
        "authorized_representative_id": "contributor-5678",
        "contract_reference": "https://dao.example.org/contracts/acme-2023.pdf",
        "public_keys": [
          {
            "key_id": "acme-primary-2023",
            "key_type": "ed25519",
            "key_value": "Cs8kXPn532nxiRQ72MpWkdYhpZdZ7bA3TaC2JZkiCig=",
            "purpose": "signing"
          }
        ]
      },
      "contact_info": {
        "address": {
          "street_address": "123 Innovation Drive",
          "city": "Palo Alto",
          "state": "CA",
          "postal_code": "94301",
          "country": "US"
        },
        "email": "contact@acmecorp.example",
        "website": "https://acmecorp.example"
      },
      "founded_at": "1997-11-12",
      "funding_sources": [
        "funding-789",
        "funding-790"
      ],
      "tags": [
        "technology",
        "manufacturing",
        "publicly-traded"
      ]
    },
    {
      "id": "inst-5678",
      "name": "Global Research Foundation",
      "institution_type": "foundation",
      "description": "Non-profit organization dedicated to scientific research and education",
      "legal_metadata": {
        "legal_form": "501(c)(3)",
        "jurisdiction": {
          "country_code": "US",
          "subdivision": "New York"
        },
        "registration_id": "NY-87654321",
        "incorporated_at": "2005-07-22",
        "status": "active"
      },
      "compliance": {
        "governance_model": "board_directed",
        "economic_activity": [
          "research",
          "education",
          "grants"
        ],
        "industry_classification": {
          "code_type": "NAICS",
          "code": "541715",
          "description": "Research and Development in the Physical, Engineering, and Life Sciences"
        }
      },
      "relationships": {
        "operational_scope": "global",
        "operating_regions": [
          "Global"
        ]
      },
      "cryptographic_identity": {
        "authorized_representative_id": "contributor-9012"
      },
      "contact_info": {
        "address": {
          "street_address": "456 Science Avenue",
          "city": "New York",
          "state": "NY",
          "postal_code": "10001",
          "country": "US"
        },
        "email": "info@globalresearch.example",
        "website": "https://globalresearch.example"
      },
      "founded_at": "2005-06-30",
      "dataset_references": [
        "dataset-123",
        "dataset-456"
      ],
      "tags": [
        "non-profit",
        "research",
        "grants"
      ]
    },
    {
      "id": "inst-9012",
      "name": "CryptoDAO Collective",
      "institution_type": "dao",
      "description": "Decentralized autonomous organization focused on blockchain development",
      "legal_metadata": {
        "legal_form": "DAO LLC",
        "jurisdiction": {
          "country_code": "CH",
          "subdivision": "Zug"
        },
        "registration_id": "ZG-2023-456789",
        "incorporated_at": "2023-01-10",
        "status": "active"
      },
      "compliance": {
        "compliance_certifications": [],
        "governance_model": "smart_contract",
        "economic_activity": [
          "technology",
          "finance",
          "software"
        ],
        "industry_classification": {
          "code_type": "NAICS",
          "code": "541512",
          "description": "Computer Systems Design Services"
        }
      },
      "relationships": {
        "operational_scope": "digital_only"
      },
      "cryptographic_identity": {
        "contract_reference": "https://etherscan.io/address/0xabcdef1234567890",
        "public_keys": [
          {
            "key_id": "dao-treasury-key",
            "key_type": "secp256k1",
            "key_value": "0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3",
            "purpose": "signing"
          }
        ]
      },
      "contact_info": {
        "email": "governance@cryptodao.example",
        "website": "https://cryptodao.example"
      },
      "founded_at": "2022-12-01",
      "funding_sources": [
        "funding-567"
      ],
      "device_manufacturing": [],
      "tags": [
        "blockchain",
        "dao",
        "defi"
      ]
    }
  ],
  "__meta": {
    "file": "/Users/a/Documents/schemas/institution.schema.json",
    "timestamp": "2025-05-13 15:22:28"
  }
}
,
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://dao.example.org/schemas/legal_instrument_base.schema.json",
  "title": "Legal Instrument Base",
  "description": "Base schema for modeling legal instruments including contracts, licenses, statutes, regulations and agreements",
  "type": "object",
  "allOf": [
    {
      "$ref": "./graph_node.meta.schema.json"
    }
  ],
  "required": [
    "id",
    "type",
    "instrument_type",
    "title",
    "jurisdiction",
    "effective_date",
    "status"
  ],
  "properties": {
    "id": {
      "type": "string",
      "pattern": "^li\\.[a-z0-9_-]{3,64}$",
      "description": "Unique identifier prefixed with 'li.'"
    },
    "type": {
      "const": "LegalInstrument"
    },
    "instrument_type": {
      "type": "string",
      "description": "Type of legal instrument",
      "enum": [
        "contract",
        "license",
        "statute",
        "regulation",
        "policy",
        "treaty",
        "constitutional",
        "judicial_decision",
        "executive_order",
        "dao_governance",
        "terms_of_use",
        "nda",
        "other"
      ]
    },
    "title": {
      "type": "string",
      "description": "Official title or name of the legal instrument"
    },
    "aliases": {
      "type": "array",
      "description": "Alternative names, abbreviations, or common references",
      "items": {
        "type": "string"
      }
    },
    "description": {
      "type": "string",
      "description": "Brief summary of the instrument's purpose and scope"
    },
    "jurisdiction": {
      "type": "array",
      "description": "Legal jurisdictions where the instrument applies",
      "minItems": 1,
      "items": {
        "type": "object",
        "required": [
          "country_code"
        ],
        "properties": {
          "country_code": {
            "type": "string",
            "description": "ISO 3166-1 alpha-2 country code",
            "pattern": "^[A-Z]{2}$"
          },
          "subdivision": {
            "type": "string",
            "description": "State, province, or other subdivision"
          },
          "notes": {
            "type": "string",
            "description": "Additional jurisdiction context"
          }
        }
      }
    },
    "governing_law": {
      "type": "string",
      "description": "Reference to applicable legal system",
      "pattern": "^ls\\.[a-z0-9_-]{3,64}$"
    },
    "versioning": {
      "type": "object",
      "description": "Version tracking information",
      "properties": {
        "version": {
          "type": "string",
          "description": "Version identifier (e.g., '1.0', '2023-01')"
        },
        "previous_version": {
          "type": "string",
          "description": "Reference to previous version of this instrument"
        },
        "revision_date": {
          "type": "string",
          "format": "date",
          "description": "Date of this version"
        },
        "revision_notes": {
          "type": "string",
          "description": "Notes about changes from previous version"
        }
      }
    },
    "temporal_scope": {
      "type": "object",
      "required": [
        "effective_date"
      ],
      "properties": {
        "effective_date": {
          "type": "string",
          "format": "date",
          "description": "Date when the instrument takes effect"
        },
        "expiration_date": {
          "type": "string",
          "format": "date",
          "description": "Date when the instrument expires, if applicable"
        },
        "termination_conditions": {
          "type": "string",
          "description": "Conditions under which the instrument would terminate"
        }
      }
    },
    "effective_date": {
      "type": "string",
      "format": "date",
      "description": "Date when the instrument takes effect"
    },
    "expiration_date": {
      "type": "string",
      "format": "date",
      "description": "Date when the instrument expires, if applicable"
    },
    "parties": {
      "type": "array",
      "description": "Parties to the legal instrument (individuals or organizations)",
      "items": {
        "type": "object",
        "required": [
          "party_id",
          "role"
        ],
        "properties": {
          "party_id": {
            "type": "string",
            "description": "Reference to a contributor or institution"
          },
          "party_type": {
            "type": "string",
            "enum": [
              "contributor",
              "institution"
            ]
          },
          "role": {
            "type": "string",
            "description": "Role of this party in the instrument",
            "examples": [
              "licensor",
              "licensee",
              "service_provider",
              "client",
              "regulator",
              "data_controller",
              "data_processor"
            ]
          },
          "acceptance": {
            "type": "object",
            "description": "Evidence of party's consent or acceptance",
            "properties": {
              "signature": {
                "$ref": "./common/signature.schema.json"
              },
              "accepted_at": {
                "type": "string",
                "format": "date-time",
                "description": "When this party accepted the instrument"
              },
              "acceptance_method": {
                "type": "string",
                "description": "Method of acceptance",
                "enum": [
                  "cryptographic_signature",
                  "physical_signature",
                  "click_through",
                  "implied_consent",
                  "legislative_process"
                ]
              }
            }
          }
        }
      }
    },
    "clauses": {
      "type": "array",
      "description": "Substantive provisions of the instrument",
      "items": {
        "type": "object",
        "required": [
          "id",
          "title",
          "text"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier for this clause (e.g., 'sec-1.2', 'article-5')"
          },
          "title": {
            "type": "string",
            "description": "Title or heading of the clause"
          },
          "text": {
            "type": "string",
            "description": "Full text of the clause"
          },
          "type": {
            "type": "string",
            "description": "Type of provision",
            "enum": [
              "obligation",
              "right",
              "restriction",
              "definition",
              "procedure",
              "remedy",
              "liability",
              "termination",
              "other"
            ]
          },
          "applies_to": {
            "type": "array",
            "description": "Resources or subjects this clause specifically governs",
            "items": {
              "type": "object",
              "properties": {
                "resource_id": {
                  "type": "string",
                  "description": "ID of dataset, project, or other resource"
                },
                "resource_type": {
                  "type": "string",
                  "description": "Type of resource referenced",
                  "enum": [
                    "dataset",
                    "project",
                    "code",
                    "model",
                    "device",
                    "api",
                    "system",
                    "other"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "enforcement": {
      "type": "object",
      "description": "How the instrument is enforced",
      "properties": {
        "mechanism": {
          "type": "string",
          "description": "Primary enforcement mechanism",
          "enum": [
            "court",
            "arbitration",
            "smart_contract",
            "dao_governance",
            "regulatory_agency",
            "self_enforcing",
            "social_norm"
          ]
        },
        "venue": {
          "type": "string",
          "description": "Location or forum for enforcement or dispute resolution"
        },
        "remedy_types": {
          "type": "array",
          "description": "Available remedies for non-compliance",
          "items": {
            "type": "string",
            "examples": [
              "damages",
              "specific_performance",
              "injunction",
              "suspension",
              "termination",
              "penalty"
            ]
          }
        },
        "enforcement_agent": {
          "type": "string",
          "description": "Entity responsible for enforcement"
        }
      }
    },
    "resources_governed": {
      "type": "array",
      "description": "Resources this instrument governs or applies to",
      "items": {
        "type": "object",
        "required": [
          "resource_id",
          "resource_type"
        ],
        "properties": {
          "resource_id": {
            "type": "string",
            "description": "ID of resource (dataset, project, etc.)"
          },
          "resource_type": {
            "type": "string",
            "description": "Type of resource",
            "enum": [
              "dataset",
              "project",
              "code",
              "model",
              "device",
              "api",
              "system",
              "other"
            ]
          },
          "relationship": {
            "type": "string",
            "description": "How this instrument relates to the resource",
            "enum": [
              "governs",
              "licenses",
              "restricts",
              "creates",
              "terminates",
              "modifies"
            ]
          }
        }
      }
    },
    "references": {
      "type": "array",
      "description": "Legal references or citations to other instruments",
      "items": {
        "type": "object",
        "properties": {
          "referenced_instrument": {
            "type": "string",
            "description": "ID of referenced instrument if in the system"
          },
          "external_reference": {
            "type": "string",
            "description": "Citation or reference to external source"
          },
          "relationship": {
            "type": "string",
            "enum": [
              "supersedes",
              "implements",
              "amends",
              "cites",
              "incorporates",
              "contrasts_with"
            ]
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "URL to referenced document if available"
          }
        }
      }
    },
    "official_sources": {
      "type": "array",
      "description": "Official publication or filing sources",
      "items": {
        "type": "object",
        "properties": {
          "source_name": {
            "type": "string",
            "description": "Name of official source"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "URL to official source"
          },
          "identifier": {
            "type": "string",
            "description": "Official identifier or citation"
          }
        }
      }
    },
    "status": {
      "type": "string",
      "description": "Current status of the instrument",
      "enum": [
        "draft",
        "active",
        "superseded",
        "expired",
        "revoked",
        "amended",
        "in_force",
        "repealed",
        "proposed"
      ]
    },
    "tags": {
      "type": "array",
      "description": "User-defined tags for categorization",
      "items": {
        "type": "string"
      }
    },
    "signature": {
      "$ref": "./common/signature.schema.json",
      "description": "Cryptographic signature authenticating this instrument definition"
    },
    "meta": {
      "type": "object",
      "description": "Additional metadata or extension points",
      "additionalProperties": true
    }
  },
  "additionalProperties": false,
  "examples": [
    {
      "id": "li.uk-gdpr-2018",
      "type": "LegalInstrument",
      "instrument_type": "statute",
      "title": "UK General Data Protection Regulation",
      "aliases": [
        "UK GDPR",
        "DPA 2018"
      ],
      "description": "UK implementation of GDPR post-Brexit defining rules for processing and protecting personal data",
      "jurisdiction": [
        {
          "country_code": "GB",
          "notes": "Applies to all of the United Kingdom"
        }
      ],
      "governing_law": "ls.uk-common-law",
      "versioning": {
        "version": "2021-01",
        "revision_date": "2021-01-01",
        "revision_notes": "Post-Brexit adaptation of EU GDPR into UK law"
      },
      "effective_date": "2021-01-01",
      "parties": [
        {
          "party_id": "inst-ico",
          "party_type": "institution",
          "role": "regulator",
          "acceptance": {
            "acceptance_method": "legislative_process"
          }
        }
      ],
      "clauses": [
        {
          "id": "article-5",
          "title": "Principles relating to processing of personal data",
          "text": "Personal data shall be processed lawfully, fairly and in a transparent manner in relation to the data subject ('lawfulness, fairness and transparency')...",
          "type": "obligation"
        },
        {
          "id": "article-6",
          "title": "Lawfulness of processing",
          "text": "Processing shall be lawful only if and to the extent that at least one of the following applies...",
          "type": "obligation"
        },
        {
          "id": "article-83",
          "title": "Administrative fines",
          "text": "Infringements of this Regulation can lead to administrative fines up to £17.5 million, or in the case of an undertaking, up to 4% of the total worldwide annual turnover of the preceding financial year, whichever is higher.",
          "type": "liability"
        }
      ],
      "enforcement": {
        "mechanism": "regulatory_agency",
        "venue": "United Kingdom",
        "remedy_types": [
          "damages",
          "administrative_fines",
          "processing_suspension"
        ],
        "enforcement_agent": "Information Commissioner's Office"
      },
      "references": [
        {
          "external_reference": "EU GDPR (Regulation 2016/679)",
          "relationship": "derives_from",
          "url": "https://eur-lex.europa.eu/eli/reg/2016/679/oj"
        },
        {
          "external_reference": "Data Protection Act 2018",
          "relationship": "implements",
          "url": "https://www.legislation.gov.uk/ukpga/2018/12/contents"
        }
      ],
      "official_sources": [
        {
          "source_name": "legislation.gov.uk",
          "url": "https://www.legislation.gov.uk/ukpga/2018/12/contents",
          "identifier": "2018 c. 12"
        }
      ],
      "status": "in_force",
      "tags": [
        "data_protection",
        "privacy",
        "uk_law",
        "gdpr"
      ]
    },
    {
      "id": "li.contributor-nda-dataset-123",
      "type": "LegalInstrument",
      "instrument_type": "nda",
      "title": "Confidentiality Agreement - Healthcare Dataset Analysis Project",
      "description": "Non-disclosure agreement covering access to sensitive healthcare dataset for research purposes",
      "jurisdiction": [
        {
          "country_code": "US",
          "subdivision": "California"
        }
      ],
      "governing_law": "ls.us-california",
      "versioning": {
        "version": "1.0"
      },
      "effective_date": "2023-06-15",
      "expiration_date": "2025-06-14",
      "parties": [
        {
          "party_id": "inst-1234",
          "party_type": "institution",
          "role": "disclosing_party",
          "acceptance": {
            "signature": {
              "value": "c3VwZXJzZWNyZXRzaWduYXR1cmV2YWx1ZQ==",
              "algorithm": "ed25519",
              "public_key": "acme-primary-2023",
              "timestamp": "2023-06-15T10:00:00Z"
            },
            "accepted_at": "2023-06-15T10:00:00Z",
            "acceptance_method": "cryptographic_signature"
          }
        },
        {
          "party_id": "contributor-5678",
          "party_type": "contributor",
          "role": "receiving_party",
          "acceptance": {
            "signature": {
              "value": "YW5vdGhlcnNlY3JldHNpZ25hdHVyZXZhbHVl",
              "algorithm": "ed25519",
              "public_key": "contributor-key-2023",
              "timestamp": "2023-06-15T11:30:00Z"
            },
            "accepted_at": "2023-06-15T11:30:00Z",
            "acceptance_method": "cryptographic_signature"
          }
        }
      ],
      "clauses": [
        {
          "id": "sec-1",
          "title": "Definition of Confidential Information",
          "text": "\"Confidential Information\" means any and all technical and non-technical information related to the Dataset (defined below) including patient data, processing methodologies, algorithms, and research findings...",
          "type": "definition"
        },
        {
          "id": "sec-2",
          "title": "Non-disclosure Obligations",
          "text": "Receiving Party agrees to not disclose, publish, or disseminate Confidential Information to anyone other than those of its employees, contractors, and agents with a need to know...",
          "type": "obligation",
          "applies_to": [
            {
              "resource_id": "dataset-123",
              "resource_type": "dataset"
            }
          ]
        },
        {
          "id": "sec-3",
          "title": "Term and Termination",
          "text": "This Agreement shall remain in effect for a period of two (2) years from the Effective Date, unless terminated earlier...",
          "type": "termination"
        }
      ],
      "enforcement": {
        "mechanism": "court",
        "venue": "Superior Court of California, County of San Francisco",
        "remedy_types": [
          "injunction",
          "damages"
        ]
      },
      "resources_governed": [
        {
          "resource_id": "dataset-123",
          "resource_type": "dataset",
          "relationship": "governs"
        }
      ],
      "status": "active",
      "tags": [
        "nda",
        "healthcare",
        "research",
        "confidential"
      ]
    }
  ],
  "__meta": {
    "file": "/Users/a/Documents/schemas/legal_instrument_base.schema.json",
    "timestamp": "2025-05-13 15:42:23"
  }
}
,
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://dao.example.org/schemas/legal_system.schema.json",
  "title": "Legal System",
  "description": "Schema for modeling legal systems, jurisdictions, and their characteristics across different regions and legal traditions",
  "type": "object",
  "allOf": [
    {
      "$ref": "./graph_node.meta.schema.json"
    }
  ],
  "required": [
    "id",
    "type",
    "label",
    "legal_family",
    "jurisdiction_scope",
    "sources_of_law",
    "primary_language"
  ],
  "properties": {
    "id": {
      "type": "string",
      "pattern": "^ls\\.[a-z0-9_-]{3,64}$",
      "description": "Unique slug prefixed with 'ls.' (e.g., ls.common-law)"
    },
    "type": {
      "const": "LegalSystem"
    },
    "label": {
      "type": "string",
      "description": "Human-readable name of the legal system"
    },
    "legal_family": {
      "type": "string",
      "enum": [
        "common",
        "civil",
        "religious",
        "customary",
        "mixed"
      ],
      "description": "Primary legal family or tradition"
    },
    "jurisdiction_scope": {
      "type": "array",
      "description": "Geographic scope defined by ISO 3166 country codes and sub-regions",
      "items": {
        "type": "object",
        "required": [
          "region_code"
        ],
        "properties": {
          "region_code": {
            "type": "string",
            "description": "ISO 3166-1 alpha-2 country code or recognized sub-region code"
          },
          "subdivision": {
            "type": "string",
            "description": "Specific state, province, or other subdivision if applicable"
          },
          "notes": {
            "type": "string",
            "description": "Additional context about jurisdiction application"
          }
        }
      }
    },
    "sources_of_law": {
      "type": "array",
      "description": "Recognized sources of legal authority in this system",
      "minItems": 1,
      "items": {
        "type": "string",
        "examples": [
          "statute",
          "precedent",
          "constitution",
          "custom",
          "religious_text",
          "treaty",
          "administrative_rule"
        ]
      }
    },
    "primary_language": {
      "type": "string",
      "description": "ISO 639-1/2 language code for the primary legal language",
      "pattern": "^[a-z]{2,3}(-[A-Z]{2})?$"
    },
    "other_languages": {
      "type": "array",
      "description": "Other official languages in which legal proceedings may be conducted",
      "items": {
        "type": "string",
        "pattern": "^[a-z]{2,3}(-[A-Z]{2})?$"
      }
    },
    "interpretation_style": {
      "type": "string",
      "description": "Predominant approach to legal interpretation (e.g., 'Textualism', 'Living Constitution')"
    },
    "compliance_requirements": {
      "type": "array",
      "description": "Major categories of legal obligations in this system",
      "items": {
        "type": "object",
        "required": [
          "category",
          "description"
        ],
        "properties": {
          "category": {
            "type": "string",
            "description": "Category of legal obligation",
            "examples": [
              "data_protection",
              "licensing",
              "labor",
              "taxation",
              "environmental"
            ]
          },
          "description": {
            "type": "string",
            "description": "Brief description of compliance requirement"
          },
          "reference": {
            "type": "string",
            "description": "Reference to specific law, regulation, or treaty"
          }
        }
      }
    },
    "governing_bodies": {
      "type": "array",
      "description": "Major courts, agencies, or councils responsible for enforcement and adjudication",
      "items": {
        "type": "object",
        "required": [
          "name",
          "role"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the governing body"
          },
          "role": {
            "type": "string",
            "description": "Function or jurisdiction of this body",
            "examples": [
              "supreme_court",
              "constitutional_court",
              "regulatory_agency",
              "administrative_tribunal"
            ]
          },
          "website": {
            "type": "string",
            "format": "uri",
            "description": "Official website URL"
          }
        }
      }
    },
    "binding_instruments": {
      "type": "array",
      "description": "Key treaties, agreements, or foundational documents",
      "items": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the binding instrument"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "Reference URL to the instrument"
          },
          "effective_date": {
            "type": "string",
            "format": "date",
            "description": "When the instrument came into effect"
          }
        }
      }
    },
    "signature": {
      "$ref": "./common/signature.schema.json",
      "description": "Optional cryptographic signature to verify integrity and authority of legal system definition"
    },
    "meta": {
      "type": "object",
      "description": "Additional metadata for edge cases and extensibility",
      "additionalProperties": true
    }
  },
  "examples": [
    {
      "id": "ls.uk-common-law",
      "type": "LegalSystem",
      "label": "United Kingdom Common Law",
      "legal_family": "common",
      "jurisdiction_scope": [
        {
          "region_code": "GB",
          "notes": "England and Wales follow common law; Scotland has a mixed system"
        }
      ],
      "sources_of_law": [
        "statute",
        "precedent",
        "custom",
        "parliamentary_sovereignty"
      ],
      "primary_language": "en-GB",
      "interpretation_style": "Purposive approach with increasing textualism",
      "compliance_requirements": [
        {
          "category": "data_protection",
          "description": "UK GDPR and Data Protection Act 2018 compliance for personal data processing",
          "reference": "Data Protection Act 2018"
        },
        {
          "category": "corporate_governance",
          "description": "Companies Act 2006 compliance for corporate entities",
          "reference": "Companies Act 2006"
        }
      ],
      "governing_bodies": [
        {
          "name": "UK Supreme Court",
          "role": "supreme_court",
          "website": "https://www.supremecourt.uk"
        },
        {
          "name": "Court of Appeal",
          "role": "appellate_court"
        },
        {
          "name": "Information Commissioner's Office",
          "role": "regulatory_agency",
          "website": "https://ico.org.uk"
        }
      ],
      "binding_instruments": [
        {
          "name": "Magna Carta",
          "effective_date": "1215-06-15"
        },
        {
          "name": "Human Rights Act 1998",
          "effective_date": "1998-11-09",
          "url": "https://www.legislation.gov.uk/ukpga/1998/42/contents"
        }
      ]
    },
    {
      "id": "ls.japan-civil-law",
      "type": "LegalSystem",
      "label": "Japanese Civil Law System",
      "legal_family": "civil",
      "jurisdiction_scope": [
        {
          "region_code": "JP"
        }
      ],
      "sources_of_law": [
        "constitution",
        "statute",
        "cabinet_orders",
        "administrative_rule"
      ],
      "primary_language": "ja",
      "interpretation_style": "Code-based systematic interpretation",
      "compliance_requirements": [
        {
          "category": "data_protection",
          "description": "Act on the Protection of Personal Information",
          "reference": "Act No. 57 of 2003"
        },
        {
          "category": "corporate_governance",
          "description": "Companies Act of Japan",
          "reference": "Act No. 86 of 2005"
        }
      ],
      "governing_bodies": [
        {
          "name": "Supreme Court of Japan",
          "role": "supreme_court",
          "website": "https://www.courts.go.jp/english/"
        },
        {
          "name": "Personal Information Protection Commission",
          "role": "regulatory_agency",
          "website": "https://www.ppc.go.jp/en/"
        }
      ],
      "binding_instruments": [
        {
          "name": "Constitution of Japan",
          "effective_date": "1947-05-03"
        },
        {
          "name": "Civil Code of Japan",
          "effective_date": "1896-04-27"
        }
      ]
    },
    {
      "id": "ls.dao-governance",
      "type": "LegalSystem",
      "label": "DAO Decentralized Governance",
      "legal_family": "mixed",
      "jurisdiction_scope": [
        {
          "region_code": "ZZ",
          "notes": "Digital jurisdiction without strict geographic boundaries"
        }
      ],
      "sources_of_law": [
        "smart_contract",
        "community_vote",
        "protocol_code",
        "consensus_mechanism"
      ],
      "primary_language": "en",
      "interpretation_style": "Code is law with community arbitration",
      "compliance_requirements": [
        {
          "category": "consensus_adherence",
          "description": "Compliance with consensus rules and protocol governance"
        },
        {
          "category": "token_governance",
          "description": "Respecting token-based voting outcomes"
        }
      ],
      "governing_bodies": [
        {
          "name": "Core Development Team",
          "role": "technical_governance"
        },
        {
          "name": "Arbitration Council",
          "role": "dispute_resolution"
        },
        {
          "name": "Token Holders Assembly",
          "role": "legislative"
        }
      ],
      "binding_instruments": [
        {
          "name": "Genesis Smart Contract",
          "url": "https://etherscan.io/address/0x1234567890abcdef1234567890abcdef12345678"
        },
        {
          "name": "DAO Constitution v1.0",
          "url": "https://dao.example.org/constitution.pdf"
        }
      ],
      "meta": {
        "consensus_mechanism": "Proof of Stake",
        "governance_token": "DAOtoken",
        "off_chain_component": "Arweave-based proposal system"
      }
    }
  ],
  "__meta": {
    "file": "/Users/a/Documents/schemas/legal_system.schema.json",
    "timestamp": "2025-05-13 15:27:21"
  }
}
,
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://dao.example.org/schemas/measurement.schema.json",
  "title": "Physical Measurement",
  "description": "Atomic numeric observation with unit, context and provenance. Compatible with UCUM and QUDT codes.",
  "oneOf": [
    {
      "$ref": "measurements/thermal_measurement.schema.json"
    },
    {
      "$ref": "measurements/spatial_measurement.schema.json"
    },
    {
      "$ref": "measurements/electromagnetic_measurement.schema.json"
    },
    {
      "$ref": "measurements/signal_measurement.schema.json"
    },
    {
      "$ref": "measurements/data_measurement.schema.json"
    },
    {
      "$ref": "measurements/power_measurement.schema.json"
    },
    {
      "$ref": "measurements/base_measurement.schema.json"
    }
  ],
  "examples": [
    {
      "quantity_kind": "Temperature",
      "value": 22.6,
      "unit": "Cel",
      "uncertainty": 0.3,
      "timestamp": "2025-05-13T11:59:27Z",
      "observed_by": "dev.sensor‑roof001",
      "feature_of_interest": "tm.wifi-ssid",
      "location": "geo:-34.90,138.60"
    },
    {
      "quantity_kind": "SignalStrength",
      "value": -67.5,
      "unit": "dB[mW]",
      "timestamp": "2025-05-13T11:59:27Z",
      "observed_by": "dev.wifi-scanner-001",
      "feature_of_interest": "tm.wifi-channel-5",
      "signal_type": "wifi",
      "channel": "5GHz-40"
    },
    {
      "quantity_kind": "DataRate",
      "value": 867.3,
      "unit": "Mbit/s",
      "observed_by": "dev.network-monitor-001",
      "feature_of_interest": "tm.wifi-channel-5",
      "protocol": "TCP",
      "direction": "download"
    }
  ],
  "__meta": {
    "file": "/Users/a/Documents/schemas/measurement.schema.json",
    "timestamp": "2025-05-13 11:18:09"
  }
}
,
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://dao.example.org/schemas/measurements/base_measurement.schema.json",
  "title": "Base Measurement",
  "description": "Base schema for all physical measurements with unit, context and provenance.",
  "type": "object",
  "required": [
    "quantity_kind",
    "value",
    "unit"
  ],
  "properties": {
    "quantity_kind": {
      "type": "string",
      "description": "QUDT quantity kind IRI or slug (e.g., 'Temperature', 'Length', 'MassFlowRate').",
      "pattern": "^[A-Z][A-Za-z0-9_:/.-]+$"
    },
    "value": {
      "type": "number",
      "description": "Numeric value in the given unit."
    },
    "unit": {
      "type": "string",
      "description": "UCUM or QUDT unit code (e.g., 'Cel', 'm/s', 'Np').",
      "pattern": "^[A-Za-z0-9*^/.%\\[\\]_-]+$"
    },
    "uncertainty": {
      "type": "number",
      "minimum": 0,
      "description": "± half‑width of 95% confidence interval in the same unit."
    },
    "timestamp": {
      "type": "string",
      "format": "date-time",
      "description": "RFC 3339 time when the measurement was taken."
    },
    "observed_by": {
      "type": "string",
      "description": "ID of Device or Contributor that made the observation."
    },
    "feature_of_interest": {
      "type": "string",
      "description": "ID of the physical or logical entity being measured (e.g., storage_medium, antenna)."
    },
    "location": {
      "type": "string",
      "description": "Optional location hint (geohash, room slug, etc.)."
    },
    "meta": {
      "type": "object",
      "description": "Open extensions (method, calibration cert, etc.).",
      "additionalProperties": true
    }
  },
  "additionalProperties": false,
  "__meta": {
    "file": "/Users/a/Documents/schemas/measurements/base_measurement.schema.json",
    "timestamp": "2025-05-13 11:18:12"
  }
}
,
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://dao.example.org/schemas/measurements/data_measurement.schema.json",
  "title": "Data Measurement",
  "description": "Schema for data rate, storage size, and other data-related measurements.",
  "allOf": [
    {
      "$ref": "base_measurement.schema.json"
    },
    {
      "properties": {
        "quantity_kind": {
          "enum": [
            "DataRate",
            "DataAmount",
            "Throughput",
            "PacketLossRate",
            "Latency",
            "Jitter"
          ]
        },
        "unit": {
          "oneOf": [
            {
              "title": "Data Rate Units",
              "enum": [
                "bit/s",
                "kbit/s",
                "Mbit/s",
                "Gbit/s"
              ]
            },
            {
              "title": "Data Amount Units",
              "enum": [
                "By",
                "kBy",
                "MBy",
                "GBy",
                "TBy"
              ]
            },
            {
              "title": "Time Units",
              "enum": [
                "s",
                "ms",
                "us",
                "ns"
              ]
            },
            {
              "title": "Rate Units",
              "enum": [
                "%",
                "1"
              ]
            }
          ]
        },
        "protocol": {
          "type": "string",
          "description": "Network protocol related to the measurement (e.g., 'TCP', 'UDP', 'HTTP')."
        },
        "direction": {
          "type": "string",
          "enum": [
            "upload",
            "download",
            "bidirectional"
          ],
          "description": "Direction of data transfer."
        },
        "endpoint": {
          "type": "string",
          "description": "Source or destination endpoint for the data transfer."
        }
      }
    }
  ],
  "examples": [
    {
      "quantity_kind": "DataRate",
      "value": 867.3,
      "unit": "Mbit/s",
      "observed_by": "dev.network-monitor-001",
      "feature_of_interest": "tm.wifi-channel-5",
      "protocol": "TCP",
      "direction": "download"
    },
    {
      "quantity_kind": "Latency",
      "value": 23.4,
      "unit": "ms",
      "observed_by": "dev.network-monitor-001",
      "feature_of_interest": "tm.server-001",
      "protocol": "ICMP"
    }
  ],
  "__meta": {
    "file": "/Users/a/Documents/schemas/measurements/data_measurement.schema.json",
    "timestamp": "2025-05-13 11:18:14"
  }
}
,
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://dao.example.org/schemas/measurements/electromagnetic_measurement.schema.json",
  "title": "Electromagnetic Measurement",
  "description": "Schema for electrical and magnetic property measurements.",
  "allOf": [
    {
      "$ref": "base_measurement.schema.json"
    },
    {
      "properties": {
        "quantity_kind": {
          "enum": [
            "ElectricCurrent",
            "ElectricPotential",
            "ElectricResistance",
            "ElectricCapacitance",
            "ElectricInductance",
            "ElectricConductance",
            "MagneticFieldStrength",
            "MagneticFluxDensity"
          ]
        },
        "unit": {
          "oneOf": [
            {
              "title": "Electric Current Units",
              "enum": [
                "A",
                "mA",
                "uA"
              ]
            },
            {
              "title": "Electric Potential Units",
              "enum": [
                "V",
                "mV",
                "kV"
              ]
            },
            {
              "title": "Electric Resistance Units",
              "enum": [
                "Ohm",
                "kOhm",
                "MOhm"
              ]
            },
            {
              "title": "Electric Capacitance Units",
              "enum": [
                "F",
                "mF",
                "uF",
                "nF",
                "pF"
              ]
            },
            {
              "title": "Electric Inductance Units",
              "enum": [
                "H",
                "mH",
                "uH"
              ]
            },
            {
              "title": "Electric Conductance Units",
              "enum": [
                "S",
                "mS",
                "uS"
              ]
            },
            {
              "title": "Magnetic Field Units",
              "enum": [
                "A/m",
                "T",
                "mT"
              ]
            }
          ]
        },
        "circuit_point": {
          "type": "string",
          "description": "Optional identifier for the measurement point in a circuit."
        }
      }
    }
  ],
  "examples": [
    {
      "quantity_kind": "ElectricCurrent",
      "value": 2.3,
      "unit": "A",
      "uncertainty": 0.1,
      "feature_of_interest": "dev.power-supply-001",
      "timestamp": "2025-05-13T12:30:15Z"
    },
    {
      "quantity_kind": "ElectricPotential",
      "value": 3.3,
      "unit": "V",
      "feature_of_interest": "dev.sensor-node-gpio",
      "circuit_point": "VCC"
    }
  ],
  "__meta": {
    "file": "/Users/a/Documents/schemas/measurements/electromagnetic_measurement.schema.json",
    "timestamp": "2025-05-13 11:18:13"
  }
}
,
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://dao.example.org/schemas/measurements/power_measurement.schema.json",
  "title": "Power and Energy Measurement",
  "description": "Schema for power consumption, energy usage, and related measurements.",
  "allOf": [
    {
      "$ref": "base_measurement.schema.json"
    },
    {
      "properties": {
        "quantity_kind": {
          "enum": [
            "Power",
            "Energy",
            "PowerDensity",
            "EnergyDensity",
            "Efficiency"
          ]
        },
        "unit": {
          "oneOf": [
            {
              "title": "Power Units",
              "enum": [
                "W",
                "kW",
                "MW",
                "mW",
                "uW"
              ]
            },
            {
              "title": "Energy Units",
              "enum": [
                "J",
                "kJ",
                "kW.h",
                "W.h"
              ]
            },
            {
              "title": "Power Density Units",
              "enum": [
                "W/m2",
                "W/m3"
              ]
            },
            {
              "title": "Energy Density Units",
              "enum": [
                "J/kg",
                "J/m3",
                "W.h/kg"
              ]
            },
            {
              "title": "Efficiency Units",
              "enum": [
                "%",
                "1"
              ]
            }
          ]
        },
        "operating_mode": {
          "type": "string",
          "description": "Operating mode of the device (e.g., 'idle', 'active', 'sleep')."
        },
        "load_percentage": {
          "type": "number",
          "minimum": 0,
          "maximum": 100,
          "description": "Load percentage of the device when measurement was taken."
        },
        "duration": {
          "type": "number",
          "description": "Duration over which energy was measured in seconds."
        }
      }
    }
  ],
  "examples": [
    {
      "quantity_kind": "Power",
      "value": 120.5,
      "unit": "W",
      "uncertainty": 2.3,
      "observed_by": "dev.power-meter-001",
      "feature_of_interest": "dev.server-rack-001",
      "operating_mode": "active",
      "load_percentage": 85
    },
    {
      "quantity_kind": "Energy",
      "value": 2.75,
      "unit": "kW.h",
      "observed_by": "dev.smart-meter-001",
      "feature_of_interest": "building.section-a",
      "duration": 3600
    }
  ],
  "__meta": {
    "file": "/Users/a/Documents/schemas/measurements/power_measurement.schema.json",
    "timestamp": "2025-05-13 11:18:15"
  }
}
,
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://dao.example.org/schemas/measurements/signal_measurement.schema.json",
  "title": "Signal Measurement",
  "description": "Schema for signal strength, frequency, bandwidth and other signal-related measurements.",
  "allOf": [
    {
      "$ref": "base_measurement.schema.json"
    },
    {
      "properties": {
        "quantity_kind": {
          "enum": [
            "Frequency",
            "PowerRatio",
            "SignalStrength",
            "SignalToNoiseRatio",
            "SoundPressureLevel",
            "Bandwidth"
          ]
        },
        "unit": {
          "oneOf": [
            {
              "title": "Frequency Units",
              "enum": [
                "Hz",
                "kHz",
                "MHz",
                "GHz"
              ]
            },
            {
              "title": "Signal Units",
              "enum": [
                "dB",
                "dB[mW]",
                "dB[SPL]",
                "dB[uV/m]"
              ]
            },
            {
              "title": "Bandwidth Units",
              "enum": [
                "Hz",
                "kHz",
                "MHz",
                "GHz"
              ]
            }
          ]
        },
        "channel": {
          "type": "string",
          "description": "Optional channel or frequency band identifier."
        },
        "signal_type": {
          "type": "string",
          "description": "Type of signal being measured (e.g., 'wifi', 'bluetooth', 'cellular', 'audio')."
        },
        "measurement_protocol": {
          "type": "string",
          "description": "Protocol or method used for the measurement (e.g., 'RSSI', 'CSI', 'spectrum-analyzer')."
        }
      }
    }
  ],
  "examples": [
    {
      "quantity_kind": "SignalStrength",
      "value": -67.5,
      "unit": "dB[mW]",
      "timestamp": "2025-05-13T11:59:27Z",
      "observed_by": "dev.wifi-scanner-001",
      "feature_of_interest": "tm.wifi-channel-5",
      "signal_type": "wifi",
      "channel": "5GHz-40"
    },
    {
      "quantity_kind": "Frequency",
      "value": 2437,
      "unit": "MHz",
      "feature_of_interest": "tm.wifi-ap-002",
      "signal_type": "wifi",
      "channel": "6"
    }
  ],
  "__meta": {
    "file": "/Users/a/Documents/schemas/measurements/signal_measurement.schema.json",
    "timestamp": "2025-05-13 11:18:14"
  }
}
,
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://dao.example.org/schemas/measurements/spatial_measurement.schema.json",
  "title": "Spatial Measurement",
  "description": "Schema for length, area, volume and other spatial property measurements.",
  "allOf": [
    {
      "$ref": "base_measurement.schema.json"
    },
    {
      "properties": {
        "quantity_kind": {
          "enum": [
            "Length",
            "Area",
            "Volume",
            "Distance",
            "Width",
            "Height",
            "Depth"
          ]
        },
        "unit": {
          "oneOf": [
            {
              "title": "Length Units",
              "enum": [
                "m",
                "km",
                "cm",
                "mm",
                "um",
                "nm",
                "[in_i]",
                "[ft_i]",
                "[mi_i]"
              ]
            },
            {
              "title": "Area Units",
              "enum": [
                "m2",
                "km2",
                "ha",
                "[sft_i]",
                "[mi_i]2"
              ]
            },
            {
              "title": "Volume Units",
              "enum": [
                "m3",
                "l",
                "ml",
                "[gal_us]",
                "[foz_us]"
              ]
            }
          ]
        },
        "reference_point": {
          "type": "string",
          "description": "Optional reference point for relative measurements."
        }
      }
    }
  ],
  "examples": [
    {
      "quantity_kind": "Length",
      "value": 1.85,
      "unit": "m",
      "uncertainty": 0.01,
      "feature_of_interest": "dev.antenna-001",
      "timestamp": "2025-05-13T11:59:27Z"
    },
    {
      "quantity_kind": "Volume",
      "value": 2.5,
      "unit": "l",
      "feature_of_interest": "storage.water-tank-001"
    }
  ],
  "__meta": {
    "file": "/Users/a/Documents/schemas/measurements/spatial_measurement.schema.json",
    "timestamp": "2025-05-13 11:18:13"
  }
}
,
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://dao.example.org/schemas/measurements/thermal_measurement.schema.json",
  "title": "Thermal Measurement",
  "description": "Schema for temperature and thermal property measurements.",
  "allOf": [
    {
      "$ref": "base_measurement.schema.json"
    },
    {
      "properties": {
        "quantity_kind": {
          "enum": [
            "Temperature",
            "ThermalConductivity",
            "SpecificHeatCapacity",
            "ThermalExpansion"
          ]
        },
        "unit": {
          "oneOf": [
            {
              "title": "Temperature Units",
              "enum": [
                "Cel",
                "K",
                "[degF]"
              ]
            },
            {
              "title": "Thermal Conductivity Units",
              "enum": [
                "W/(m.K)"
              ]
            },
            {
              "title": "Heat Capacity Units",
              "enum": [
                "J/(kg.K)"
              ]
            },
            {
              "title": "Thermal Expansion Units",
              "enum": [
                "1/K"
              ]
            }
          ]
        }
      }
    }
  ],
  "examples": [
    {
      "quantity_kind": "Temperature",
      "value": 22.6,
      "unit": "Cel",
      "uncertainty": 0.3,
      "timestamp": "2025-05-13T11:59:27Z",
      "observed_by": "dev.sensor‑roof001",
      "feature_of_interest": "tm.wifi-ssid",
      "location": "geo:-34.90,138.60"
    }
  ],
  "__meta": {
    "file": "/Users/a/Documents/schemas/measurements/thermal_measurement.schema.json",
    "timestamp": "2025-05-13 11:18:12"
  }
}
,
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://dao.example.org/schemas/memory.schema.json",
  "title": "Memory Record",
  "description": "Schema for memory records representing internal experiences, events or knowledge cues with cryptographic linking",
  "type": "object",
  "required": [
    "type",
    "human_id",
    "timestamp",
    "epoch",
    "content",
    "confidence",
    "previous_memory_cid",
    "signature"
  ],
  "properties": {
    "type": {
      "type": "string",
      "const": "Memory",
      "description": "Type discriminator for this schema"
    },
    "human_id": {
      "type": "string",
      "description": "Reference to the human contributor this memory belongs to"
    },
    "timestamp": {
      "type": "string",
      "format": "date-time",
      "description": "When this memory was recorded"
    },
    "epoch": {
      "type": "string",
      "description": "Local epoch marker when this memory was recorded (human-readable event or ISO8601)"
    },
    "content": {
      "type": "object",
      "required": [
        "summary"
      ],
      "properties": {
        "summary": {
          "type": "string",
          "description": "Concise summary of the memory"
        },
        "detailed_description": {
          "type": "string",
          "description": "Optional detailed description of the memory"
        },
        "memory_type": {
          "type": "string",
          "enum": [
            "episodic",
            "semantic",
            "procedural",
            "implicit",
            "autobiographical",
            "external"
          ],
          "description": "Classification of memory type"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Keywords or tags associated with this memory"
        },
        "attachments": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "cid",
              "type"
            ],
            "properties": {
              "cid": {
                "type": "string",
                "pattern": "^(sha256|sha3):[a-f0-9]{64}$",
                "description": "Content identifier for the attachment"
              },
              "type": {
                "type": "string",
                "description": "MIME type or format of the attachment"
              },
              "description": {
                "type": "string",
                "description": "Brief description of the attachment"
              }
            }
          },
          "description": "External files or data related to this memory"
        }
      }
    },
    "confidence": {
      "type": "integer",
      "minimum": 1,
      "maximum": 10,
      "description": "Subjective confidence in the accuracy of this memory (1-10)"
    },
    "importance": {
      "type": "integer",
      "minimum": 1,
      "maximum": 10,
      "description": "Subjective importance of this memory (1-10)"
    },
    "context": {
      "$ref": "./common/cognition/memory_context.schema.json",
      "description": "Contextual information about this memory to support AI-assisted recall"
    },
    "verification": {
      "type": "object",
      "properties": {
        "external_verification": {
          "type": "boolean",
          "description": "Whether this memory has been externally verified"
        },
        "verification_method": {
          "type": "string",
          "description": "How the memory was verified (if applicable)"
        },
        "corroborating_memories": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^(sha256|sha3):[a-f0-9]{64}$"
          },
          "description": "CID references to other memories that corroborate this one"
        }
      }
    },
    "previous_memory_cid": {
      "type": "string",
      "description": "CID reference to the chronologically previous memory record, forming a verifiable chain",
      "pattern": "^(sha256|sha3):[a-f0-9]{64}$"
    },
    "related_memories": {
      "type": "array",
      "items": {
        "type": "string",
        "pattern": "^(sha256|sha3):[a-f0-9]{64}$"
      },
      "description": "CID references to related memories (not necessarily chronological)"
    },
    "ai_metadata": {
      "type": "object",
      "description": "Metadata for AI processing and retrieval enhancement",
      "properties": {
        "embedding_model": {
          "type": "string",
          "description": "Identifier of the embedding model used (if any)"
        },
        "vector_embedding_cid": {
          "type": "string",
          "pattern": "^(sha256|sha3):[a-f0-9]{64}$",
          "description": "CID reference to a vector embedding of this memory for similarity search"
        },
        "semantic_clusters": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Semantic cluster identifiers this memory belongs to"
        },
        "retrieval_cues": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "High-value retrieval cues for this memory"
        },
        "confidence_factors": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "factor",
              "impact"
            ],
            "properties": {
              "factor": {
                "type": "string",
                "description": "Factor affecting confidence (e.g., 'direct_observation', 'hearsay', 'repeated_recall')"
              },
              "impact": {
                "type": "integer",
                "minimum": -5,
                "maximum": 5,
                "description": "Impact on confidence from very negative (-5) to very positive (+5)"
              }
            }
          },
          "description": "Factors affecting the confidence score"
        }
      }
    },
    "signature": {
      "$ref": "./common/signature.schema.json",
      "description": "Cryptographic signature for this record"
    }
  },
  "examples": [
    {
      "type": "Memory",
      "human_id": "h.jane_researcher",
      "timestamp": "2023-11-15T18:30:00Z",
      "epoch": "After daily project review",
      "content": {
        "summary": "Project team agreed to adjust milestone dates during afternoon meeting",
        "detailed_description": "During our 3pm meeting, we collectively decided to push back milestone 3 by two weeks due to unforeseen technical challenges with the database migration. Alex offered to help with optimization work.",
        "memory_type": "episodic",
        "tags": [
          "meeting",
          "milestone",
          "schedule-change",
          "teamwork"
        ]
      },
      "confidence": 9,
      "importance": 8,
      "context": {
        "emotional_context": {
          "emotional_state_cid": "sha256:c3d4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9b0c1d2e3f4a5b6c7d8e9f0a1b2c3d4",
          "valence": 2,
          "intensity": 6
        },
        "psychological_context": {
          "psychological_state_cid": "sha256:d4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9b0c1d2e3f4a5b6c7d8e9f0a1b2c3d4e5",
          "stress_level": 7,
          "cognitive_load": 6
        },
        "temporal_context": {
          "event_timestamp": "2023-11-15T15:00:00Z",
          "duration": "PT1H30M",
          "recurrence": "one_time"
        },
        "spatial_context": {
          "location_type": "office",
          "region": "conference room B"
        },
        "social_context": {
          "people": [
            "team_lead",
            "backend_developer",
            "project_manager"
          ],
          "social_setting": "small_group"
        },
        "semantic_cues": [
          "milestone",
          "deadline",
          "database",
          "meeting"
        ]
      },
      "previous_memory_cid": "sha256:e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9b0c1d2e3f4a5b6c7d8e9f0a1b2c3d4e5f6",
      "signature": {
        "value": "base64-signature-here",
        "algorithm": "ed25519",
        "public_key": "base64-public-key-here",
        "timestamp": "2023-11-15T18:30:00Z"
      }
    }
  ],
  "__meta": {
    "file": "/Users/a/Documents/schemas/memory.schema.json",
    "timestamp": "2025-05-13 12:03:13"
  }
}
,
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://dao.example.org/schemas/meta.schema.json",
  "title": "DAO Master Meta‑Schema",
  "description": "Manifest that tells people and tools what every subschema in the offline‑first DAO stack does and how they inter‑relate.  This file is informational only; it is **not** a validation schema for instance data.",
  "type": "object",
  "properties": {
    "schemas": {
      "type": "array",
      "description": "List of subschema descriptors in no particular order.",
      "items": {
        "type": "object",
        "required": [
          "file",
          "title",
          "purpose"
        ],
        "properties": {
          "file": {
            "type": "string",
            "description": "Relative path under /schemas"
          },
          "title": {
            "type": "string"
          },
          "purpose": {
            "type": "string"
          },
          "governs": {
            "type": "string",
            "description": "Node, edge, or packet class governed."
          },
          "linksTo": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Other schema IDs referenced via $ref or logical relation."
          },
          "version": {
            "type": "string",
            "default": "1.0.0"
          }
        }
      }
    }
  },
  "schemas": [
    {
      "file": "transmission_medium.schema.json",
      "title": "Transmission Medium",
      "purpose": "Capabilities & tags for any communication carrier",
      "governs": "node:TransmissionMedium",
      "linksTo": [
        "transport.schema.json"
      ]
    },
    {
      "file": "transport.schema.json",
      "title": "Transport Layer",
      "purpose": "Defines logical transports (MC‑TCP/UDP/FEC)",
      "governs": "node:Transport",
      "linksTo": [
        "packet_header.schema.json"
      ]
    },
    {
      "file": "channel_adapter.schema.json",
      "title": "Channel Adapter",
      "purpose": "Low‑level binding to a specific medium",
      "governs": "node:ChannelTransport",
      "linksTo": [
        "transmission_medium.schema.json"
      ]
    },
    {
      "file": "packet_header.schema.json",
      "title": "Packet Header",
      "purpose": "8‑byte common header for all transports",
      "governs": "spec:header",
      "linksTo": []
    },
    {
      "file": "project.schema.json",
      "title": "Project",
      "purpose": "Top‑level collaborative container",
      "governs": "node:Project",
      "linksTo": [
        "task.schema.json",
        "funding_entry.schema.json"
      ]
    },
    {
      "file": "task.schema.json",
      "title": "Task",
      "purpose": "Work unit inside a project",
      "governs": "node:Task",
      "linksTo": [
        "resource.schema.json"
      ]
    },
    {
      "file": "funding_entry.schema.json",
      "title": "Funding Entry",
      "purpose": "Money or resources committed to a project",
      "governs": "node:Funding",
      "linksTo": []
    },
    {
      "file": "contributors/contributor.schema.json",
      "title": "Contributor",
      "purpose": "Pseudonymous participant profile",
      "governs": "node:Contributor",
      "linksTo": [
        "device.schema.json"
      ]
    },
    {
      "file": "contributors/contributor_base.schema.json",
      "title": "Contributor Base",
      "purpose": "Abstract base schema for all contributor types",
      "governs": "node:ContributorBase",
      "linksTo": []
    },
    {
      "file": "contributors/ai_contributor.schema.json",
      "title": "AI Contributor",
      "purpose": "AI agent that contributes to projects",
      "governs": "node:AIContributor",
      "linksTo": [
        "contributors/contributor_base.schema.json"
      ]
    },
    {
      "file": "contributors/dao_contributor.schema.json",
      "title": "DAO Contributor",
      "purpose": "Organization that contributes to projects",
      "governs": "node:DAOContributor",
      "linksTo": [
        "contributors/contributor_base.schema.json"
      ]
    },
    {
      "file": "contributors/human_contributor.schema.json",
      "title": "Human Contributor",
      "purpose": "Human individual that contributes to projects",
      "governs": "node:HumanContributor",
      "linksTo": [
        "contributors/contributor_base.schema.json"
      ]
    },
    {
      "file": "device.schema.json",
      "title": "Device",
      "purpose": "Hardware element bound to contributor",
      "governs": "node:Device",
      "linksTo": [
        "resource.schema.json",
        "common/custody_event.schema.json"
      ]
    },
    {
      "file": "experiment.schema.json",
      "title": "Experiment",
      "purpose": "Federated research experiment descriptor",
      "governs": "node:Experiment",
      "linksTo": [
        "transmission_medium.schema.json"
      ]
    },
    {
      "file": "epoch_log_entry.schema.json",
      "title": "Epoch Log Entry",
      "purpose": "Human‑time anchor for deltas",
      "governs": "log:epoch",
      "linksTo": []
    },
    {
      "file": "project_delta.schema.json",
      "title": "Project Delta",
      "purpose": "Signed diff bundle for offline sync",
      "governs": "file:.diff.json",
      "linksTo": [
        "project.schema.json",
        "packet_header.schema.json"
      ]
    },
    {
      "file": "graph_node.meta.schema.json",
      "title": "Graph Node Meta",
      "purpose": "Common header inherited by all node schemas",
      "governs": "meta",
      "linksTo": []
    },
    {
      "file": "graph_edge.meta.schema.json",
      "title": "Graph Edge Meta",
      "purpose": "Generic edge descriptor",
      "governs": "edge:*",
      "linksTo": []
    },
    {
      "file": "physical_layer.schema.json",
      "title": "Physical Layer",
      "purpose": "Describes physical and electromagnetic properties of transmission media",
      "governs": "spec:physical",
      "linksTo": [
        "transmission_medium.schema.json"
      ]
    },
    {
      "file": "tool.schema.json",
      "title": "Tool",
      "purpose": "Function-specific artifact used by devices or contributors for tasks",
      "governs": "node:Tool",
      "linksTo": [
        "device.schema.json",
        "task.schema.json",
        "resource.schema.json"
      ]
    },
    {
      "file": "training_dataset.schema.json",
      "title": "Training Dataset",
      "purpose": "Defines datasets used to train or fine-tune models with provenance and metadata",
      "governs": "node:TrainingDataset",
      "linksTo": [
        "contributors/contributor_base.schema.json",
        "task.schema.json",
        "common/custody_event.schema.json"
      ]
    },
    {
      "file": "storage_medium.schema.json",
      "title": "Storage Medium",
      "purpose": "Describes physical or virtual storage media with durability, security, and access control properties",
      "governs": "node:StorageMedium",
      "linksTo": [
        "training_dataset.schema.json",
        "resource.schema.json",
        "common/custody_event.schema.json"
      ]
    },
    {
      "file": "biological_entity.schema.json",
      "title": "Biological Entity",
      "purpose": "Base schema for all biological entities including animals, plants, and other organisms",
      "governs": "node:BiologicalEntity",
      "linksTo": [
        "measurement.schema.json"
      ]
    },
    {
      "file": "animal.schema.json",
      "title": "Animal",
      "purpose": "Schema for animal biological entities, extending the base biological entity schema",
      "governs": "node:Animal",
      "linksTo": [
        "biological_entity.schema.json",
        "measurements/spatial_measurement.schema.json"
      ]
    },
    {
      "file": "plant.schema.json",
      "title": "Plant",
      "purpose": "Schema for plant biological entities, extending the base biological entity schema",
      "governs": "node:Plant",
      "linksTo": [
        "biological_entity.schema.json",
        "measurements/spatial_measurement.schema.json",
        "measurements/thermal_measurement.schema.json"
      ]
    },
    {
      "file": "measurement.schema.json",
      "title": "Measurement",
      "purpose": "Generic measurement container for any quantifiable property",
      "governs": "node:Measurement",
      "linksTo": [
        "measurements/base_measurement.schema.json"
      ]
    },
    {
      "file": "measurements/base_measurement.schema.json",
      "title": "Base Measurement",
      "purpose": "Base schema for all physical measurements with unit, context and provenance",
      "governs": "node:BaseMeasurement",
      "linksTo": []
    },
    {
      "file": "measurements/spatial_measurement.schema.json",
      "title": "Spatial Measurement",
      "purpose": "Measurements related to physical dimensions and distances",
      "governs": "node:SpatialMeasurement",
      "linksTo": [
        "measurements/base_measurement.schema.json"
      ]
    },
    {
      "file": "measurements/thermal_measurement.schema.json",
      "title": "Thermal Measurement",
      "purpose": "Temperature and heat-related measurements",
      "governs": "node:ThermalMeasurement",
      "linksTo": [
        "measurements/base_measurement.schema.json"
      ]
    },
    {
      "file": "measurements/data_measurement.schema.json",
      "title": "Data Measurement",
      "purpose": "Measurements related to digital data quantities and rates",
      "governs": "node:DataMeasurement",
      "linksTo": [
        "measurements/base_measurement.schema.json"
      ]
    },
    {
      "file": "measurements/power_measurement.schema.json",
      "title": "Power Measurement",
      "purpose": "Energy and power-related measurements",
      "governs": "node:PowerMeasurement",
      "linksTo": [
        "measurements/base_measurement.schema.json"
      ]
    },
    {
      "file": "measurements/electromagnetic_measurement.schema.json",
      "title": "Electromagnetic Measurement",
      "purpose": "Measurements related to electromagnetic properties",
      "governs": "node:ElectromagneticMeasurement",
      "linksTo": [
        "measurements/base_measurement.schema.json"
      ]
    },
    {
      "file": "measurements/signal_measurement.schema.json",
      "title": "Signal Measurement",
      "purpose": "Measurements related to signal processing and communication",
      "governs": "node:SignalMeasurement",
      "linksTo": [
        "measurements/base_measurement.schema.json"
      ]
    },
    {
      "file": "attachment.schema.json",
      "title": "Attachment",
      "purpose": "File or data attachment associated with other entities",
      "governs": "node:Attachment",
      "linksTo": []
    },
    {
      "file": "emotional_state.schema.json",
      "title": "Emotional State",
      "purpose": "Representation of emotional conditions or affect",
      "governs": "node:EmotionalState",
      "linksTo": []
    },
    {
      "file": "memory.schema.json",
      "title": "Memory",
      "purpose": "Long-term memory storage for agents or systems",
      "governs": "node:Memory",
      "linksTo": []
    },
    {
      "file": "psychological_state.schema.json",
      "title": "Psychological State",
      "purpose": "Cognitive and psychological conditions of agents",
      "governs": "node:PsychologicalState",
      "linksTo": [
        "emotional_state.schema.json"
      ]
    },
    {
      "file": "telemetry_stream.schema.json",
      "title": "Telemetry Stream",
      "purpose": "Real-time data stream from devices or systems",
      "governs": "node:TelemetryStream",
      "linksTo": [
        "device.schema.json",
        "measurement.schema.json"
      ]
    },
    {
      "file": "monitoring_rule.schema.json",
      "title": "Monitoring Rule",
      "purpose": "Rules for monitoring and alerting on system conditions",
      "governs": "node:MonitoringRule",
      "linksTo": [
        "telemetry_stream.schema.json"
      ]
    },
    {
      "file": "visualization_config.schema.json",
      "title": "Visualization Config",
      "purpose": "Configuration for data visualization displays",
      "governs": "node:VisualizationConfig",
      "linksTo": [
        "measurement.schema.json",
        "telemetry_stream.schema.json"
      ]
    },
    {
      "file": "common/signature.schema.json",
      "title": "Signature",
      "purpose": "Cryptographic signature verification information",
      "governs": "node:Signature",
      "linksTo": []
    },
    {
      "file": "common/custody_event.schema.json",
      "title": "Custody Event",
      "purpose": "Cryptographically signed, timestamped event representing a change in custody or state of a resource or asset",
      "governs": "node:CustodyEvent",
      "linksTo": [
        "common/signature.schema.json"
      ]
    },
    {
      "file": "common/cognition/base_cognitive_state.schema.json",
      "title": "Base Cognitive State",
      "purpose": "Abstract base schema for all cognitive state records with common fields",
      "governs": "node:BaseCognitiveState",
      "linksTo": [
        "common/signature.schema.json"
      ]
    },
    {
      "file": "common/cognition/memory_context.schema.json",
      "title": "Memory Context",
      "purpose": "Schema for capturing contextual information about memories to support AI-assisted recall",
      "governs": "node:MemoryContext",
      "linksTo": [
        "emotional_state.schema.json",
        "psychological_state.schema.json"
      ]
    },
    {
      "file": "resource.schema.json",
      "title": "Resource",
      "purpose": "Schema for modeling physical, renewable, and abstract resources with supply chain provenance, sustainability metrics, and lifecycle characteristics",
      "governs": "node:Resource",
      "linksTo": [
        "measurement.schema.json",
        "common/signature.schema.json",
        "common/custody_event.schema.json"
      ]
    },
    {
      "file": "resources/material_resource.schema.json",
      "title": "Material Resource",
      "purpose": "Schema for physical material resources like raw minerals, metals, and manufactured components with detailed physical properties",
      "governs": "node:MaterialResource",
      "linksTo": [
        "resource.schema.json",
        "measurements/thermal_measurement.schema.json"
      ]
    },
    {
      "file": "resources/energy_resource.schema.json",
      "title": "Energy Resource",
      "purpose": "Schema for energy-related resources including renewable and non-renewable sources",
      "governs": "node:EnergyResource",
      "linksTo": [
        "resource.schema.json",
        "measurements/power_measurement.schema.json"
      ]
    },
    {
      "file": "resources/computational_resource.schema.json",
      "title": "Computational Resource",
      "purpose": "Schema for abstract computational resources such as compute time, bandwidth, storage capacity, and tokens",
      "governs": "node:ComputationalResource",
      "linksTo": [
        "resource.schema.json",
        "measurements/data_measurement.schema.json"
      ]
    },
    {
      "file": "institution.schema.json",
      "title": "Institution",
      "purpose": "Models institutions and companies across jurisdictions, legal systems, and economic roles",
      "governs": "node:Institution",
      "linksTo": [
        "common/signature.schema.json",
        "contributors/contributor_base.schema.json",
        "funding_entry.schema.json",
        "training_dataset.schema.json",
        "device.schema.json"
      ]
    },
    {
      "file": "legal_system.schema.json",
      "title": "Legal System",
      "purpose": "Models legal systems, jurisdictions, and their characteristics across different regions and legal traditions",
      "governs": "node:LegalSystem",
      "linksTo": [
        "common/signature.schema.json"
      ]
    },
    {
      "file": "legal_instrument_base.schema.json",
      "title": "Legal Instrument Base",
      "purpose": "Base schema for modeling legal instruments including contracts, licenses, statutes, regulations and agreements",
      "governs": "node:LegalInstrument",
      "linksTo": [
        "graph_node.meta.schema.json",
        "common/signature.schema.json",
        "legal_system.schema.json"
      ]
    }
  ],
  "__meta": {
    "file": "/Users/a/Documents/schemas/metaschema.json",
    "timestamp": "2025-05-13 15:49:37"
  }
}
,
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://dao.example.org/schemas/monitoring_rule.schema.json",
  "title": "Monitoring Rule",
  "description": "Defines conditions for alerting and monitoring based on measurement values and thresholds.",
  "type": "object",
  "required": [
    "id",
    "name",
    "conditions",
    "created_at"
  ],
  "properties": {
    "id": {
      "type": "string",
      "description": "Unique identifier for this monitoring rule",
      "pattern": "^mr\\.[a-z0-9_-]{3,64}$"
    },
    "name": {
      "type": "string",
      "description": "Human-readable name of the rule"
    },
    "description": {
      "type": "string",
      "description": "Detailed explanation of what this rule monitors"
    },
    "conditions": {
      "type": "array",
      "description": "Set of conditions that must be met to trigger this rule",
      "minItems": 1,
      "items": {
        "$ref": "#/definitions/Condition"
      }
    },
    "operator": {
      "type": "string",
      "description": "Boolean operator for combining multiple conditions",
      "enum": [
        "AND",
        "OR"
      ],
      "default": "AND"
    },
    "scope": {
      "type": "object",
      "description": "Optional scope limitations for where this rule applies",
      "properties": {
        "device_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "IDs of specific devices this rule monitors"
        },
        "task_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "IDs of tasks during which this rule is active"
        },
        "features_of_interest": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Entity IDs being measured (e.g., tm.wifi-ssid, dev.server-001)"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Any tags that devices/entities must have for this rule to apply"
        },
        "regions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Location identifiers where this rule applies"
        }
      }
    },
    "actions": {
      "type": "array",
      "description": "Actions to take when rule conditions are met",
      "minItems": 1,
      "items": {
        "$ref": "#/definitions/Action"
      }
    },
    "created_at": {
      "type": "string",
      "format": "date-time",
      "description": "When this rule was created"
    },
    "created_by": {
      "type": "string",
      "description": "ID of the contributor who created this rule"
    },
    "updated_at": {
      "type": "string",
      "format": "date-time",
      "description": "When this rule was last modified"
    },
    "schedule": {
      "type": "object",
      "description": "Optional time-based activation schedule",
      "properties": {
        "active_periods": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "start_time": {
                "type": "string",
                "format": "time"
              },
              "end_time": {
                "type": "string",
                "format": "time"
              },
              "days": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "Mon",
                    "Tue",
                    "Wed",
                    "Thu",
                    "Fri",
                    "Sat",
                    "Sun"
                  ]
                }
              }
            },
            "required": [
              "start_time",
              "end_time"
            ]
          }
        },
        "timezone": {
          "type": "string",
          "description": "IANA timezone identifier"
        }
      }
    },
    "severity": {
      "type": "string",
      "description": "Importance level of alerts generated by this rule",
      "enum": [
        "info",
        "warning",
        "critical",
        "emergency"
      ]
    },
    "cooldown_s": {
      "type": "integer",
      "description": "Minimum seconds between repeated alerts (Unit: s, UCUM code for seconds)",
      "minimum": 0
    },
    "enabled": {
      "type": "boolean",
      "description": "Whether this rule is currently active",
      "default": true
    },
    "meta": {
      "type": "object",
      "description": "Free-form implementation details",
      "additionalProperties": true
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Condition": {
      "type": "object",
      "required": [
        "type",
        "parameters"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Optional identifier for this specific condition"
        },
        "type": {
          "type": "string",
          "description": "Type of condition to evaluate",
          "enum": [
            "threshold",
            "rate_of_change",
            "statistical",
            "state_change",
            "missing_data"
          ]
        },
        "parameters": {
          "type": "object",
          "description": "Parameters specific to the condition type"
        },
        "description": {
          "type": "string",
          "description": "Human explanation of this condition"
        }
      },
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "threshold"
              }
            }
          },
          "then": {
            "properties": {
              "parameters": {
                "type": "object",
                "required": [
                  "quantity_kind",
                  "comparator",
                  "threshold_value"
                ],
                "properties": {
                  "quantity_kind": {
                    "type": "string",
                    "description": "QUDT quantity kind to monitor (e.g., 'Temperature', 'Power')"
                  },
                  "comparator": {
                    "type": "string",
                    "enum": [
                      "gt",
                      "lt",
                      "gte",
                      "lte",
                      "eq",
                      "neq"
                    ],
                    "description": "Comparison operator"
                  },
                  "threshold_value": {
                    "type": "number",
                    "description": "Value to compare against"
                  },
                  "unit": {
                    "type": "string",
                    "description": "UCUM or QUDT unit code for the threshold value"
                  },
                  "duration_s": {
                    "type": "integer",
                    "description": "Optional duration the condition must be true to trigger (Unit: s, UCUM code for seconds)",
                    "minimum": 0
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "rate_of_change"
              }
            }
          },
          "then": {
            "properties": {
              "parameters": {
                "type": "object",
                "required": [
                  "quantity_kind",
                  "rate_comparator",
                  "rate_value",
                  "time_window_s"
                ],
                "properties": {
                  "quantity_kind": {
                    "type": "string",
                    "description": "QUDT quantity kind to monitor"
                  },
                  "rate_comparator": {
                    "type": "string",
                    "enum": [
                      "gt",
                      "lt",
                      "gte",
                      "lte"
                    ],
                    "description": "Comparison operator for the rate"
                  },
                  "rate_value": {
                    "type": "number",
                    "description": "Rate threshold to compare against"
                  },
                  "unit_per_s": {
                    "type": "string",
                    "description": "Unit per second for the rate"
                  },
                  "time_window_s": {
                    "type": "integer",
                    "description": "Time window to calculate rate over (Unit: s, UCUM code for seconds)",
                    "minimum": 1
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "statistical"
              }
            }
          },
          "then": {
            "properties": {
              "parameters": {
                "type": "object",
                "required": [
                  "quantity_kind",
                  "statistic",
                  "comparator",
                  "threshold_value",
                  "window_size"
                ],
                "properties": {
                  "quantity_kind": {
                    "type": "string",
                    "description": "QUDT quantity kind to analyze"
                  },
                  "statistic": {
                    "type": "string",
                    "enum": [
                      "mean",
                      "median",
                      "min",
                      "max",
                      "std_dev",
                      "percentile"
                    ],
                    "description": "Statistical function to apply"
                  },
                  "percentile": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 100,
                    "description": "Percentile value if statistic is 'percentile'"
                  },
                  "comparator": {
                    "type": "string",
                    "enum": [
                      "gt",
                      "lt",
                      "gte",
                      "lte",
                      "eq",
                      "neq"
                    ]
                  },
                  "threshold_value": {
                    "type": "number"
                  },
                  "unit": {
                    "type": "string",
                    "description": "UCUM or QUDT unit code"
                  },
                  "window_size": {
                    "type": "integer",
                    "description": "Number of measurements to include in the statistical calculation",
                    "minimum": 2
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "state_change"
              }
            }
          },
          "then": {
            "properties": {
              "parameters": {
                "type": "object",
                "required": [
                  "entity_id",
                  "property",
                  "from_value",
                  "to_value"
                ],
                "properties": {
                  "entity_id": {
                    "type": "string",
                    "description": "ID of the entity to monitor state changes on"
                  },
                  "property": {
                    "type": "string",
                    "description": "Property or attribute to monitor"
                  },
                  "from_value": {
                    "description": "Previous state value",
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "number"
                      },
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "to_value": {
                    "description": "New state value to alert on",
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "number"
                      },
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "any_change": {
                    "type": "boolean",
                    "description": "If true, alert on any state change regardless of from/to values",
                    "default": false
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "missing_data"
              }
            }
          },
          "then": {
            "properties": {
              "parameters": {
                "type": "object",
                "required": [
                  "quantity_kind",
                  "expected_interval_s",
                  "missing_duration_s"
                ],
                "properties": {
                  "quantity_kind": {
                    "type": "string",
                    "description": "QUDT quantity kind expected to be reported"
                  },
                  "expected_interval_s": {
                    "type": "number",
                    "description": "Expected reporting interval (Unit: s, UCUM code for seconds)",
                    "minimum": 0
                  },
                  "missing_duration_s": {
                    "type": "number",
                    "description": "Duration of missing data to trigger alert (Unit: s, UCUM code for seconds)",
                    "minimum": 0
                  }
                }
              }
            }
          }
        }
      ]
    },
    "Action": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "alert",
            "log",
            "task",
            "command"
          ],
          "description": "Type of action to perform when rule conditions are met"
        },
        "id": {
          "type": "string",
          "description": "Optional identifier for this action"
        },
        "description": {
          "type": "string",
          "description": "Human explanation of this action"
        }
      },
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "alert"
              }
            }
          },
          "then": {
            "properties": {
              "notify_channels": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Channel IDs to send the alert to"
              },
              "message_template": {
                "type": "string",
                "description": "Template string for alert message with {variable} placeholders"
              },
              "escalation_interval_s": {
                "type": "integer",
                "description": "Seconds before escalating unacknowledged alerts (Unit: s, UCUM code for seconds)",
                "minimum": 0
              }
            },
            "required": [
              "notify_channels"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "log"
              }
            }
          },
          "then": {
            "properties": {
              "log_level": {
                "type": "string",
                "enum": [
                  "debug",
                  "info",
                  "warning",
                  "error",
                  "critical"
                ],
                "default": "info"
              },
              "message_template": {
                "type": "string",
                "description": "Template string for log message with {variable} placeholders"
              },
              "include_measurements": {
                "type": "boolean",
                "default": true,
                "description": "Whether to include the triggering measurements in the log"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "task"
              }
            }
          },
          "then": {
            "properties": {
              "task_template_id": {
                "type": "string",
                "description": "ID of task template to instantiate"
              },
              "task_parameters": {
                "type": "object",
                "description": "Parameter values to populate in the task",
                "additionalProperties": true
              },
              "assign_to": {
                "type": "string",
                "description": "Optional contributor ID to assign the task to"
              },
              "priority": {
                "type": "string",
                "enum": [
                  "low",
                  "medium",
                  "high",
                  "urgent"
                ]
              }
            },
            "required": [
              "task_template_id"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "command"
              }
            }
          },
          "then": {
            "properties": {
              "command_id": {
                "type": "string",
                "description": "ID of the command to execute"
              },
              "target_device_id": {
                "type": "string",
                "description": "ID of device to execute command on"
              },
              "parameters": {
                "type": "object",
                "description": "Command-specific parameters",
                "additionalProperties": true
              },
              "require_authorization": {
                "type": "boolean",
                "default": true,
                "description": "Whether human approval is required before executing"
              }
            },
            "required": [
              "command_id"
            ]
          }
        }
      ]
    }
  },
  "examples": [
    {
      "id": "mr.high-temperature-alert",
      "name": "High Temperature Alert",
      "description": "Alert when temperature exceeds safe threshold on any device",
      "conditions": [
        {
          "type": "threshold",
          "parameters": {
            "quantity_kind": "Temperature",
            "comparator": "gt",
            "threshold_value": 85.0,
            "unit": "Cel"
          },
          "description": "Temperature above 85°C"
        }
      ],
      "scope": {
        "tags": [
          "hardware",
          "sensor"
        ]
      },
      "actions": [
        {
          "type": "alert",
          "notify_channels": [
            "ch.ops-team",
            "ch.device-owner"
          ],
          "message_template": "High temperature ({value} {unit}) detected on {device_id}!"
        },
        {
          "type": "task",
          "task_template_id": "tt.investigate-overheating",
          "priority": "high"
        }
      ],
      "created_at": "2025-05-13T14:30:00Z",
      "created_by": "anon.sys-admin",
      "severity": "critical",
      "cooldown_s": 300,
      "enabled": true
    }
  ],
  "__meta": {
    "file": "/Users/a/Documents/schemas/monitoring_rule.schema.json",
    "timestamp": "2025-05-13 11:30:28"
  }
}
,
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://dao.example.org/schemas/packet_header.schema.json",
  "title": "DAO Packet Header Schema",
  "description": "Binary layout (expressed here as JSON metadata) for the 8‑byte header that all DAO micro‑transport packets start with.",
  "type": "object",
  "required": [
    "version",
    "flags",
    "channel_id",
    "seq_no",
    "payload_len"
  ],
  "properties": {
    "version": {
      "description": "Header version, fixed at 1 for now.",
      "type": "integer",
      "enum": [
        1
      ]
    },
    "flags": {
      "description": "Bit‑field integer holding SYN, ACK, FIN, RST, FRAG bits (LSB = SYN).",
      "type": "integer",
      "minimum": 0,
      "maximum": 255
    },
    "channel_id": {
      "description": "Logical channel within a session (0‑65535).",
      "type": "integer",
      "minimum": 0,
      "maximum": 65535
    },
    "seq_no": {
      "description": "Sequence number of this packet within the channel (0‑65535).",
      "type": "integer",
      "minimum": 0,
      "maximum": 65535
    },
    "payload_len": {
      "description": "Length of ciphertext payload BEFORE encryption/trailing auth tag (Unit: By, UCUM code for bytes).",
      "type": "integer",
      "minimum": 0,
      "maximum": 65535
    },
    "frag_ext": {
      "description": "Optional fragmentation extension when FRAG flag set.",
      "type": "object",
      "required": [
        "frag_id",
        "offset"
      ],
      "properties": {
        "frag_id": {
          "type": "integer",
          "minimum": 0,
          "maximum": 4294967295
        },
        "offset": {
          "type": "integer",
          "description": "Byte offset within the fragmented message (Unit: By, UCUM code for bytes)",
          "minimum": 0,
          "maximum": 65535
        }
      }
    },
    "timestamp": {
      "description": "Optional packet creation timestamp (Unit: s, UCUM code for seconds)",
      "type": "number"
    },
    "ttl": {
      "description": "Optional time-to-live for packet (Unit: s, UCUM code for seconds)",
      "type": "number",
      "minimum": 0
    },
    "priority": {
      "description": "Optional packet priority level",
      "type": "integer",
      "minimum": 0,
      "maximum": 255
    }
  },
  "allOf": [
    {
      "if": {
        "properties": {
          "flags": {
            "const": 16
          }
        }
      },
      "then": {
        "required": [
          "frag_ext"
        ]
      }
    }
  ],
  "__meta": {
    "file": "/Users/a/Documents/schemas/packet_header.schema.json",
    "timestamp": "2025-05-13 11:12:33"
  }
}
,
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://dao.example.org/schemas/physical_layer.schema.json",
  "title": "Physical Layer",
  "description": "Describes the physical and electromagnetic properties of transmission media.",
  "type": "object",
  "properties": {
    "medium_type": {
      "type": "string",
      "description": "General type of physical transmission (e.g., RF, optical, acoustic, conductive, thermal, chemical, hybrid)",
      "enum": [
        "RF",
        "optical",
        "acoustic",
        "thermal",
        "conductive",
        "chemical",
        "hybrid"
      ]
    },
    "carrier_frequency": {
      "$ref": "measurements/signal_measurement.schema.json",
      "description": "Nominal carrier frequency measurement"
    },
    "carrier_frequency_mhz": {
      "type": "number",
      "description": "Nominal carrier frequency (Unit: MHz, UCUM code for megahertz)"
    },
    "bandwidth": {
      "$ref": "measurements/signal_measurement.schema.json",
      "description": "Maximum bandwidth measurement"
    },
    "bandwidth_mhz": {
      "type": "number",
      "description": "Maximum bandwidth (Unit: MHz, UCUM code for megahertz)"
    },
    "data_rate": {
      "$ref": "measurements/data_measurement.schema.json",
      "description": "Maximum data rate measurement"
    },
    "data_rate_kbps": {
      "type": "number",
      "description": "Maximum data rate (Unit: kbit/s, UCUM code for kilobits per second)"
    },
    "modulation": {
      "type": "string",
      "description": "Modulation scheme (e.g., GFSK, QPSK, OOK, AM, FM, FSK, etc.)"
    },
    "power_range": {
      "type": "array",
      "description": "Transmit power range measurements",
      "minItems": 2,
      "maxItems": 2,
      "items": {
        "$ref": "measurements/signal_measurement.schema.json"
      }
    },
    "power_range_dbm": {
      "type": "array",
      "description": "Transmit power range (Unit: dB[mW], UCUM code for decibel-milliwatts)",
      "minItems": 2,
      "maxItems": 2,
      "items": {
        "type": "number"
      }
    },
    "wavelength": {
      "$ref": "measurements/spatial_measurement.schema.json",
      "description": "Wavelength measurement for optical transmissions"
    },
    "wavelength_nm": {
      "type": "number",
      "description": "Wavelength for optical transmissions (Unit: nm, UCUM code for nanometers)"
    },
    "range": {
      "$ref": "measurements/spatial_measurement.schema.json",
      "description": "Effective range measurement"
    },
    "range_m": {
      "type": "number",
      "description": "Effective range (Unit: m, UCUM code for meters)"
    },
    "energy_per_bit": {
      "$ref": "measurements/power_measurement.schema.json",
      "description": "Energy required per bit transmitted measurement"
    },
    "energy_per_bit_j": {
      "type": "number",
      "description": "Energy required per bit transmitted (Unit: J, UCUM code for joules)"
    },
    "attenuation_model": {
      "type": "string",
      "description": "Signal loss behavior in different environments",
      "enum": [
        "free_space",
        "urban_outdoors",
        "urban_indoors",
        "subterranean",
        "underwater",
        "line_of_sight",
        "non_line_of_sight"
      ]
    },
    "attenuation_rate": {
      "$ref": "measurements/signal_measurement.schema.json",
      "description": "Signal attenuation rate measurement"
    },
    "attenuation_db_per_m": {
      "type": "number",
      "description": "Signal attenuation rate (Unit: dB/m, UCUM code for decibels per meter)"
    },
    "temperature_range": {
      "type": "object",
      "description": "Operating temperature range",
      "properties": {
        "min": {
          "$ref": "measurements/thermal_measurement.schema.json"
        },
        "max": {
          "$ref": "measurements/thermal_measurement.schema.json"
        }
      }
    },
    "antenna_type": {
      "type": "string",
      "description": "Type of antenna typically required or used",
      "enum": [
        "omnidirectional",
        "directional",
        "yagi",
        "patch",
        "parabolic",
        "none"
      ]
    },
    "antenna_gain": {
      "$ref": "measurements/signal_measurement.schema.json",
      "description": "Antenna gain measurement"
    },
    "antenna_gain_dbi": {
      "type": "number",
      "description": "Antenna gain (Unit: dB, UCUM code for decibels, isotropic reference)"
    },
    "shared_spectrum": {
      "type": "boolean",
      "description": "Whether this medium operates in an unlicensed or shared spectrum"
    },
    "regulatory_zone": {
      "type": "array",
      "description": "Applicable regulatory bodies or rules",
      "items": {
        "type": "string"
      }
    },
    "em_risk_rating": {
      "type": "string",
      "description": "Detectability and EM signature classification",
      "enum": [
        "low",
        "moderate",
        "high",
        "very_high"
      ]
    },
    "signal_to_noise_ratio": {
      "$ref": "measurements/signal_measurement.schema.json",
      "description": "Typical signal-to-noise ratio measurement"
    },
    "bit_error_rate": {
      "$ref": "measurements/data_measurement.schema.json",
      "description": "Expected bit error rate measurement"
    },
    "latency": {
      "$ref": "measurements/data_measurement.schema.json",
      "description": "Intrinsic latency measurement of the physical medium"
    },
    "latency_ms": {
      "type": "number",
      "description": "Intrinsic latency of the physical medium (Unit: ms, UCUM code for milliseconds)"
    },
    "measurements": {
      "type": "array",
      "description": "Collection of all measurements related to this physical layer",
      "items": {
        "$ref": "measurement.schema.json"
      }
    },
    "possible_failures": {
      "type": "array",
      "description": "Known or anticipated failure mechanisms",
      "items": {
        "type": "object",
        "required": [
          "type",
          "cause",
          "intentional"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "Nature of failure (e.g., jamming, environmental interference, power loss, spoofing)"
          },
          "cause": {
            "type": "string",
            "description": "Physical or logical cause of the failure"
          },
          "intentional": {
            "type": "boolean",
            "description": "Whether the failure could be adversarial in nature"
          },
          "mitigation": {
            "type": "string",
            "description": "Possible countermeasure or recovery method"
          }
        }
      }
    },
    "legal_status_by_region": {
      "type": "array",
      "description": "Region-specific legal constraints",
      "items": {
        "type": "object",
        "required": [
          "region",
          "status"
        ],
        "properties": {
          "region": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "legal",
              "restricted",
              "prohibited",
              "unclear"
            ]
          },
          "notes": {
            "type": "string"
          }
        }
      }
    },
    "linked_medium_id": {
      "type": "string",
      "description": "ID or reference to associated transmission_medium node"
    }
  },
  "required": [
    "medium_type",
    "linked_medium_id"
  ],
  "__meta": {
    "file": "/Users/a/Documents/schemas/physical_layer.schema.json",
    "timestamp": "2025-05-13 11:23:05"
  }
}
,
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://dao.example.org/schemas/plant.schema.json",
  "title": "Plant",
  "description": "Schema for plant biological entities, extending the base biological entity schema",
  "type": "object",
  "allOf": [
    {
      "$ref": "biological_entity.schema.json"
    },
    {
      "properties": {
        "classification": {
          "properties": {
            "entity_type": {
              "const": "plant",
              "description": "Must be 'plant' for this schema"
            }
          }
        },
        "growth_form": {
          "type": "object",
          "description": "Growth characteristics of the plant",
          "properties": {
            "habit": {
              "type": "string",
              "enum": [
                "tree",
                "shrub",
                "herb",
                "grass",
                "vine",
                "epiphyte",
                "succulent",
                "aquatic",
                "other"
              ],
              "description": "General growth habit of the plant"
            },
            "lifespan": {
              "type": "string",
              "enum": [
                "annual",
                "biennial",
                "perennial",
                "ephemeral"
              ],
              "description": "Length of life cycle"
            },
            "growth_rate": {
              "type": "string",
              "enum": [
                "slow",
                "moderate",
                "fast",
                "variable"
              ],
              "description": "Typical speed of growth"
            },
            "mature_height": {
              "$ref": "measurements/spatial_measurement.schema.json",
              "description": "Typical height at maturity"
            },
            "mature_spread": {
              "$ref": "measurements/spatial_measurement.schema.json",
              "description": "Typical spread or width at maturity"
            },
            "canopy_shape": {
              "type": "string",
              "description": "Shape of the mature plant canopy"
            },
            "root_system": {
              "type": "string",
              "enum": [
                "taproot",
                "fibrous",
                "adventitious",
                "aerial",
                "rhizomatous",
                "bulbous",
                "tuberous"
              ],
              "description": "Type of root system"
            }
          }
        },
        "flowering_and_reproduction": {
          "type": "object",
          "description": "Flowering and reproductive characteristics",
          "properties": {
            "flowering_period": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Times of year when flowering occurs"
            },
            "flower_color": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Colors of flowers"
            },
            "flower_structure": {
              "type": "string",
              "description": "Description of flower morphology"
            },
            "pollination_method": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "wind",
                  "insect",
                  "bird",
                  "bat",
                  "water",
                  "self",
                  "other"
                ]
              },
              "description": "How the plant is pollinated"
            },
            "fruit_type": {
              "type": "string",
              "description": "Type of fruit produced if applicable"
            },
            "seed_dispersal": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "wind",
                  "animal",
                  "water",
                  "explosion",
                  "gravity",
                  "self",
                  "other"
                ]
              },
              "description": "How seeds are dispersed"
            },
            "reproductive_strategy": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "sexual",
                  "asexual",
                  "vegetative",
                  "spores",
                  "other"
                ]
              },
              "description": "Methods of reproduction"
            }
          }
        },
        "photosynthesis_and_physiology": {
          "type": "object",
          "description": "Physiological characteristics related to growth and metabolism",
          "properties": {
            "photosynthesis_type": {
              "type": "string",
              "enum": [
                "C3",
                "C4",
                "CAM",
                "variable"
              ],
              "description": "Type of photosynthetic pathway"
            },
            "leaf_type": {
              "type": "string",
              "description": "Description of leaf morphology"
            },
            "leaf_arrangement": {
              "type": "string",
              "enum": [
                "alternate",
                "opposite",
                "whorled",
                "rosette",
                "basal",
                "other"
              ],
              "description": "How leaves are arranged on stems"
            },
            "deciduous_or_evergreen": {
              "type": "string",
              "enum": [
                "deciduous",
                "evergreen",
                "semi-evergreen"
              ],
              "description": "Leaf retention pattern"
            },
            "drought_tolerance": {
              "type": "string",
              "enum": [
                "low",
                "moderate",
                "high"
              ],
              "description": "Ability to withstand drought conditions"
            },
            "cold_hardiness": {
              "type": "object",
              "properties": {
                "usda_zone_min": {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 13,
                  "description": "Minimum USDA plant hardiness zone"
                },
                "usda_zone_max": {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 13,
                  "description": "Maximum USDA plant hardiness zone"
                },
                "temperature_minimum": {
                  "$ref": "measurements/thermal_measurement.schema.json",
                  "description": "Minimum temperature tolerated"
                }
              }
            },
            "water_requirements": {
              "type": "string",
              "enum": [
                "low",
                "medium",
                "high"
              ],
              "description": "Typical water needs"
            }
          }
        },
        "edibility_and_use": {
          "type": "object",
          "description": "Information about human uses of the plant",
          "properties": {
            "edible_parts": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "fruit",
                  "leaf",
                  "stem",
                  "root",
                  "flower",
                  "seed",
                  "tuber",
                  "sap",
                  "bark",
                  "none"
                ]
              },
              "description": "Parts of plant that are edible"
            },
            "toxicity": {
              "type": "object",
              "properties": {
                "is_toxic": {
                  "type": "boolean",
                  "description": "Whether any part of the plant is toxic"
                },
                "toxic_parts": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Parts that are toxic"
                },
                "toxicity_to": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "humans",
                      "pets",
                      "livestock",
                      "wildlife",
                      "aquatic_life"
                    ]
                  },
                  "description": "What organisms are affected by toxicity"
                },
                "toxicity_level": {
                  "type": "string",
                  "enum": [
                    "mild",
                    "moderate",
                    "severe",
                    "lethal"
                  ],
                  "description": "Severity of toxic effects"
                }
              }
            },
            "ethnobotanical_uses": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "medicinal",
                  "food",
                  "fiber",
                  "dye",
                  "construction",
                  "fuel",
                  "ornamental",
                  "ritual",
                  "other"
                ]
              },
              "description": "Traditional or cultural uses"
            },
            "medicinal_properties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Medicinal compounds or properties"
            },
            "commercial_uses": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Modern commercial applications"
            }
          }
        },
        "ecological_relationships": {
          "type": "object",
          "description": "Interactions with the environment and other organisms",
          "properties": {
            "native_regions": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Geographic regions where the plant is native"
            },
            "habitat_preference": {
              "type": "object",
              "properties": {
                "light": {
                  "type": "string",
                  "enum": [
                    "full_sun",
                    "partial_shade",
                    "shade",
                    "variable"
                  ],
                  "description": "Light requirements"
                },
                "moisture": {
                  "type": "string",
                  "enum": [
                    "dry",
                    "mesic",
                    "wet",
                    "aquatic",
                    "variable"
                  ],
                  "description": "Soil moisture preference"
                },
                "soil_type": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "sandy",
                      "loamy",
                      "clay",
                      "silty",
                      "peaty",
                      "chalky",
                      "variable"
                    ]
                  },
                  "description": "Preferred soil textures"
                },
                "soil_ph": {
                  "type": "string",
                  "enum": [
                    "acidic",
                    "neutral",
                    "alkaline",
                    "variable"
                  ],
                  "description": "Soil pH preference"
                }
              }
            },
            "symbiotic_relations": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "relationship_type": {
                    "type": "string",
                    "enum": [
                      "mycorrhizal",
                      "nitrogen_fixing",
                      "parasitic",
                      "epiphytic",
                      "commensal",
                      "mutualistic",
                      "other"
                    ],
                    "description": "Type of symbiotic relationship"
                  },
                  "partner_organism": {
                    "type": "string",
                    "description": "Name or description of symbiotic partner"
                  },
                  "description": {
                    "type": "string",
                    "description": "Details about the symbiotic relationship"
                  }
                },
                "required": [
                  "relationship_type"
                ]
              },
              "description": "Symbiotic relationships with other organisms"
            },
            "interactions": {
              "type": "object",
              "properties": {
                "pollinators": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Organisms that pollinate the plant"
                },
                "herbivores": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Animals that feed on the plant"
                },
                "seed_dispersers": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Organisms that disperse seeds"
                },
                "allelopathy": {
                  "type": "boolean",
                  "description": "Whether the plant produces compounds that affect other plants"
                }
              }
            },
            "invasion_potential": {
              "type": "object",
              "properties": {
                "is_invasive": {
                  "type": "boolean",
                  "description": "Whether the plant is considered invasive"
                },
                "invasive_regions": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Regions where the plant is invasive"
                },
                "control_methods": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Methods to control invasive growth"
                }
              }
            }
          }
        },
        "cultivation": {
          "type": "object",
          "description": "Information related to growing and managing the plant",
          "properties": {
            "propagation_methods": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "seed",
                  "cutting",
                  "division",
                  "grafting",
                  "layering",
                  "tissue_culture",
                  "other"
                ]
              },
              "description": "Methods for propagating the plant"
            },
            "planting_season": {
              "type": "string",
              "description": "Recommended planting time"
            },
            "growth_requirements": {
              "type": "object",
              "properties": {
                "fertilizer_needs": {
                  "type": "string",
                  "enum": [
                    "low",
                    "medium",
                    "high"
                  ],
                  "description": "Level of fertilizer required"
                },
                "pruning_needs": {
                  "type": "string",
                  "enum": [
                    "none",
                    "light",
                    "moderate",
                    "heavy"
                  ],
                  "description": "Level of pruning maintenance"
                },
                "spacing": {
                  "$ref": "measurements/spatial_measurement.schema.json",
                  "description": "Recommended spacing between plants"
                }
              }
            },
            "common_diseases": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Diseases the plant is susceptible to"
            },
            "common_pests": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Pests that commonly affect the plant"
            },
            "cultivars": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the cultivar"
                  },
                  "description": {
                    "type": "string",
                    "description": "Notable characteristics"
                  },
                  "registered": {
                    "type": "boolean",
                    "description": "Whether the cultivar is officially registered"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "description": "Cultivated varieties of the plant"
            }
          }
        },
        "phenology": {
          "type": "object",
          "description": "Timing of life cycle events",
          "properties": {
            "leaf_out_period": {
              "type": "string",
              "description": "When new leaves emerge"
            },
            "dormancy_period": {
              "type": "string",
              "description": "When plant is dormant"
            },
            "fruit_ripening_period": {
              "type": "string",
              "description": "When fruits mature"
            },
            "senescence_period": {
              "type": "string",
              "description": "When leaves drop or plant dies back"
            },
            "phenological_indicators": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "event": {
                    "type": "string",
                    "description": "Phenological event"
                  },
                  "timing": {
                    "type": "string",
                    "description": "Typical timing"
                  },
                  "climate_triggers": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Environmental factors that trigger the event"
                  }
                },
                "required": [
                  "event"
                ]
              }
            }
          }
        },
        "conservation": {
          "type": "object",
          "description": "Conservation-specific information",
          "properties": {
            "threats": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Known threats to the species"
            },
            "conservation_efforts": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Current conservation initiatives"
            },
            "population_trend": {
              "type": "string",
              "enum": [
                "increasing",
                "stable",
                "decreasing",
                "unknown"
              ],
              "description": "Overall population trend"
            },
            "estimated_population": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "number"
                },
                "year": {
                  "type": "integer"
                },
                "confidence": {
                  "type": "string",
                  "enum": [
                    "high",
                    "medium",
                    "low"
                  ]
                }
              }
            },
            "ex_situ_conservation": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Seed banks or botanical gardens preserving the species"
            }
          }
        }
      }
    }
  ],
  "required": [
    "growth_form"
  ],
  "additionalProperties": false,
  "__meta": {
    "file": "/Users/a/Documents/schemas/plant.schema.json",
    "timestamp": "2025-05-13 12:35:18"
  }
}
,
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://dao.example.org/schemas/project_delta.schema.json",
  "title": "DAO Project Delta Bundle",
  "description": "Portable, signed diff file (\".diff.json\") that contains all updates to a Project since the last exchange. Designed for offline sharing and cryptographic verification.",
  "type": "object",
  "required": [
    "project_id",
    "epoch",
    "updated_tasks",
    "new_tasks",
    "metadata",
    "signature",
    "public_key",
    "created_at"
  ],
  "properties": {
    "project_id": {
      "type": "string",
      "description": "UUID v4 of the parent project."
    },
    "epoch": {
      "$ref": "./epoch_log_entry.schema.json"
    },
    "updated_tasks": {
      "type": "array",
      "description": "Snapshot of tasks that existed before and have changed status/fields.",
      "items": {
        "$ref": "./task.schema.json"
      }
    },
    "new_tasks": {
      "type": "array",
      "description": "Tasks that did not exist in the recipient's copy.",
      "items": {
        "$ref": "./task.schema.json"
      }
    },
    "status_changes": {
      "type": "array",
      "description": "Optional list summarising project‑level status transitions (e.g., active→paused)",
      "items": {
        "type": "object",
        "required": [
          "from",
          "to",
          "timestamp"
        ],
        "properties": {
          "from": {
            "type": "string"
          },
          "to": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "reason": {
            "type": "string"
          }
        }
      },
      "default": []
    },
    "metadata": {
      "type": "object",
      "description": "High‑level project fields that changed during the epoch.",
      "properties": {
        "title": {
          "type": "string"
        },
        "summary": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "signature": {
      "type": "string",
      "description": "Base64 Ed25519 signature of the delta sans this field."
    },
    "public_key": {
      "type": "string",
      "description": "Base64 public key matching the signing identity so peers can verify."
    },
    "created_at": {
      "type": "string",
      "format": "date-time",
      "description": "UTC timestamp when this delta was generated."
    },
    "attachments": {
      "type": "array",
      "description": "Optional external artefacts referenced by CID (content‑addressed).",
      "items": {
        "type": "object",
        "required": [
          "cid",
          "media_type"
        ],
        "properties": {
          "cid": {
            "type": "string",
            "description": "sha256:… or ipfs://…"
          },
          "media_type": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "default": []
    }
  },
  "additionalProperties": false,
  "__meta": {
    "file": "/Users/a/Documents/schemas/project_delta.schema.json",
    "timestamp": "2025-05-13 10:11:48"
  }
}
,
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://dao.example.org/schemas/project.schema.json",
  "title": "DAO Project Schema",
  "description": "A top‑level work stream in the DAO.  Groups tasks, funding entries, tags, and overall status.",
  "type": "object",
  "required": [
    "id",
    "title",
    "summary",
    "status",
    "tags",
    "tasks",
    "funding"
  ],
  "properties": {
    "id": {
      "type": "string",
      "description": "Canonical UUID for the project",
      "pattern": "^[0-9a-fA-F\\-]{36}$"
    },
    "title": {
      "type": "string",
      "minLength": 3,
      "maxLength": 140
    },
    "summary": {
      "type": "string",
      "maxLength": 1000
    },
    "status": {
      "type": "string",
      "enum": [
        "active",
        "paused",
        "completed",
        "archived"
      ]
    },
    "tags": {
      "type": "array",
      "items": {
        "type": "string",
        "pattern": "^[a-zA-Z0-9._:-]{2,40}$"
      },
      "uniqueItems": true
    },
    "tasks": {
      "type": "array",
      "description": "Ordered list of task objects for the project",
      "items": {
        "$ref": "https://dao.example.org/schemas/task.schema.json"
      }
    },
    "funding": {
      "type": "array",
      "description": "Funding entries attached to the project",
      "items": {
        "$ref": "https://dao.example.org/schemas/funding_entry.schema.json"
      }
    },
    "created_at": {
      "type": "string",
      "format": "date-time"
    },
    "updated_at": {
      "type": "string",
      "format": "date-time"
    },
    "meta": {
      "type": "object",
      "description": "Open field for extensions (e.g., repo URL, governance model)",
      "additionalProperties": true
    }
  },
  "additionalProperties": false,
  "__meta": {
    "file": "/Users/a/Documents/schemas/project.schema.json",
    "timestamp": "2025-05-13 00:57:11"
  }
}
,
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://dao.example.org/schemas/psychological_state.schema.json",
  "title": "Psychological State",
  "description": "Schema for tracking a person's internal cognitive load, stress, and focus over time with cryptographic verification",
  "allOf": [
    {
      "$ref": "./common/cognition/base_cognitive_state.schema.json"
    },
    {
      "type": "object",
      "required": [
        "type",
        "cognitive_metrics"
      ],
      "properties": {
        "type": {
          "type": "string",
          "const": "PsychologicalState",
          "description": "Type discriminator for this schema"
        },
        "cognitive_metrics": {
          "type": "object",
          "description": "Quantified measures of cognitive state",
          "required": [
            "cognitive_load",
            "stress_level",
            "focus_quality"
          ],
          "properties": {
            "cognitive_load": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10,
              "description": "Subjective rating of mental effort (1-10)"
            },
            "stress_level": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10,
              "description": "Subjective rating of perceived stress (1-10)"
            },
            "focus_quality": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10,
              "description": "Subjective rating of ability to concentrate (1-10)"
            },
            "mental_clarity": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10,
              "description": "Subjective rating of mental clarity and coherence (1-10)"
            },
            "energy_level": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10,
              "description": "Subjective rating of available mental energy (1-10)"
            }
          }
        },
        "contextual_factors": {
          "type": "object",
          "description": "Environmental or situational factors potentially affecting psychological state",
          "properties": {
            "sleep_quality": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10,
              "description": "Subjective rating of recent sleep quality (1-10)"
            },
            "interruptions": {
              "type": "integer",
              "minimum": 0,
              "description": "Number of interruptions in current work session"
            },
            "environment": {
              "type": "string",
              "enum": [
                "home",
                "office",
                "public",
                "transit",
                "nature",
                "other"
              ],
              "description": "General type of environment during assessment"
            },
            "social_context": {
              "type": "string",
              "enum": [
                "alone",
                "small_group",
                "large_group",
                "online",
                "mixed"
              ],
              "description": "Social setting during assessment"
            }
          }
        },
        "related_emotional_state_cid": {
          "type": "string",
          "description": "Optional CID reference to a related emotional state record",
          "pattern": "^(sha256|sha3):[a-f0-9]{64}$"
        }
      }
    }
  ],
  "examples": [
    {
      "type": "PsychologicalState",
      "human_id": "h.jane_researcher",
      "timestamp": "2023-11-15T14:22:31Z",
      "epoch": "During weekly research meeting",
      "cognitive_metrics": {
        "cognitive_load": 7,
        "stress_level": 6,
        "focus_quality": 5,
        "mental_clarity": 6,
        "energy_level": 4
      },
      "contextual_factors": {
        "sleep_quality": 6,
        "interruptions": 3,
        "environment": "office",
        "social_context": "small_group"
      },
      "notes": "Struggling to focus due to upcoming deadline pressure",
      "previous_state_cid": "sha256:a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9b0c1d2e3f4a5b6c7d8e9f0a1b2",
      "task_context": {
        "project_id": "p.cognitive-modeling",
        "task_id": "t.schema-design",
        "phase": "design_review"
      },
      "signature": {
        "value": "base64-signature-here",
        "algorithm": "ed25519",
        "public_key": "base64-public-key-here",
        "timestamp": "2023-11-15T14:22:31Z"
      }
    }
  ],
  "__meta": {
    "file": "/Users/a/Documents/schemas/psychological_state.schema.json",
    "timestamp": "2025-05-13 12:03:07"
  }
}
,
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://dao.example.org/schemas/resource.schema.json",
  "title": "Resource",
  "description": "Schema for modeling physical, renewable, and abstract resources with supply chain provenance, sustainability metrics, and lifecycle characteristics",
  "type": "object",
  "allOf": [
    {
      "$ref": "graph_node.meta.schema.json"
    }
  ],
  "required": [
    "id",
    "type",
    "resource_category",
    "name"
  ],
  "properties": {
    "id": {
      "type": "string",
      "pattern": "^res\\.[a-z0-9_-]{3,64}$",
      "description": "Unique slug prefixed with 'res.' (e.g., res.lithium-raw)"
    },
    "type": {
      "const": "Resource"
    },
    "name": {
      "type": "string",
      "description": "Human-readable name of the resource"
    },
    "resource_category": {
      "type": "string",
      "enum": [
        "raw_material",
        "intermediate_good",
        "finished_good",
        "energy",
        "intangible"
      ],
      "description": "Primary categorization of the resource"
    },
    "resource_type": {
      "type": "string",
      "description": "Specific type within the category (e.g., 'mineral', 'metal', 'semiconductor', 'compute')"
    },
    "description": {
      "type": "string",
      "description": "Detailed description of the resource"
    },
    "unit_of_measure": {
      "type": "string",
      "description": "UCUM unit code for resource quantity (e.g., kg, m3, W.h, FLOPs)"
    },
    "custody_log": {
      "type": "array",
      "description": "Chronological list of custody events for tamper-evident tracking",
      "items": {
        "$ref": "common/custody_event.schema.json"
      }
    },
    "supply_chain": {
      "type": "object",
      "description": "Supply chain and provenance information",
      "properties": {
        "origin": {
          "type": "object",
          "properties": {
            "geographic_source": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "region": {
                    "type": "string"
                  },
                  "percentage": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 100,
                    "description": "Percentage from this region (Unit: %, UCUM code for percent)"
                  },
                  "coordinates": {
                    "type": "object",
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    }
                  }
                },
                "required": [
                  "region"
                ]
              }
            },
            "geopolitical_context": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "factor": {
                    "type": "string"
                  },
                  "impact": {
                    "type": "string",
                    "enum": [
                      "none",
                      "low",
                      "medium",
                      "high",
                      "critical"
                    ]
                  },
                  "description": {
                    "type": "string"
                  }
                },
                "required": [
                  "factor",
                  "impact"
                ]
              },
              "description": "Geopolitical factors affecting resource availability"
            }
          }
        },
        "extraction_date": {
          "type": "string",
          "format": "date-time",
          "description": "When the resource was originally extracted/harvested"
        },
        "transformation_stages": {
          "type": "array",
          "description": "Series of processing steps from raw extraction to final form",
          "items": {
            "type": "object",
            "required": [
              "stage",
              "process"
            ],
            "properties": {
              "stage": {
                "type": "string",
                "description": "Name of transformation stage"
              },
              "process": {
                "type": "string",
                "description": "Description of the process"
              },
              "location": {
                "type": "string",
                "description": "Where this transformation occurred"
              },
              "timestamp": {
                "type": "string",
                "format": "date-time"
              },
              "energy_used": {
                "$ref": "measurements/power_measurement.schema.json",
                "description": "Energy consumed in this transformation stage"
              },
              "emissions": {
                "type": "object",
                "properties": {
                  "co2_equivalent_kg": {
                    "type": "number",
                    "description": "CO2 equivalent emissions (Unit: kg, UCUM code for kilograms)"
                  },
                  "specific_emissions": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "type",
                        "value",
                        "unit"
                      ],
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "Type of emission (e.g., CO2, CH4, N2O)"
                        },
                        "value": {
                          "type": "number",
                          "description": "Quantity emitted"
                        },
                        "unit": {
                          "type": "string",
                          "description": "UCUM unit code (e.g., kg, g)"
                        }
                      }
                    }
                  }
                }
              },
              "ethical_flags": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "concern",
                    "severity"
                  ],
                  "properties": {
                    "concern": {
                      "type": "string",
                      "description": "Description of ethical concern"
                    },
                    "severity": {
                      "type": "string",
                      "enum": [
                        "low",
                        "medium",
                        "high",
                        "critical"
                      ]
                    },
                    "certification": {
                      "type": "string",
                      "description": "Mitigation certification if applicable"
                    }
                  }
                }
              },
              "input_resources": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "resource_id",
                    "quantity"
                  ],
                  "properties": {
                    "resource_id": {
                      "type": "string"
                    },
                    "quantity": {
                      "type": "number"
                    },
                    "unit": {
                      "type": "string"
                    }
                  }
                },
                "description": "Other resources consumed in this transformation stage"
              },
              "output_byproducts": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "byproduct",
                    "quantity",
                    "unit"
                  ],
                  "properties": {
                    "byproduct": {
                      "type": "string"
                    },
                    "quantity": {
                      "type": "number"
                    },
                    "unit": {
                      "type": "string"
                    },
                    "handling": {
                      "type": "string",
                      "description": "How the byproduct was handled"
                    }
                  }
                }
              },
              "verification": {
                "$ref": "common/signature.schema.json",
                "description": "Optional cryptographic signature verifying this stage"
              }
            }
          }
        },
        "chain_of_custody": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "custodian",
              "timestamp"
            ],
            "properties": {
              "custodian": {
                "type": "string",
                "description": "Entity ID that possessed the resource"
              },
              "timestamp": {
                "type": "string",
                "format": "date-time"
              },
              "location": {
                "type": "string"
              },
              "verification": {
                "$ref": "common/signature.schema.json",
                "description": "Optional cryptographic verification"
              }
            }
          }
        }
      }
    },
    "sustainability": {
      "type": "object",
      "description": "Environmental impact and lifecycle metrics",
      "properties": {
        "carbon_footprint": {
          "type": "object",
          "properties": {
            "total_co2e_kg": {
              "type": "number",
              "description": "Total lifecycle CO2 equivalent (Unit: kg, UCUM code for kilograms)"
            },
            "methodology": {
              "type": "string",
              "description": "Carbon calculation methodology used"
            }
          }
        },
        "energy_usage": {
          "type": "object",
          "properties": {
            "embodied_energy": {
              "$ref": "measurements/power_measurement.schema.json",
              "description": "Total energy required for production"
            },
            "operational_energy_rate": {
              "$ref": "measurements/power_measurement.schema.json",
              "description": "Energy consumption during operation (if applicable)"
            }
          }
        },
        "water_usage": {
          "type": "object",
          "properties": {
            "total_water_usage_l": {
              "type": "number",
              "description": "Water required for production (Unit: l, UCUM code for liters)"
            },
            "water_intensity": {
              "type": "number",
              "description": "Water usage per unit of production"
            }
          }
        },
        "recyclability": {
          "type": "object",
          "properties": {
            "recyclable_percentage": {
              "type": "number",
              "minimum": 0,
              "maximum": 100,
              "description": "Percentage that can be recycled (Unit: %, UCUM code for percent)"
            },
            "recycling_process": {
              "type": "string"
            },
            "recycling_energy": {
              "$ref": "measurements/power_measurement.schema.json",
              "description": "Energy required for recycling"
            }
          }
        },
        "lifecycle": {
          "type": "object",
          "properties": {
            "expected_lifetime": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "number"
                },
                "unit": {
                  "type": "string",
                  "enum": [
                    "a",
                    "mo",
                    "d",
                    "h"
                  ],
                  "description": "UCUM code: a=years, mo=months, d=days, h=hours"
                }
              }
            },
            "decay_rate": {
              "type": "object",
              "properties": {
                "half_life": {
                  "type": "number",
                  "description": "Time for 50% degradation"
                },
                "unit": {
                  "type": "string",
                  "enum": [
                    "a",
                    "mo",
                    "d",
                    "h"
                  ],
                  "description": "UCUM code: a=years, mo=months, d=days, h=hours"
                }
              }
            },
            "disposal_methods": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "hazardous_waste_classification": {
              "type": "string",
              "description": "Waste classification code if applicable"
            }
          }
        },
        "toxicity": {
          "type": "object",
          "properties": {
            "toxicity_level": {
              "type": "string",
              "enum": [
                "none",
                "low",
                "medium",
                "high",
                "extreme"
              ]
            },
            "exposure_risks": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "legal_constraints": {
      "type": "array",
      "description": "Legal or environmental regulations affecting this resource",
      "items": {
        "type": "object",
        "required": [
          "region",
          "constraint_type"
        ],
        "properties": {
          "region": {
            "type": "string"
          },
          "constraint_type": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "regulation_id": {
            "type": "string",
            "description": "Specific law or regulation ID"
          },
          "compliance_status": {
            "type": "string",
            "enum": [
              "compliant",
              "non_compliant",
              "exempted",
              "not_applicable"
            ]
          }
        }
      }
    },
    "physical_properties": {
      "type": "object",
      "description": "Physical characteristics of the resource",
      "properties": {
        "measurements": {
          "type": "array",
          "items": {
            "$ref": "measurement.schema.json"
          },
          "description": "Associated physical measurements"
        },
        "composition": {
          "type": "array",
          "description": "Material components of the resource",
          "items": {
            "type": "object",
            "required": [
              "component",
              "percentage"
            ],
            "properties": {
              "component": {
                "type": "string"
              },
              "percentage": {
                "type": "number",
                "minimum": 0,
                "maximum": 100,
                "description": "Percentage of the whole (Unit: %, UCUM code for percent)"
              },
              "resource_id": {
                "type": "string",
                "description": "Optional reference to another resource"
              }
            }
          }
        },
        "purity": {
          "type": "number",
          "minimum": 0,
          "maximum": 100,
          "description": "Purity level (Unit: %, UCUM code for percent)"
        },
        "density": {
          "type": "number",
          "description": "Density (Unit: kg/m3, UCUM code for kilograms per cubic meter)"
        }
      }
    },
    "integration_points": {
      "type": "object",
      "description": "How this resource integrates with other schemas",
      "properties": {
        "used_in_devices": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Device IDs that use this resource"
        },
        "required_for_tasks": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Task IDs that require this resource"
        },
        "used_in_tools": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Tool IDs that use this resource"
        },
        "contained_in_storage": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Storage medium IDs containing this resource"
        },
        "associated_measurements": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Measurement IDs associated with this resource"
        }
      }
    },
    "availability": {
      "type": "object",
      "properties": {
        "scarcity_level": {
          "type": "string",
          "enum": [
            "abundant",
            "common",
            "limited",
            "rare",
            "critical"
          ],
          "description": "General availability classification"
        },
        "estimated_reserves": {
          "type": "object",
          "properties": {
            "amount": {
              "type": "number"
            },
            "unit": {
              "type": "string"
            },
            "year": {
              "type": "integer"
            }
          },
          "description": "Estimated remaining global reserves"
        },
        "production_rate": {
          "type": "object",
          "properties": {
            "amount": {
              "type": "number"
            },
            "unit": {
              "type": "string"
            },
            "time_period": {
              "type": "string",
              "enum": [
                "daily",
                "monthly",
                "yearly"
              ]
            }
          },
          "description": "Global production rate"
        },
        "renewable": {
          "type": "boolean",
          "description": "Whether the resource is renewable"
        },
        "replenishment_rate": {
          "type": "object",
          "properties": {
            "rate": {
              "type": "number"
            },
            "unit": {
              "type": "string"
            },
            "time_period": {
              "type": "string"
            }
          },
          "description": "Rate of natural replenishment if renewable"
        }
      }
    },
    "market_data": {
      "type": "object",
      "properties": {
        "price_history": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "date": {
                "type": "string",
                "format": "date"
              },
              "price": {
                "type": "number"
              },
              "currency": {
                "type": "string"
              },
              "unit": {
                "type": "string"
              }
            }
          }
        },
        "volatility": {
          "type": "string",
          "enum": [
            "low",
            "medium",
            "high"
          ]
        },
        "price_trend": {
          "type": "string",
          "enum": [
            "decreasing",
            "stable",
            "increasing",
            "volatile"
          ]
        }
      }
    },
    "tags": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "meta": {
      "type": "object",
      "description": "Open container for implementation-specific extensions"
    }
  },
  "additionalProperties": false,
  "__meta": {
    "file": "/Users/a/Documents/schemas/resource.schema.json",
    "timestamp": "2025-05-13 13:35:58"
  }
}
,
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://dao.example.org/schemas/resources/computational_resource.schema.json",
  "title": "Computational Resource",
  "description": "Schema for abstract computational resources such as compute time, bandwidth, storage capacity, and tokens",
  "allOf": [
    {
      "$ref": "../resource.schema.json"
    },
    {
      "type": "object",
      "properties": {
        "computational_type": {
          "type": "string",
          "enum": [
            "compute",
            "bandwidth",
            "storage",
            "memory",
            "token",
            "api_access",
            "data",
            "license"
          ],
          "description": "Type of computational or abstract resource"
        },
        "allocation_model": {
          "type": "string",
          "enum": [
            "shared",
            "dedicated",
            "on_demand",
            "reserved",
            "spot",
            "token_based"
          ],
          "description": "How the resource is allocated or distributed"
        },
        "compute_properties": {
          "type": "object",
          "description": "Properties specific to computational resources",
          "properties": {
            "performance_metric": {
              "type": "string",
              "enum": [
                "flops",
                "iops",
                "throughput",
                "latency",
                "requests_per_second",
                "inference_time"
              ],
              "description": "Primary metric used to measure performance"
            },
            "performance_value": {
              "type": "number",
              "description": "Numerical performance value"
            },
            "performance_unit": {
              "type": "string",
              "description": "Unit for the performance metric (e.g., 'GFLOP/s', 'ms')"
            },
            "architecture": {
              "type": "string",
              "description": "Underlying hardware or software architecture"
            },
            "acceleration": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Acceleration technologies used (e.g., 'GPU', 'TPU', 'FPGA')"
            },
            "virtualization": {
              "type": "boolean",
              "description": "Whether the resource is virtualized"
            }
          }
        },
        "network_properties": {
          "type": "object",
          "description": "Properties specific to network/bandwidth resources",
          "properties": {
            "bandwidth": {
              "$ref": "../measurements/data_measurement.schema.json",
              "description": "Available bandwidth measurement"
            },
            "latency": {
              "$ref": "../measurements/data_measurement.schema.json",
              "description": "Latency measurement"
            },
            "protocol": {
              "type": "string",
              "description": "Network protocol used"
            },
            "reliability": {
              "type": "number",
              "minimum": 0,
              "maximum": 100,
              "description": "Network reliability percentage (Unit: %, UCUM code for percent)"
            },
            "packet_loss": {
              "type": "number",
              "minimum": 0,
              "maximum": 100,
              "description": "Average packet loss percentage (Unit: %, UCUM code for percent)"
            }
          }
        },
        "storage_properties": {
          "type": "object",
          "description": "Properties specific to storage resources",
          "properties": {
            "capacity": {
              "$ref": "../measurements/data_measurement.schema.json",
              "description": "Storage capacity measurement"
            },
            "read_speed": {
              "$ref": "../measurements/data_measurement.schema.json",
              "description": "Read speed measurement"
            },
            "write_speed": {
              "$ref": "../measurements/data_measurement.schema.json",
              "description": "Write speed measurement"
            },
            "durability": {
              "type": "number",
              "minimum": 0,
              "maximum": 100,
              "description": "Annual durability percentage (Unit: %, UCUM code for percent)"
            },
            "replication_factor": {
              "type": "integer",
              "minimum": 1,
              "description": "Number of data replicas maintained"
            }
          }
        },
        "token_properties": {
          "type": "object",
          "description": "Properties specific to token or access-based resources",
          "properties": {
            "token_type": {
              "type": "string",
              "description": "Type of token or access unit"
            },
            "access_scope": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Scope of access provided by the token"
            },
            "rate_limits": {
              "type": "object",
              "properties": {
                "requests_per_unit": {
                  "type": "number"
                },
                "time_unit": {
                  "type": "string",
                  "enum": [
                    "second",
                    "minute",
                    "hour",
                    "day",
                    "month"
                  ]
                },
                "concurrent_requests": {
                  "type": "integer"
                }
              },
              "description": "Rate limiting parameters"
            },
            "expiration": {
              "type": "boolean",
              "description": "Whether the token expires"
            },
            "validity_period": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "number"
                },
                "unit": {
                  "type": "string",
                  "enum": [
                    "s",
                    "min",
                    "h",
                    "d",
                    "mo",
                    "a"
                  ],
                  "description": "UCUM code: s=seconds, min=minutes, h=hours, d=days, mo=months, a=years"
                }
              },
              "description": "How long the token remains valid"
            }
          }
        },
        "security_properties": {
          "type": "object",
          "description": "Security-related properties of the resource",
          "properties": {
            "encryption": {
              "type": "string",
              "enum": [
                "none",
                "in_transit",
                "at_rest",
                "end_to_end"
              ],
              "description": "Type of encryption applied"
            },
            "authentication": {
              "type": "string",
              "enum": [
                "none",
                "basic",
                "oauth",
                "mfa",
                "certificate",
                "other"
              ],
              "description": "Authentication method required"
            },
            "compliance_frameworks": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Compliance certifications (e.g., 'SOC2', 'GDPR', 'HIPAA')"
            },
            "data_residency": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Regions where data is stored or processed"
            }
          }
        },
        "scaling_properties": {
          "type": "object",
          "description": "How the resource scales to meet demands",
          "properties": {
            "scalability": {
              "type": "string",
              "enum": [
                "fixed",
                "vertical",
                "horizontal",
                "auto",
                "elastic"
              ],
              "description": "Scaling capability of the resource"
            },
            "min_capacity": {
              "type": "number",
              "description": "Minimum resource capacity"
            },
            "max_capacity": {
              "type": "number",
              "description": "Maximum resource capacity"
            },
            "scaling_increment": {
              "type": "number",
              "description": "Granularity of scaling steps"
            }
          }
        },
        "service_level": {
          "type": "object",
          "properties": {
            "availability": {
              "type": "number",
              "minimum": 0,
              "maximum": 100,
              "description": "Guaranteed availability percentage (Unit: %, UCUM code for percent)"
            },
            "uptime_sla": {
              "type": "string",
              "description": "Uptime service level agreement (e.g., '99.99%')"
            },
            "response_time_sla": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "number"
                },
                "unit": {
                  "type": "string",
                  "enum": [
                    "ms",
                    "s",
                    "min"
                  ]
                }
              },
              "description": "Response time service level agreement"
            },
            "support_level": {
              "type": "string",
              "enum": [
                "none",
                "basic",
                "standard",
                "premium",
                "enterprise"
              ],
              "description": "Level of support provided"
            }
          }
        }
      },
      "required": [
        "computational_type"
      ]
    }
  ],
  "__meta": {
    "file": "/Users/a/Documents/schemas/resources/computational_resource.schema.json",
    "timestamp": "2025-05-13 13:00:35"
  }
}
,
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://dao.example.org/schemas/resources/energy_resource.schema.json",
  "title": "Energy Resource",
  "description": "Schema for energy-related resources including renewable and non-renewable sources",
  "allOf": [
    {
      "$ref": "../resource.schema.json"
    },
    {
      "type": "object",
      "properties": {
        "energy_type": {
          "type": "string",
          "enum": [
            "electrical",
            "thermal",
            "mechanical",
            "chemical",
            "nuclear",
            "gravitational",
            "electromagnetic"
          ],
          "description": "Physical form of energy this resource represents"
        },
        "energy_source": {
          "type": "string",
          "enum": [
            "solar",
            "wind",
            "hydro",
            "geothermal",
            "biomass",
            "fossil_fuel",
            "nuclear",
            "tidal",
            "hydrogen",
            "battery",
            "other"
          ],
          "description": "Source of the energy"
        },
        "generation_properties": {
          "type": "object",
          "description": "Properties related to energy generation",
          "properties": {
            "capacity_factor": {
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "description": "Ratio of actual output to potential output at full capacity"
            },
            "peak_capacity": {
              "$ref": "../measurements/power_measurement.schema.json",
              "description": "Maximum power generation capacity"
            },
            "response_time": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "number"
                },
                "unit": {
                  "type": "string",
                  "enum": [
                    "s",
                    "min",
                    "h"
                  ]
                }
              },
              "description": "Time required to reach full generation capacity"
            },
            "intermittency": {
              "type": "string",
              "enum": [
                "none",
                "low",
                "medium",
                "high",
                "variable"
              ],
              "description": "Degree of variability in energy production"
            },
            "dispatchability": {
              "type": "string",
              "enum": [
                "non_dispatchable",
                "partially_dispatchable",
                "fully_dispatchable"
              ],
              "description": "Ability to control energy output on demand"
            },
            "storage_capacity": {
              "$ref": "../measurements/power_measurement.schema.json",
              "description": "Energy storage capacity if applicable"
            }
          }
        },
        "energy_conversion": {
          "type": "object",
          "description": "Energy transformation and conversion properties",
          "properties": {
            "input_energy_type": {
              "type": "string",
              "description": "Type of energy used as input if applicable"
            },
            "output_energy_type": {
              "type": "string",
              "description": "Type of energy produced as output"
            },
            "conversion_efficiency": {
              "type": "number",
              "minimum": 0,
              "maximum": 100,
              "description": "Efficiency of energy conversion (Unit: %, UCUM code for percent)"
            },
            "energy_density": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "number"
                },
                "unit": {
                  "type": "string",
                  "description": "UCUM code for energy per volume or mass (e.g., J/kg, W.h/l)"
                }
              },
              "description": "Energy content per unit volume or mass"
            }
          }
        },
        "grid_integration": {
          "type": "object",
          "description": "Characteristics related to integration with energy distribution systems",
          "properties": {
            "transmission_losses": {
              "type": "number",
              "minimum": 0,
              "maximum": 100,
              "description": "Typical energy loss during transmission (Unit: %, UCUM code for percent)"
            },
            "grid_compatibility": {
              "type": "string",
              "enum": [
                "low",
                "medium",
                "high"
              ],
              "description": "Ease of integration with existing power grids"
            },
            "requires_conversion": {
              "type": "boolean",
              "description": "Whether energy requires conversion before grid integration"
            },
            "balancing_requirements": {
              "type": "string",
              "description": "Grid balancing needs for this energy type"
            }
          }
        },
        "lifecycle_emissions": {
          "type": "object",
          "description": "Emissions throughout the lifecycle of energy production",
          "properties": {
            "construction_emissions_co2e_per_kWh": {
              "type": "number",
              "description": "CO2 equivalent from construction/manufacturing (Unit: g/kW.h)"
            },
            "operational_emissions_co2e_per_kWh": {
              "type": "number",
              "description": "CO2 equivalent from operational phase (Unit: g/kW.h)"
            },
            "decommissioning_emissions_co2e_per_kWh": {
              "type": "number",
              "description": "CO2 equivalent from decommissioning (Unit: g/kW.h)"
            },
            "lifecycle_emissions_methodology": {
              "type": "string",
              "description": "Standard or methodology used to calculate lifecycle emissions"
            }
          }
        },
        "land_requirements": {
          "type": "object",
          "properties": {
            "area_per_MW": {
              "$ref": "../measurements/spatial_measurement.schema.json",
              "description": "Land area required per megawatt of capacity"
            },
            "land_type": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Types of land suitable for energy production"
            },
            "competitive_land_uses": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Alternative uses for the same land type"
            }
          }
        },
        "water_usage": {
          "type": "object",
          "properties": {
            "consumption_l_per_MWh": {
              "type": "number",
              "description": "Water consumed per megawatt-hour (Unit: l/MW.h)"
            },
            "withdrawal_l_per_MWh": {
              "type": "number",
              "description": "Water withdrawn per megawatt-hour (Unit: l/MW.h)"
            },
            "water_type": {
              "type": "string",
              "enum": [
                "freshwater",
                "saltwater",
                "reclaimed",
                "none"
              ],
              "description": "Type of water required"
            }
          }
        },
        "weather_dependency": {
          "type": "object",
          "properties": {
            "dependent_factor": {
              "type": "string",
              "enum": [
                "sunlight",
                "wind",
                "precipitation",
                "temperature",
                "none"
              ],
              "description": "Primary weather factor affecting energy production"
            },
            "sensitivity": {
              "type": "string",
              "enum": [
                "low",
                "medium",
                "high"
              ],
              "description": "Degree of sensitivity to weather conditions"
            },
            "seasonal_variation": {
              "type": "string",
              "enum": [
                "none",
                "low",
                "medium",
                "high"
              ],
              "description": "Degree of seasonal variation in output"
            }
          }
        }
      }
    }
  ],
  "__meta": {
    "file": "/Users/a/Documents/schemas/resources/energy_resource.schema.json",
    "timestamp": "2025-05-13 13:00:50"
  }
}
,
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://dao.example.org/schemas/resources/material_resource.schema.json",
  "title": "Material Resource",
  "description": "Schema for physical material resources like raw minerals, metals, and manufactured components with detailed physical properties",
  "allOf": [
    {
      "$ref": "../resource.schema.json"
    },
    {
      "type": "object",
      "properties": {
        "material_properties": {
          "type": "object",
          "description": "Detailed physical properties specific to materials",
          "properties": {
            "state_of_matter": {
              "type": "string",
              "enum": [
                "solid",
                "liquid",
                "gas",
                "plasma"
              ],
              "description": "Physical state of the material"
            },
            "melting_point": {
              "$ref": "../measurements/thermal_measurement.schema.json",
              "description": "Temperature at which material changes from solid to liquid state"
            },
            "boiling_point": {
              "$ref": "../measurements/thermal_measurement.schema.json",
              "description": "Temperature at which material changes from liquid to gas state"
            },
            "thermal_conductivity": {
              "type": "number",
              "description": "Thermal conductivity (Unit: W/(m.K), UCUM code for watts per meter-kelvin)"
            },
            "electrical_conductivity": {
              "type": "number",
              "description": "Electrical conductivity (Unit: S/m, UCUM code for siemens per meter)"
            },
            "magnetic_properties": {
              "type": "string",
              "enum": [
                "diamagnetic",
                "paramagnetic",
                "ferromagnetic",
                "antiferromagnetic",
                "ferrimagnetic",
                "none"
              ],
              "description": "Magnetic characteristics of the material"
            },
            "hardness": {
              "type": "object",
              "properties": {
                "scale": {
                  "type": "string",
                  "enum": [
                    "mohs",
                    "brinell",
                    "rockwell",
                    "vickers",
                    "shore"
                  ]
                },
                "value": {
                  "type": "number"
                }
              },
              "description": "Hardness measurement on specified scale"
            },
            "corrosion_resistance": {
              "type": "string",
              "enum": [
                "poor",
                "fair",
                "good",
                "excellent"
              ],
              "description": "Resistance to environmental degradation"
            }
          }
        },
        "extraction_method": {
          "type": "string",
          "description": "Primary method used to obtain the raw material"
        },
        "strategic_importance": {
          "type": "string",
          "enum": [
            "low",
            "medium",
            "high",
            "critical"
          ],
          "description": "Level of strategic importance in global supply chains"
        },
        "alternative_materials": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "resource_id": {
                "type": "string"
              },
              "compatibility": {
                "type": "number",
                "minimum": 0,
                "maximum": 100,
                "description": "Compatibility percentage (Unit: %, UCUM code for percent)"
              },
              "trade_offs": {
                "type": "string"
              }
            }
          },
          "description": "Potential material substitutes with compatibility scores"
        },
        "grade_classification": {
          "type": "string",
          "description": "Quality or purity grade classification"
        },
        "known_deposits": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "location": {
                "type": "string"
              },
              "estimated_size": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "number"
                  },
                  "unit": {
                    "type": "string"
                  }
                }
              },
              "accessibility": {
                "type": "string",
                "enum": [
                  "easy",
                  "moderate",
                  "difficult",
                  "inaccessible"
                ]
              }
            }
          },
          "description": "Known geographical deposits for raw materials"
        }
      }
    }
  ],
  "__meta": {
    "file": "/Users/a/Documents/schemas/resources/material_resource.schema.json",
    "timestamp": "2025-05-13 12:56:45"
  }
}
,
{
  "$schema": "https://dao.example.org/schemas/resources/computational_resource.schema.json",
  "id": "res.cloud-compute-gpu",
  "type": "Resource",
  "name": "GPU Cloud Compute",
  "resource_category": "intangible",
  "resource_type": "compute",
  "description": "High-performance GPU compute resources for machine learning and data processing",
  "unit_of_measure": "GPU.h",
  "supply_chain": {
    "origin": {
      "geographic_source": [
        {
          "region": "US-East Data Center",
          "percentage": 75,
          "coordinates": {
            "latitude": 39.01,
            "longitude": -77.5
          }
        },
        {
          "region": "EU-Central Data Center",
          "percentage": 25,
          "coordinates": {
            "latitude": 50.11,
            "longitude": 8.68
          }
        }
      ],
      "geopolitical_context": [
        {
          "factor": "Data sovereignty laws",
          "impact": "medium",
          "description": "EU GDPR and US data regulations impact compute resource availability"
        }
      ]
    },
    "transformation_stages": [
      {
        "stage": "Infrastructure provisioning",
        "process": "Data center power and cooling allocation",
        "location": "US-East Data Center",
        "timestamp": "2023-09-01T00:00:00Z",
        "energy_used": {
          "quantity_kind": "Energy",
          "value": 45000,
          "unit": "kW.h"
        },
        "emissions": {
          "co2_equivalent_kg": 18000
        }
      },
      {
        "stage": "Virtualization",
        "process": "GPU resource pooling and allocation",
        "location": "US-East Data Center",
        "timestamp": "2023-09-02T00:00:00Z"
      }
    ]
  },
  "sustainability": {
    "carbon_footprint": {
      "total_co2e_kg": 0.4,
      "methodology": "Cloud Carbon Footprint Standard 1.0"
    },
    "energy_usage": {
      "operational_energy_rate": {
        "quantity_kind": "Power",
        "value": 0.25,
        "unit": "kW"
      }
    }
  },
  "legal_constraints": [
    {
      "region": "European Union",
      "constraint_type": "Data processing regulation",
      "description": "GDPR compliance for workloads processing EU citizen data",
      "regulation_id": "EU GDPR 2016/679",
      "compliance_status": "compliant"
    }
  ],
  "integration_points": {
    "required_for_tasks": [
      "ai-training-task-01",
      "data-processing-task-03"
    ],
    "contained_in_storage": [
      "storage-medium-01"
    ]
  },
  "availability": {
    "scarcity_level": "limited",
    "production_rate": {
      "amount": 24000,
      "unit": "GPU.h",
      "time_period": "daily"
    },
    "renewable": false
  },
  "market_data": {
    "price_history": [
      {
        "date": "2023-06-01",
        "price": 2.50,
        "currency": "USD",
        "unit": "GPU.h"
      },
      {
        "date": "2023-09-01",
        "price": 2.25,
        "currency": "USD",
        "unit": "GPU.h"
      }
    ],
    "volatility": "low",
    "price_trend": "stable"
  },
  "computational_type": "compute",
  "allocation_model": "on_demand",
  "compute_properties": {
    "performance_metric": "flops",
    "performance_value": 16,
    "performance_unit": "TFLOP/s",
    "architecture": "CUDA",
    "acceleration": [
      "GPU",
      "Tensor Cores"
    ],
    "virtualization": true
  },
  "network_properties": {
    "bandwidth": {
      "quantity_kind": "DataRate",
      "value": 25,
      "unit": "Gbit/s"
    },
    "latency": {
      "quantity_kind": "Latency",
      "value": 2,
      "unit": "ms"
    },
    "reliability": 99.95,
    "packet_loss": 0.001
  },
  "security_properties": {
    "encryption": "at_rest",
    "authentication": "oauth",
    "compliance_frameworks": [
      "SOC2",
      "ISO27001",
      "HIPAA"
    ],
    "data_residency": [
      "US",
      "EU"
    ]
  },
  "scaling_properties": {
    "scalability": "horizontal",
    "min_capacity": 1,
    "max_capacity": 128,
    "scaling_increment": 1
  },
  "service_level": {
    "availability": 99.95,
    "uptime_sla": "99.9%",
    "response_time_sla": {
      "value": 100,
      "unit": "ms"
    },
    "support_level": "standard"
  },
  "tags": [
    "gpu-compute",
    "ml",
    "high-performance",
    "cloud"
  ],
  "__meta": {
    "file": "/Users/a/Documents/schemas/resources/samples/cloud_compute.json",
    "timestamp": "2025-05-13 13:08:14"
  }
}
,
{
  "$schema": "https://dao.example.org/schemas/device.schema.json",
  "device_id": "YmFzZTY0aGFzaF9vZl9kZXZpY2VfaWQ=",
  "nonce": "7fb952a1",
  "responsibility": "field_sensor_node",
  "activated_at": "2025-01-20T10:00:00Z",
  "note": "Environmental monitoring station deployed in forest reserve area",
  "custody_log": [
    {
      "event_type": "creation",
      "actor_id": "cont.hardware-lab-05",
      "timestamp": "2025-01-15T14:30:00Z",
      "location": "DAO Hardware Lab, Berlin",
      "notes": "Device assembled and configured for environmental monitoring deployment",
      "signature": {
        "value": "Y3JlYXRpb25fc2lnbmF0dXJlX2RldmljZQ==",
        "algorithm": "ed25519",
        "public_key": "aGFyZHdhcmVfbGFiX2tleQ==",
        "timestamp": "2025-01-15T14:35:12Z"
      }
    },
    {
      "event_type": "inspection",
      "actor_id": "dev.test-station-03",
      "timestamp": "2025-01-16T09:15:00Z",
      "location": "DAO Testing Facility, Berlin",
      "notes": "Full system validation, calibration, and weatherproofing tests completed",
      "previous_hash": "sha256:d8e2f782a4c45ec72a3e6d7718f757592cfe7ec1839fc8471d1fed8e5c5a134c",
      "signature": {
        "value": "aW5zcGVjdGlvbl9zaWduYXR1cmVfZGV2aWNl",
        "algorithm": "ed25519",
        "public_key": "dGVzdGluZ19mYWNpbGl0eV9rZXk=",
        "timestamp": "2025-01-16T11:42:57Z"
      },
      "metadata": {
        "test_suite_id": "ENV-SENSOR-FULL-01",
        "tests_passed": 42,
        "tests_total": 42,
        "calibration_certificate": "CAL-ENV-20250116-073"
      }
    },
    {
      "event_type": "transfer",
      "actor_id": "cont.field-researcher-12",
      "timestamp": "2025-01-18T08:30:00Z",
      "location": "DAO Equipment Depot, Berlin",
      "notes": "Device assigned to field research team for Schwarzwald deployment",
      "previous_hash": "sha256:e2a3b1d93c7e416e887d5952ac7d6fcefb1b01a37748bd23baaae8c07c356e12",
      "signature": {
        "value": "dHJhbnNmZXJfc2lnbmF0dXJlX2RldmljZQ==",
        "algorithm": "ed25519",
        "public_key": "ZmllbGRfdGVhbV9rZXk=",
        "timestamp": "2025-01-18T08:35:33Z"
      }
    },
    {
      "event_type": "transformation",
      "actor_id": "cont.field-researcher-12",
      "timestamp": "2025-01-20T09:45:00Z",
      "location": "Black Forest Research Station",
      "notes": "Final on-site configuration and deployment on monitoring tower",
      "previous_hash": "sha256:f9c12a4b7d2e3a1c5d8e9f6b2a1c3e5d7f9a2b4c6e8d0f2a4b6c8e0d2f4a6c8e",
      "signature": {
        "value": "ZGVwbG95bWVudF9zaWduYXR1cmVfZGV2aWNl",
        "algorithm": "ed25519",
        "public_key": "ZmllbGRfdGVhbV9rZXk=",
        "timestamp": "2025-01-20T10:00:00Z"
      },
      "metadata": {
        "gps_coordinates": "48.2682° N, 8.1712° E",
        "elevation_m": 842,
        "deployment_id": "ENV-BF-2025-04",
        "power_source": "solar_panel_with_battery_backup",
        "network_connection": "lora_wan_mesh"
      }
    },
    {
      "event_type": "maintenance",
      "actor_id": "cont.field-technician-08",
      "timestamp": "2025-04-15T13:20:00Z",
      "location": "Black Forest Research Station",
      "notes": "Quarterly maintenance check and battery replacement",
      "previous_hash": "sha256:a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9b0c1d2e3f4a5b6c7d8e9f0a1b2",
      "signature": {
        "value": "bWFpbnRlbmFuY2Vfc2lnbmF0dXJlX2RldmljZQ==",
        "algorithm": "ed25519",
        "public_key": "ZmllbGRfdGVjaG5pY2lhbl9rZXk=",
        "timestamp": "2025-04-15T14:05:21Z"
      },
      "metadata": {
        "maintenance_id": "MAINT-20250415-ENV-04",
        "components_replaced": [
          "backup_battery",
          "air_filter"
        ],
        "firmware_updated": true,
        "firmware_version": "env-sense-v2.3.4"
      }
    }
  ],
  "device_specifications": {
    "manufacturer": "DAO Hardware Lab",
    "model": "EnvSense Pro 3",
    "serial_number": "ESPR3-2025-0042",
    "hardware_version": "3.1.2",
    "firmware_version": "env-sense-v2.3.4",
    "components": [
      {
        "component_type": "sensor_module",
        "description": "Air quality and particle detection array",
        "manufacturer": "SenseTech",
        "resource_id": "res.sensor-module-a12"
      },
      {
        "component_type": "processing_unit",
        "description": "Low-power embedded compute module",
        "manufacturer": "EcoCompute",
        "resource_id": "res.eco-compute-embedded"
      },
      {
        "component_type": "communication_module",
        "description": "LoRaWAN transceiver with mesh capability",
        "manufacturer": "ConnectWide",
        "resource_id": "res.lora-mesh-transceiver"
      }
    ]
  },
  "operational_resources": [
    {
      "resource_id": "res.solar-energy",
      "consumption_rate": 0.35,
      "rate_unit": "kW.h/d",
      "variable": true,
      "peak_consumption": 0.8
    }
  ],
  "__meta": {
    "file": "/Users/a/Documents/schemas/resources/samples/device_with_custody.json",
    "timestamp": "2025-05-13 13:44:17"
  }
}
,
{
  "$schema": "https://dao.example.org/schemas/resources/material_resource.schema.json",
  "id": "res.lithium-raw",
  "type": "Resource",
  "name": "Raw Lithium",
  "resource_category": "raw_material",
  "resource_type": "metal",
  "description": "Lithium in raw form used for battery production and electronics",
  "unit_of_measure": "kg",
  "supply_chain": {
    "origin": {
      "geographic_source": [
        {
          "region": "Chile, Salar de Atacama",
          "percentage": 40,
          "coordinates": {
            "latitude": -23.5,
            "longitude": -68.2
          }
        },
        {
          "region": "Australia, Greenbushes",
          "percentage": 35,
          "coordinates": {
            "latitude": -33.86,
            "longitude": 116.06
          }
        },
        {
          "region": "Argentina, Salar del Hombre Muerto",
          "percentage": 25,
          "coordinates": {
            "latitude": -25.5,
            "longitude": -66.9
          }
        }
      ],
      "geopolitical_context": [
        {
          "factor": "Trade restrictions",
          "impact": "medium",
          "description": "Potential export limitations from producing countries"
        },
        {
          "factor": "Indigenous land rights",
          "impact": "high",
          "description": "Mining operations affect indigenous communities and water resources"
        }
      ]
    },
    "extraction_date": "2023-06-15T00:00:00Z",
    "transformation_stages": [
      {
        "stage": "Mining",
        "process": "Extraction from lithium-rich brine",
        "location": "Chile",
        "timestamp": "2023-06-15T00:00:00Z",
        "energy_used": {
          "quantity_kind": "Energy",
          "value": 15000,
          "unit": "kW.h"
        },
        "emissions": {
          "co2_equivalent_kg": 3600,
          "specific_emissions": [
            {
              "type": "CO2",
              "value": 3200,
              "unit": "kg"
            },
            {
              "type": "CH4",
              "value": 15,
              "unit": "kg"
            }
          ]
        },
        "ethical_flags": [
          {
            "concern": "Water consumption in arid regions",
            "severity": "high"
          }
        ],
        "output_byproducts": [
          {
            "byproduct": "Salt waste",
            "quantity": 8500,
            "unit": "kg",
            "handling": "Local disposal"
          }
        ]
      },
      {
        "stage": "Processing",
        "process": "Concentration and purification",
        "location": "Chile",
        "timestamp": "2023-07-01T00:00:00Z",
        "energy_used": {
          "quantity_kind": "Energy",
          "value": 7500,
          "unit": "kW.h"
        },
        "emissions": {
          "co2_equivalent_kg": 1800
        },
        "input_resources": [
          {
            "resource_id": "res.water-industrial",
            "quantity": 500000,
            "unit": "l"
          }
        ]
      }
    ],
    "chain_of_custody": [
      {
        "custodian": "SQM Mining Corp",
        "timestamp": "2023-06-15T00:00:00Z",
        "location": "Salar de Atacama, Chile"
      },
      {
        "custodian": "Global Battery Materials Inc",
        "timestamp": "2023-08-01T00:00:00Z",
        "location": "Processing Facility, Santiago, Chile"
      }
    ]
  },
  "sustainability": {
    "carbon_footprint": {
      "total_co2e_kg": 5400,
      "methodology": "ISO 14067:2018"
    },
    "energy_usage": {
      "embodied_energy": {
        "quantity_kind": "Energy",
        "value": 22500,
        "unit": "kW.h"
      }
    },
    "water_usage": {
      "total_water_usage_l": 500000,
      "water_intensity": 500
    },
    "recyclability": {
      "recyclable_percentage": 95,
      "recycling_process": "Electrochemical recovery",
      "recycling_energy": {
        "quantity_kind": "Energy",
        "value": 8000,
        "unit": "kW.h"
      }
    },
    "lifecycle": {
      "expected_lifetime": {
        "value": 10,
        "unit": "a"
      }
    }
  },
  "legal_constraints": [
    {
      "region": "European Union",
      "constraint_type": "Import regulation",
      "description": "EU Battery Regulation requiring supply chain traceability",
      "regulation_id": "EU 2023/1542",
      "compliance_status": "compliant"
    }
  ],
  "physical_properties": {
    "measurements": [
      {
        "quantity_kind": "Density",
        "value": 0.534,
        "unit": "g/cm3"
      }
    ],
    "composition": [
      {
        "component": "Lithium",
        "percentage": 99.5
      },
      {
        "component": "Trace elements",
        "percentage": 0.5
      }
    ],
    "purity": 99.5,
    "density": 534
  },
  "availability": {
    "scarcity_level": "limited",
    "estimated_reserves": {
      "amount": 22,
      "unit": "Mt",
      "year": 2023
    },
    "production_rate": {
      "amount": 140000,
      "unit": "t",
      "time_period": "yearly"
    },
    "renewable": false
  },
  "market_data": {
    "price_history": [
      {
        "date": "2023-01-01",
        "price": 78500,
        "currency": "USD",
        "unit": "t"
      },
      {
        "date": "2023-06-01",
        "price": 62000,
        "currency": "USD",
        "unit": "t"
      }
    ],
    "volatility": "high",
    "price_trend": "decreasing"
  },
  "material_properties": {
    "state_of_matter": "solid",
    "melting_point": {
      "quantity_kind": "Temperature",
      "value": 180.5,
      "unit": "Cel"
    },
    "boiling_point": {
      "quantity_kind": "Temperature",
      "value": 1342,
      "unit": "Cel"
    },
    "thermal_conductivity": 85,
    "electrical_conductivity": 1.1E+7,
    "magnetic_properties": "paramagnetic",
    "hardness": {
      "scale": "mohs",
      "value": 0.6
    },
    "corrosion_resistance": "poor"
  },
  "extraction_method": "Brine evaporation and filtration",
  "strategic_importance": "critical",
  "alternative_materials": [
    {
      "resource_id": "res.sodium-raw",
      "compatibility": 65,
      "trade_offs": "Lower energy density, shorter cycle life, but more abundant"
    }
  ],
  "grade_classification": "Battery grade",
  "known_deposits": [
    {
      "location": "Salar de Atacama, Chile",
      "estimated_size": {
        "amount": 7.5,
        "unit": "Mt"
      },
      "accessibility": "moderate"
    },
    {
      "location": "Salar de Uyuni, Bolivia",
      "estimated_size": {
        "amount": 10.2,
        "unit": "Mt"
      },
      "accessibility": "difficult"
    }
  ],
  "tags": [
    "battery-material",
    "critical-mineral",
    "energy-storage"
  ],
  "__meta": {
    "file": "/Users/a/Documents/schemas/resources/samples/lithium.json",
    "timestamp": "2025-05-13 13:08:11"
  }
}
,
{
  "$schema": "https://dao.example.org/schemas/resource.schema.json",
  "id": "res.sensor-module-a12",
  "type": "Resource",
  "name": "Sensor Module A12",
  "resource_category": "finished_good",
  "resource_type": "electronic_component",
  "description": "High-precision environmental sensor module with temperature, humidity and air quality monitoring capabilities",
  "unit_of_measure": "pc",
  "custody_log": [
    {
      "event_type": "creation",
      "actor_id": "cont.manufacturer-xyz",
      "timestamp": "2025-03-15T09:30:00Z",
      "location": "Factory B, Shanghai",
      "notes": "Initial production batch #2025-03-B42",
      "signature": {
        "value": "aGFzaF9zaWduYXR1cmVfaGVyZQ==",
        "algorithm": "ed25519",
        "public_key": "cHVibGljX2tleV9oZXJl",
        "timestamp": "2025-03-15T09:35:22Z"
      }
    },
    {
      "event_type": "inspection",
      "actor_id": "dev.quality-station-05",
      "timestamp": "2025-03-15T10:45:00Z",
      "location": "Factory B, Shanghai",
      "notes": "Quality control verification - passed all tests",
      "previous_hash": "sha256:ac09b76a37aa8119a05f1f8df22d81b3615cc9cf4ec8c4413a1fb18fb316abc7",
      "signature": {
        "value": "aW5zcGVjdGlvbl9zaWduYXR1cmVfaGVyZQ==",
        "algorithm": "ed25519",
        "public_key": "cHVibGljX2tleV9oZXJlXzI=",
        "timestamp": "2025-03-15T10:47:12Z"
      }
    },
    {
      "event_type": "transfer",
      "actor_id": "cont.logistics-partner",
      "timestamp": "2025-03-17T08:20:00Z",
      "location": "Factory B Shipping Dock, Shanghai",
      "notes": "Transferred to logistics partner for international shipping",
      "previous_hash": "sha256:7d9fe7309f18e292b69b46bdcad7f2657ef68c01249941b7e7513d54d082d324",
      "signature": {
        "value": "dHJhbnNmZXJfc2lnbmF0dXJlX2hlcmU=",
        "algorithm": "ed25519",
        "public_key": "cHVibGljX2tleV9oZXJlXzM=",
        "timestamp": "2025-03-17T08:22:53Z"
      }
    },
    {
      "event_type": "receipt",
      "actor_id": "cont.dao-warehouse",
      "timestamp": "2025-03-25T14:10:00Z",
      "location": "DAO Central Warehouse, Berlin",
      "notes": "Received in warehouse, added to inventory tracking system",
      "previous_hash": "sha256:f40a3c9bfb0453c67c1ac07b11ef4c63521afff1b6203d3673309342268574cb",
      "signature": {
        "value": "cmVjZWlwdF9zaWduYXR1cmVfaGVyZQ==",
        "algorithm": "ed25519",
        "public_key": "cHVibGljX2tleV9oZXJlXzQ=",
        "timestamp": "2025-03-25T14:15:32Z"
      },
      "metadata": {
        "shipping_id": "SHP-20250317-04832",
        "customs_clearance": "CCL-DE-78342",
        "received_by": "Warehouse Agent ID: WAR-042"
      }
    },
    {
      "event_type": "transfer",
      "actor_id": "cont.field-technician-27",
      "timestamp": "2025-04-10T09:45:00Z",
      "location": "DAO Central Warehouse, Berlin",
      "notes": "Assigned to field technician for deployment in environmental monitoring project",
      "previous_hash": "sha256:b51edf7ca213d815c8342ecceab9cd7a9a1b59217aceac450b73718d08781ffc",
      "signature": {
        "value": "ZmllbGRfdHJhbnNmZXJfc2lnbmF0dXJlX2hlcmU=",
        "algorithm": "ed25519",
        "public_key": "cHVibGljX2tleV9oZXJlXzU=",
        "timestamp": "2025-04-10T09:47:42Z"
      }
    }
  ],
  "supply_chain": {
    "origin": {
      "geographic_source": [
        {
          "region": "Shanghai, China",
          "percentage": 100,
          "coordinates": {
            "latitude": 31.2304,
            "longitude": 121.4737
          }
        }
      ]
    },
    "transformation_stages": [
      {
        "stage": "Component Assembly",
        "process": "SMT with automated pick and place",
        "location": "Shanghai Electronics Manufacturing Facility",
        "timestamp": "2025-03-14T16:30:00Z",
        "verification": {
          "value": "YXNzZW1ibHlfdmVyaWZpY2F0aW9u",
          "algorithm": "ed25519",
          "public_key": "YXNzZW1ibHlfcHVibGljX2tleQ=="
        }
      },
      {
        "stage": "Calibration",
        "process": "Automated calibration of sensors against reference standards",
        "location": "Shanghai Electronics Testing Facility",
        "timestamp": "2025-03-15T08:15:00Z",
        "verification": {
          "value": "Y2FsaWJyYXRpb25fdmVyaWZpY2F0aW9u",
          "algorithm": "ed25519",
          "public_key": "Y2FsaWJyYXRpb25fcHVibGljX2tleQ=="
        }
      }
    ]
  },
  "physical_properties": {
    "measurements": [
      {
        "quantity_kind": "Mass",
        "value": 42.5,
        "unit": "g"
      },
      {
        "quantity_kind": "Power",
        "value": 0.85,
        "unit": "W"
      }
    ]
  },
  "tags": [
    "sensor",
    "environmental",
    "temperature",
    "humidity",
    "air-quality",
    "iot"
  ],
  "__meta": {
    "file": "/Users/a/Documents/schemas/resources/samples/resource_with_custody.json",
    "timestamp": "2025-05-13 13:44:03"
  }
}
,
{
  "$schema": "https://dao.example.org/schemas/resources/energy_resource.schema.json",
  "id": "res.solar-energy",
  "type": "Resource",
  "name": "Solar Photovoltaic Energy",
  "resource_category": "energy",
  "resource_type": "renewable_electricity",
  "description": "Electricity generated from photovoltaic solar panels",
  "unit_of_measure": "kW.h",
  "supply_chain": {
    "origin": {
      "geographic_source": [
        {
          "region": "Arizona Solar Farm, USA",
          "percentage": 100,
          "coordinates": {
            "latitude": 33.45,
            "longitude": -111.94
          }
        }
      ]
    },
    "transformation_stages": [
      {
        "stage": "Generation",
        "process": "Photovoltaic conversion",
        "location": "Arizona Solar Farm",
        "timestamp": "2023-09-15T12:00:00Z",
        "emissions": {
          "co2_equivalent_kg": 0
        }
      },
      {
        "stage": "Transmission",
        "process": "Grid distribution",
        "location": "Western Power Grid",
        "timestamp": "2023-09-15T12:01:00Z",
        "energy_used": {
          "quantity_kind": "Energy",
          "value": 0.05,
          "unit": "kW.h"
        },
        "emissions": {
          "co2_equivalent_kg": 0.01
        }
      }
    ]
  },
  "sustainability": {
    "carbon_footprint": {
      "total_co2e_kg": 0.01,
      "methodology": "ISO 14067:2018"
    },
    "energy_usage": {
      "operational_energy_rate": {
        "quantity_kind": "Power",
        "value": 0,
        "unit": "W"
      }
    },
    "water_usage": {
      "total_water_usage_l": 0.1,
      "water_intensity": 0.0001
    },
    "lifecycle": {
      "expected_lifetime": {
        "value": 1,
        "unit": "h"
      }
    }
  },
  "integration_points": {
    "used_in_devices": [
      "dev.server-01",
      "dev.sensor-network"
    ],
    "required_for_tasks": [
      "task1",
      "task2"
    ]
  },
  "availability": {
    "scarcity_level": "abundant",
    "renewable": true,
    "replenishment_rate": {
      "rate": 100,
      "unit": "%",
      "time_period": "daily"
    }
  },
  "market_data": {
    "price_history": [
      {
        "date": "2023-09-15",
        "price": 0.08,
        "currency": "USD",
        "unit": "kW.h"
      }
    ],
    "volatility": "low",
    "price_trend": "decreasing"
  },
  "energy_type": "electrical",
  "energy_source": "solar",
  "generation_properties": {
    "capacity_factor": 0.25,
    "peak_capacity": {
      "quantity_kind": "Power",
      "value": 100,
      "unit": "MW"
    },
    "response_time": {
      "value": 0.001,
      "unit": "s"
    },
    "intermittency": "high",
    "dispatchability": "non_dispatchable"
  },
  "energy_conversion": {
    "input_energy_type": "solar_radiation",
    "output_energy_type": "electricity",
    "conversion_efficiency": 22,
    "energy_density": {
      "value": 0,
      "unit": "kW.h/kg"
    }
  },
  "grid_integration": {
    "transmission_losses": 3,
    "grid_compatibility": "high",
    "requires_conversion": false,
    "balancing_requirements": "Requires battery storage or other dispatchable generation for stability"
  },
  "lifecycle_emissions": {
    "construction_emissions_co2e_per_kWh": 40,
    "operational_emissions_co2e_per_kWh": 0,
    "decommissioning_emissions_co2e_per_kWh": 5,
    "lifecycle_emissions_methodology": "IPCC AR5 100-year GWP"
  },
  "land_requirements": {
    "area_per_MW": {
      "quantity_kind": "Area",
      "value": 8,
      "unit": "ha"
    },
    "land_type": [
      "desert",
      "brownfield",
      "rooftop"
    ],
    "competitive_land_uses": [
      "agriculture",
      "development"
    ]
  },
  "water_usage": {
    "consumption_l_per_MWh": 20,
    "withdrawal_l_per_MWh": 20,
    "water_type": "reclaimed"
  },
  "weather_dependency": {
    "dependent_factor": "sunlight",
    "sensitivity": "high",
    "seasonal_variation": "medium"
  },
  "tags": [
    "renewable",
    "zero-emission",
    "photovoltaic"
  ],
  "__meta": {
    "file": "/Users/a/Documents/schemas/resources/samples/solar_energy.json",
    "timestamp": "2025-05-13 13:08:12"
  }
}
,
{
  "$schema": "https://dao.example.org/schemas/storage_medium.schema.json",
  "id": "stor.nvme-research-array-03",
  "type": "StorageMedium",
  "label": "Research Array NVMe Drive 03",
  "medium_category": "physical",
  "physical_medium_type": "nvme",
  "location": "dc.ber1.cab12.u17",
  "device_id": "SN:8374-NVME-2025-Q1-003",
  "manufacturer": "QuantumStore",
  "model": "DT980 Pro 4TB",
  "firmware_version": "QS.3.2.415",
  "capacity_bytes": 4000000000000,
  "used_bytes": 1875000000000,
  "redundancy": "raid6",
  "encryption": "at_rest",
  "energy_profile": "moderate",
  "custody_log": [
    {
      "event_type": "receipt",
      "actor_id": "cont.inventory-manager-05",
      "timestamp": "2025-02-10T14:22:15Z",
      "location": "DAO Central Storage Facility, Berlin",
      "notes": "Initial receipt of new NVMe drive from QuantumStore",
      "signature": {
        "value": "cmVjZWlwdF9zaWduYXR1cmVfZHJpdmU=",
        "algorithm": "ed25519",
        "public_key": "c3RvcmFnZV9mYWNpbGl0eV9rZXk=",
        "timestamp": "2025-02-10T14:25:00Z"
      }
    },
    {
      "event_type": "inspection",
      "actor_id": "dev.storage-test-bench-01",
      "timestamp": "2025-02-10T16:10:45Z",
      "location": "DAO Testing Lab, Berlin",
      "notes": "Validation and performance testing completed - all tests passed",
      "previous_hash": "sha256:1cf8f5bc62c5910c8a5c79d789a6fe8dbdfc53cd84f9e75a7bbef0a731f35538",
      "signature": {
        "value": "dGVzdGluZ19zaWduYXR1cmVfZHJpdmU=",
        "algorithm": "ed25519",
        "public_key": "dGVzdGluZ19sYWJfa2V5",
        "timestamp": "2025-02-10T17:05:22Z"
      },
      "metadata": {
        "test_suite_id": "NVMe-PRF-2025",
        "version": "3.4.2",
        "read_speed_mbps": 7250,
        "write_speed_mbps": 5300
      }
    },
    {
      "event_type": "transfer",
      "actor_id": "cont.data-center-tech-12",
      "timestamp": "2025-02-12T09:30:00Z",
      "location": "DAO Storage Facility, Berlin",
      "notes": "Transfer to Data Center rack installation team",
      "previous_hash": "sha256:8c594c0d9467a9c9f138471bb4f5155de872e4127ef0b587b43c2161f9661cfb",
      "signature": {
        "value": "dHJhbnNmZXJfc2lnbmF0dXJlX2RyaXZl",
        "algorithm": "ed25519",
        "public_key": "ZGF0YV9jZW50ZXJfdGVjaF9rZXk=",
        "timestamp": "2025-02-12T09:32:18Z"
      }
    },
    {
      "event_type": "transformation",
      "actor_id": "dev.dc-rack-installer-02",
      "timestamp": "2025-02-12T14:15:30Z",
      "location": "dc.ber1.cab12.u17",
      "notes": "Installed in server array, formatted with ZFS and added to research storage pool",
      "previous_hash": "sha256:a1b76cd5712d9a23154bb08d785642c7ddf7611d2ea324ea4b32a7372bce9f0c",
      "signature": {
        "value": "aW5zdGFsbGF0aW9uX3NpZ25hdHVyZV9kcml2ZQ==",
        "algorithm": "ed25519",
        "public_key": "cmFja19pbnN0YWxsZXJfa2V5",
        "timestamp": "2025-02-12T14:45:12Z"
      },
      "metadata": {
        "raid_array_id": "RAID6-RES-07",
        "storage_pool_name": "research_ml_training_pool",
        "filesystem": "zfs"
      }
    },
    {
      "event_type": "maintenance",
      "actor_id": "dev.storage-monitor-system",
      "timestamp": "2025-05-01T03:15:00Z",
      "location": "dc.ber1.cab12.u17",
      "notes": "Automated firmware update to address performance optimization",
      "previous_hash": "sha256:e4c982d0b42c6162741e9713d22ad97df465fd1d4701b4d8e2efab1818825bac",
      "signature": {
        "value": "ZmlybXdhcmVfdXBkYXRlX3NpZ25hdHVyZQ==",
        "algorithm": "ed25519",
        "public_key": "c3RvcmFnZV9tb25pdG9yX2tleQ==",
        "timestamp": "2025-05-01T03:30:42Z"
      },
      "metadata": {
        "previous_firmware": "QS.3.2.410",
        "updated_firmware": "QS.3.2.415",
        "update_status": "successful",
        "maintenance_id": "MAINT-20250501-NVMe-07"
      }
    }
  ],
  "expected_lifespan_years": 5.5,
  "manufacturing_date": "2025-01-15",
  "weight_g": 42,
  "form_factor": "M.2",
  "power_consumption_idle_w": 0.35,
  "power_consumption_active_w": 8.5,
  "read_speed_mbps": 7250,
  "write_speed_mbps": 5300,
  "contains_dataset_ids": [
    "ds.ml-training-dataset-2025-04",
    "ds.sensor-telemetry-q1-2025"
  ],
  "component_resources": [
    {
      "resource_id": "res.nand-flash-tlc",
      "quantity": 4096,
      "unit": "GBy",
      "component": "nand_flash",
      "recoverable": true,
      "recovery_efficiency": 78
    },
    {
      "resource_id": "res.controller-chip-nvme",
      "quantity": 1,
      "unit": "pc",
      "component": "controller",
      "recoverable": true,
      "recovery_efficiency": 95
    }
  ],
  "__meta": {
    "file": "/Users/a/Documents/schemas/resources/samples/storage_medium_with_custody.json",
    "timestamp": "2025-05-13 13:44:10"
  }
}
,
{
  "$schema": "https://dao.example.org/schemas/training_dataset.schema.json",
  "id": "ds.forest-sensor-training-2025-q1",
  "title": "Black Forest Environmental Sensor Training Dataset Q1 2025",
  "description": "Comprehensive environmental monitoring dataset from Black Forest research stations, including temperature, humidity, air quality, and particle detection readings with synchronized time series",
  "source_type": "collected",
  "data_types": [
    "time_series",
    "environmental",
    "sensor_readings",
    "weather"
  ],
  "format": [
    "parquet",
    "csv",
    "json"
  ],
  "record_count": 8742156,
  "size_bytes": 12580000000,
  "created_at": "2025-04-20T16:30:00Z",
  "license": "CC-BY-4.0",
  "custody_log": [
    {
      "event_type": "creation",
      "actor_id": "cont.data-scientist-04",
      "timestamp": "2025-04-20T16:30:00Z",
      "location": "DAO Research Data Processing Center, Berlin",
      "notes": "Initial collection and aggregation of Q1 forest sensor data",
      "signature": {
        "value": "Y3JlYXRpb25fc2lnbmF0dXJlX2RhdGFzZXQ=",
        "algorithm": "ed25519",
        "public_key": "ZGF0YV9zY2llbnRpc3Rfa2V5",
        "timestamp": "2025-04-20T16:38:45Z"
      }
    },
    {
      "event_type": "transformation",
      "actor_id": "dev.data-processing-pipeline",
      "timestamp": "2025-04-21T03:15:00Z",
      "location": "DAO Computing Cluster, Berlin",
      "notes": "Automated cleaning, normalization, and feature extraction processing completed",
      "previous_hash": "sha256:b478a5e03f12c6d4f52354e71a2dfe720d99f4ec58ad660a181dd71c9aa1d0a2",
      "signature": {
        "value": "cHJvY2Vzc2luZ19zaWduYXR1cmVfZGF0YXNldA==",
        "algorithm": "ed25519",
        "public_key": "ZGF0YV9wcm9jZXNzaW5nX3BpcGVsaW5lX2tleQ==",
        "timestamp": "2025-04-21T06:22:15Z"
      },
      "metadata": {
        "pipeline_id": "ENV-PROCESS-STD-2025",
        "version": "4.2.1",
        "anomalies_detected": 124,
        "anomalies_removed": 98,
        "missing_values_imputed": 1253
      }
    },
    {
      "event_type": "validation",
      "actor_id": "cont.environmental-specialist-07",
      "timestamp": "2025-04-22T14:20:00Z",
      "location": "DAO Research Center, Berlin",
      "notes": "Expert validation of processed dataset for ecological and environmental accuracy",
      "previous_hash": "sha256:e73d4d352e81b19c663c132f0952bf8238c536373e030256d0123ed2c3c31eb2",
      "signature": {
        "value": "dmFsaWRhdGlvbl9zaWduYXR1cmVfZGF0YXNldA==",
        "algorithm": "ed25519",
        "public_key": "ZW52aXJvbm1lbnRhbF9zcGVjaWFsaXN0X2tleQ==",
        "timestamp": "2025-04-22T18:05:53Z"
      },
      "metadata": {
        "validation_checklist_id": "ENV-VAL-2025-04",
        "accuracy_score": 96.8,
        "ecological_consistency_verified": true,
        "seasonal_patterns_verified": true
      }
    },
    {
      "event_type": "transfer",
      "actor_id": "cont.ml-engineer-02",
      "timestamp": "2025-04-23T09:40:00Z",
      "location": "DAO Research Data Center, Berlin",
      "notes": "Dataset transferred to ML training team for model development",
      "previous_hash": "sha256:c8b965c5a0d8aad36fddfd682f65852fb56a590b68c92c3f4373a688b59208ea",
      "signature": {
        "value": "dHJhbnNmZXJfc2lnbmF0dXJlX2RhdGFzZXQ=",
        "algorithm": "ed25519",
        "public_key": "bWxfZW5naW5lZXJfa2V5",
        "timestamp": "2025-04-23T09:43:17Z"
      }
    },
    {
      "event_type": "transformation",
      "actor_id": "dev.ml-platform",
      "timestamp": "2025-04-24T12:15:00Z",
      "location": "DAO ML Compute Platform, Berlin",
      "notes": "Dataset split into training/validation/test sets and converted to optimized ML formats",
      "previous_hash": "sha256:6d8e2f7a1b5c9d4e3f2a1b5c8d7e6f5d4e3f2a1b5c8d7e6f5d4e3f2a1b5c8d7e",
      "signature": {
        "value": "bWxfcHJlcF9zaWduYXR1cmVfZGF0YXNldA==",
        "algorithm": "ed25519",
        "public_key": "bWxfcGxhdGZvcm1fa2V5",
        "timestamp": "2025-04-24T14:30:22Z"
      },
      "metadata": {
        "ml_pipeline_id": "ML-PREP-ENV-2025",
        "training_split": 0.7,
        "validation_split": 0.15,
        "test_split": 0.15,
        "format_optimizations": [
          "quantization",
          "compression",
          "indexing"
        ]
      }
    }
  ],
  "influenced_by": [
    {
      "contributor_id": "cont.field-researcher-12",
      "contribution_type": "data_collection",
      "weight": 0.35
    },
    {
      "contributor_id": "cont.data-scientist-04",
      "contribution_type": "curation",
      "weight": 0.45
    },
    {
      "contributor_id": "cont.environmental-specialist-07",
      "contribution_type": "annotation",
      "weight": 0.2
    }
  ],
  "provenance": [
    {
      "event": "raw_data_collection",
      "actor": "cont.field-researcher-12",
      "timestamp": "2025-01-01T00:00:00Z",
      "notes": "Beginning of Q1 automated sensor data collection"
    },
    {
      "event": "data_processing",
      "actor": "cont.data-scientist-04",
      "timestamp": "2025-04-20T10:15:00Z",
      "notes": "Data extraction from distributed sensors and initial processing"
    }
  ],
  "access_control": [
    {
      "agent_id": "cont.ml-engineer-02",
      "access_level": "write",
      "granted_at": "2025-04-23T09:40:00Z"
    },
    {
      "agent_id": "cont.data-scientist-04",
      "access_level": "admin",
      "granted_at": "2025-04-20T16:30:00Z"
    },
    {
      "agent_id": "cont.environmental-researcher-team",
      "access_level": "read",
      "granted_at": "2025-04-25T08:00:00Z"
    }
  ],
  "copy_count": 3,
  "data_quality_metrics": {
    "completeness": 0.992,
    "accuracy": 0.968,
    "noise_level": 1.7
  },
  "resource_requirements": {
    "memory_bytes": 34359738368,
    "processing_time_s": 1800,
    "storage_bytes": 25160000000
  },
  "archival": {
    "checksum": "sha256:7d9c8f6a5b4e3d2c1b0a9f8e7d6c5b4a3f2e1d0c9b8a7f6e5d4c3b2a1f0e9d8c7",
    "checksum_algorithm": "sha256",
    "format_version": "1.0",
    "archive_status": "active",
    "last_verified_at": "2025-04-25T06:00:00Z",
    "curator_id": "cont.data-scientist-04",
    "retention_policy": "retain_3_years",
    "rights_statement": "Creative Commons Attribution 4.0 International"
  },
  "tags": [
    "environmental",
    "black-forest",
    "sensor-data",
    "time-series",
    "air-quality",
    "weather",
    "2025-q1"
  ],
  "__meta": {
    "file": "/Users/a/Documents/schemas/resources/samples/training_dataset_with_custody.json",
    "timestamp": "2025-05-13 13:44:02"
  }
}
,
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://dao.example.org/schemas/storage_medium.schema.json",
  "title": "Storage Medium",
  "description": "Schema describing physical or virtual storage media for datasets, models, or project artifacts. Tracks durability, redundancy, security, energy profile, and access control.",
  "type": "object",
  "required": [
    "id",
    "type",
    "medium_category"
  ],
  "properties": {
    "id": {
      "type": "string",
      "description": "Unique ID or slug for the storage medium"
    },
    "label": {
      "type": "string",
      "description": "Human-readable label for the medium (e.g., Glacier Vault, Disk A1, IPFS node)"
    },
    "type": {
      "type": "string",
      "description": "Discriminator to identify object class as 'StorageMedium' node in the graph.",
      "const": "StorageMedium"
    },
    "medium_category": {
      "type": "string",
      "enum": [
        "physical",
        "logical"
      ],
      "description": "Primary categorization of storage medium as physical or logical"
    },
    "custody_log": {
      "type": "array",
      "description": "Chronological list of custody events for tracking storage medium transfers, maintenance, and data movements",
      "items": {
        "$ref": "common/custody_event.schema.json"
      }
    },
    "capacity": {
      "$ref": "measurements/data_measurement.schema.json",
      "description": "Total storage capacity measurement"
    },
    "capacity_bytes": {
      "type": "integer",
      "description": "Total capacity in bytes (Unit: By, compatible with UCUM 'By' code for byte)"
    },
    "used_bytes": {
      "type": "integer",
      "description": "Current used storage in bytes (Unit: By, compatible with UCUM 'By' code for byte)"
    },
    "redundancy": {
      "type": "string",
      "enum": [
        "none",
        "mirrored",
        "raid5",
        "raid6",
        "geo-redundant",
        "block-replicated"
      ],
      "description": "Redundancy scheme applied to this storage"
    },
    "encryption": {
      "type": "string",
      "enum": [
        "none",
        "at_rest",
        "e2e",
        "hardware"
      ],
      "description": "Level or method of encryption"
    },
    "access_policy_summary": {
      "type": "string",
      "description": "Human-readable summary of access control policy for this medium"
    },
    "contains_dataset_ids": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "Dataset IDs stored on this medium"
    },
    "performance_metrics": {
      "type": "array",
      "description": "Performance metrics related to this storage medium",
      "items": {
        "$ref": "measurement.schema.json"
      }
    },
    "audit_log": {
      "type": "array",
      "description": "Log of events related to this medium",
      "items": {
        "type": "object",
        "required": [
          "event",
          "timestamp"
        ],
        "properties": {
          "log_id": {
            "type": "string",
            "description": "Optional UUID or hash of the log entry"
          },
          "event": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "actor": {
            "type": "string"
          },
          "notes": {
            "type": "string"
          }
        }
      }
    },
    "component_resources": {
      "type": "array",
      "description": "Material resources used in the construction of this storage medium",
      "items": {
        "type": "object",
        "required": [
          "resource_id",
          "quantity"
        ],
        "properties": {
          "resource_id": {
            "type": "string",
            "description": "Reference to a resource schema id"
          },
          "quantity": {
            "type": "number"
          },
          "unit": {
            "type": "string"
          },
          "component": {
            "type": "string",
            "description": "What component uses this resource (e.g., 'nand_flash', 'controller', 'casing')"
          },
          "recoverable": {
            "type": "boolean",
            "description": "Whether the resource can be recovered at end-of-life",
            "default": false
          },
          "recovery_efficiency": {
            "type": "number",
            "minimum": 0,
            "maximum": 100,
            "description": "Efficiency of recovery process (Unit: %, UCUM code for percent)"
          }
        }
      }
    },
    "operational_resources": {
      "type": "array",
      "description": "Resources consumed during operation of this storage medium",
      "items": {
        "type": "object",
        "required": [
          "resource_id",
          "consumption_rate"
        ],
        "properties": {
          "resource_id": {
            "type": "string",
            "description": "Reference to a resource schema id"
          },
          "consumption_rate": {
            "type": "number",
            "description": "Rate of resource consumption"
          },
          "rate_unit": {
            "type": "string",
            "description": "Unit for consumption rate (e.g., 'kW.h/GBy' for energy per gigabyte stored)"
          },
          "consumption_profile": {
            "type": "string",
            "enum": [
              "constant",
              "load_dependent",
              "access_dependent",
              "temperature_dependent"
            ],
            "description": "How consumption varies based on usage patterns"
          }
        }
      }
    },
    "sustainability_metrics": {
      "type": "object",
      "description": "Sustainability and environmental impact metrics",
      "properties": {
        "embodied_carbon_kg_co2e": {
          "type": "number",
          "description": "Total carbon emissions from manufacturing (Unit: kg, UCUM code for kilograms of CO2 equivalent)"
        },
        "operational_carbon_kg_co2e_per_year": {
          "type": "number",
          "description": "Annual carbon emissions from operation (Unit: kg/a, UCUM code for kilograms per year)"
        },
        "energy_efficiency_rating": {
          "type": "string",
          "enum": [
            "a+++",
            "a++",
            "a+",
            "a",
            "b",
            "c",
            "d",
            "e",
            "f",
            "g",
            "unrated"
          ],
          "description": "Energy efficiency rating if applicable"
        },
        "sustainability_certification": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "certification": {
                "type": "string"
              },
              "issued_by": {
                "type": "string"
              },
              "issue_date": {
                "type": "string",
                "format": "date"
              },
              "expiration_date": {
                "type": "string",
                "format": "date"
              }
            }
          }
        }
      }
    },
    "meta": {
      "type": "object",
      "description": "Freeform container for implementation-specific metadata",
      "additionalProperties": true
    }
  },
  "oneOf": [
    {
      "type": "object",
      "required": [
        "medium_category",
        "physical_medium_type",
        "location"
      ],
      "properties": {
        "medium_category": {
          "const": "physical"
        },
        "physical_medium_type": {
          "type": "string",
          "enum": [
            "optical",
            "magnetic",
            "ssd",
            "nvme",
            "tape",
            "paper",
            "other"
          ],
          "description": "Physical storage technology category"
        },
        "location": {
          "type": "string",
          "description": "Physical location (e.g., 'dc.ams1', 'cabinet 4B', 'safe 2')"
        },
        "device_id": {
          "type": "string",
          "description": "Hardware device identifier (serial number, asset tag, etc.)"
        },
        "manufacturer": {
          "type": "string",
          "description": "Hardware manufacturer name"
        },
        "model": {
          "type": "string",
          "description": "Hardware model identifier"
        },
        "firmware_version": {
          "type": "string",
          "description": "Current firmware version if applicable"
        },
        "energy_profile": {
          "type": "string",
          "enum": [
            "low",
            "moderate",
            "high",
            "renewable-only",
            "unknown"
          ],
          "description": "Environmental impact / energy draw of the storage medium"
        },
        "expected_lifespan_years": {
          "type": "number",
          "description": "Expected physical media lifespan (Unit: a, UCUM code for years)"
        },
        "manufacturing_date": {
          "type": "string",
          "format": "date",
          "description": "Date of manufacture"
        },
        "physical_dimensions": {
          "type": "object",
          "description": "Physical dimensions of the storage medium",
          "properties": {
            "weight": {
              "$ref": "measurements/spatial_measurement.schema.json"
            },
            "height": {
              "$ref": "measurements/spatial_measurement.schema.json"
            },
            "width": {
              "$ref": "measurements/spatial_measurement.schema.json"
            },
            "depth": {
              "$ref": "measurements/spatial_measurement.schema.json"
            },
            "volume": {
              "$ref": "measurements/spatial_measurement.schema.json"
            }
          }
        },
        "weight_g": {
          "type": "number",
          "description": "Weight of the storage medium (Unit: g, UCUM code for grams)"
        },
        "height_mm": {
          "type": "number",
          "description": "Height of the storage medium (Unit: mm, UCUM code for millimeters)"
        },
        "width_mm": {
          "type": "number",
          "description": "Width of the storage medium (Unit: mm, UCUM code for millimeters)"
        },
        "depth_mm": {
          "type": "number",
          "description": "Depth of the storage medium (Unit: mm, UCUM code for millimeters)"
        },
        "volume_cm3": {
          "type": "number",
          "description": "Volume of the storage medium (Unit: cm3, UCUM code for cubic centimeters)"
        },
        "form_factor": {
          "type": "string",
          "description": "Standardized form factor (e.g., '2.5-inch', '3.5-inch', 'M.2', 'LTO-9')"
        },
        "operating_temperature_range": {
          "type": "object",
          "description": "Operating temperature range for the device",
          "properties": {
            "min": {
              "$ref": "measurements/thermal_measurement.schema.json"
            },
            "max": {
              "$ref": "measurements/thermal_measurement.schema.json"
            }
          }
        },
        "power_consumption": {
          "type": "object",
          "description": "Power consumption measurements",
          "properties": {
            "idle": {
              "$ref": "measurements/power_measurement.schema.json"
            },
            "active": {
              "$ref": "measurements/power_measurement.schema.json"
            }
          }
        },
        "power_consumption_idle_w": {
          "type": "number",
          "description": "Power consumption when idle (Unit: W, UCUM code for watts)"
        },
        "power_consumption_active_w": {
          "type": "number",
          "description": "Power consumption when active (Unit: W, UCUM code for watts)"
        },
        "performance": {
          "type": "object",
          "description": "Performance characteristics",
          "properties": {
            "read_speed": {
              "$ref": "measurements/data_measurement.schema.json"
            },
            "write_speed": {
              "$ref": "measurements/data_measurement.schema.json"
            },
            "latency": {
              "$ref": "measurements/data_measurement.schema.json"
            }
          }
        },
        "read_speed_mbps": {
          "type": "number",
          "description": "Maximum read speed (Unit: Mbit/s, UCUM code for megabits per second)"
        },
        "write_speed_mbps": {
          "type": "number",
          "description": "Maximum write speed (Unit: Mbit/s, UCUM code for megabits per second)"
        }
      }
    },
    {
      "type": "object",
      "required": [
        "medium_category",
        "logical_medium_type"
      ],
      "properties": {
        "medium_category": {
          "const": "logical"
        },
        "logical_medium_type": {
          "type": "string",
          "enum": [
            "cloud",
            "cold_cloud",
            "distributed",
            "ephemeral",
            "volume",
            "filesystem",
            "container",
            "object_store",
            "other"
          ],
          "description": "Logical storage technology category"
        },
        "location": {
          "type": "string",
          "description": "Logical location descriptor (e.g., 'ipfs://node-x', 's3://bucket-name')"
        },
        "storage_format": {
          "type": "string",
          "description": "Filesystem or archival format used (e.g., ext4, zfs, tar.gz, IPFS chunked)"
        },
        "provider": {
          "type": "string",
          "description": "Service provider or platform (e.g., AWS, GCP, IPFS)"
        },
        "contractual_retention_years": {
          "type": "number",
          "description": "Contractual data retention period (Unit: a, UCUM code for years)"
        },
        "sla_availability_percent": {
          "type": "number",
          "description": "Service level agreement availability percentage (Unit: %, UCUM code for percent)"
        },
        "performance": {
          "type": "object",
          "description": "Performance characteristics",
          "properties": {
            "access_latency": {
              "$ref": "measurements/data_measurement.schema.json"
            },
            "bandwidth": {
              "$ref": "measurements/data_measurement.schema.json"
            },
            "throughput": {
              "$ref": "measurements/data_measurement.schema.json"
            }
          }
        },
        "average_access_latency_ms": {
          "type": "number",
          "description": "Average access latency (Unit: ms, UCUM code for milliseconds)"
        },
        "bandwidth_mbps": {
          "type": "number",
          "description": "Bandwidth capacity (Unit: Mbit/s, UCUM code for megabits per second)"
        },
        "hosted_on_physical_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "IDs of physical storage media that host this logical medium"
        },
        "contains_volume_ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Logical volume or partition IDs hosted by this medium"
        }
      }
    }
  ],
  "__meta": {
    "file": "/Users/a/Documents/schemas/storage_medium.schema.json",
    "timestamp": "2025-05-13 13:38:51"
  }
}
,
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://dao.example.org/schemas/task.schema.json",
  "title": "DAO Task Schema",
  "description": "Schema for a discrete unit of work inside a DAO Project.",
  "type": "object",
  "required": [
    "id",
    "title",
    "status"
  ],
  "properties": {
    "id": {
      "type": "string",
      "description": "UUID v4 of the task.",
      "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
    },
    "title": {
      "type": "string",
      "maxLength": 140
    },
    "description": {
      "type": "string"
    },
    "status": {
      "type": "string",
      "enum": [
        "open",
        "claimed",
        "in_progress",
        "submitted",
        "closed",
        "archived"
      ]
    },
    "estimated_hours": {
      "type": "number",
      "minimum": 0
    },
    "people_required": {
      "type": "integer",
      "minimum": 1
    },
    "priority": {
      "type": "string",
      "enum": [
        "low",
        "medium",
        "high",
        "urgent"
      ]
    },
    "inputs": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "uniqueItems": true
    },
    "outputs": {
      "type": "string"
    },
    "resources": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "uniqueItems": true,
      "description": "Legacy field for simple resource strings"
    },
    "required_resources": {
      "type": "array",
      "description": "Resources required to complete this task",
      "items": {
        "type": "object",
        "required": [
          "resource_id",
          "quantity"
        ],
        "properties": {
          "resource_id": {
            "type": "string",
            "description": "Reference to a resource schema id"
          },
          "quantity": {
            "type": "number",
            "description": "Amount of the resource required"
          },
          "unit": {
            "type": "string",
            "description": "Unit of measure (should match resource's unit_of_measure)"
          },
          "substitutable": {
            "type": "boolean",
            "description": "Whether alternatives can be used",
            "default": false
          },
          "notes": {
            "type": "string",
            "description": "Additional requirements or specifications"
          }
        }
      }
    },
    "consumes_resources": {
      "type": "array",
      "description": "Resources consumed when executing this task",
      "items": {
        "type": "object",
        "required": [
          "resource_id",
          "quantity"
        ],
        "properties": {
          "resource_id": {
            "type": "string",
            "description": "Reference to a resource schema id"
          },
          "quantity": {
            "type": "number",
            "description": "Amount of the resource consumed"
          },
          "unit": {
            "type": "string",
            "description": "Unit of measure (should match resource's unit_of_measure)"
          },
          "return_rate": {
            "type": "number",
            "minimum": 0,
            "maximum": 100,
            "description": "Percentage that can be returned/recycled (Unit: %, UCUM code for percent)"
          }
        }
      }
    },
    "produces_resources": {
      "type": "array",
      "description": "Resources produced by this task",
      "items": {
        "type": "object",
        "required": [
          "resource_id",
          "quantity"
        ],
        "properties": {
          "resource_id": {
            "type": "string",
            "description": "Reference to a resource schema id"
          },
          "quantity": {
            "type": "number",
            "description": "Amount of the resource produced"
          },
          "unit": {
            "type": "string",
            "description": "Unit of measure (should match resource's unit_of_measure)"
          },
          "quality_factor": {
            "type": "number",
            "minimum": 0,
            "maximum": 100,
            "description": "Quality rating of produced resource (Unit: %, UCUM code for percent)"
          }
        }
      }
    },
    "tags": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "uniqueItems": true
    },
    "depends_on": {
      "type": "array",
      "items": {
        "type": "string",
        "description": "Task IDs this one depends on",
        "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
      },
      "uniqueItems": true
    },
    "claimed_by": {
      "type": "string"
    },
    "submitted_by": {
      "type": "string"
    },
    "bounty": {
      "type": "number",
      "minimum": 0
    },
    "submission": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "format": "uri"
        },
        "submitted_at": {
          "type": "string",
          "format": "date-time"
        },
        "hours_spent": {
          "type": "number",
          "minimum": 0
        }
      },
      "required": [
        "url",
        "submitted_at",
        "hours_spent"
      ],
      "additionalProperties": false
    }
  },
  "additionalProperties": false,
  "__meta": {
    "file": "/Users/a/Documents/schemas/task.schema.json",
    "timestamp": "2025-05-13 13:00:47"
  }
}
,
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://dao.example.org/schemas/telemetry_stream.schema.json",
  "title": "Telemetry Stream",
  "description": "Schema for streaming or batched measurement data from devices or processes, supporting real-time monitoring and historical analysis.",
  "type": "object",
  "required": [
    "stream_id",
    "device_id",
    "timestamp",
    "measurements"
  ],
  "properties": {
    "stream_id": {
      "type": "string",
      "description": "Unique identifier for this telemetry stream",
      "pattern": "^ts\\.[a-z0-9_-]{3,64}$"
    },
    "device_id": {
      "type": "string",
      "description": "ID of the device or entity producing this telemetry"
    },
    "timestamp": {
      "type": "string",
      "format": "date-time",
      "description": "When this telemetry batch was collected or transmitted"
    },
    "session_id": {
      "type": "string",
      "description": "Optional session identifier for grouping related telemetry data"
    },
    "sequence_number": {
      "type": "integer",
      "minimum": 0,
      "description": "Optional monotonically increasing sequence number to detect missing data"
    },
    "batch_complete": {
      "type": "boolean",
      "default": true,
      "description": "Whether this is a complete measurements batch or a partial update"
    },
    "measurements": {
      "type": "array",
      "description": "Array of measurements in this telemetry packet",
      "minItems": 1,
      "items": {
        "$ref": "measurement.schema.json"
      }
    },
    "measurements_by_kind": {
      "type": "object",
      "description": "Alternative organization of measurements grouped by quantity_kind",
      "additionalProperties": {
        "type": "array",
        "items": {
          "$ref": "measurement.schema.json"
        }
      }
    },
    "sampling_metadata": {
      "type": "object",
      "description": "Information about how measurements were sampled and collected",
      "properties": {
        "sampling_rate_hz": {
          "type": "number",
          "description": "Frequency at which measurements were taken (Unit: Hz, UCUM code for hertz)",
          "minimum": 0
        },
        "collection_method": {
          "type": "string",
          "enum": [
            "periodic",
            "event-driven",
            "threshold-triggered",
            "manual",
            "adaptive"
          ],
          "description": "How the data was collected"
        },
        "aggregation": {
          "type": "string",
          "enum": [
            "none",
            "mean",
            "min",
            "max",
            "sum",
            "median"
          ],
          "default": "none",
          "description": "If data was aggregated before transmission, which method was used"
        },
        "aggregation_period_s": {
          "type": "number",
          "minimum": 0,
          "description": "Time period over which data was aggregated (Unit: s, UCUM code for seconds)"
        }
      }
    },
    "context": {
      "type": "object",
      "description": "Context information about the environment or state when measurements were taken",
      "properties": {
        "task_id": {
          "type": "string",
          "description": "ID of task being performed during measurement collection"
        },
        "experiment_id": {
          "type": "string",
          "description": "ID of experiment these measurements are part of"
        },
        "location": {
          "type": "string",
          "description": "Location identifier where measurements were taken"
        },
        "environment": {
          "type": "object",
          "description": "Environmental conditions during measurement",
          "additionalProperties": true
        },
        "network_conditions": {
          "type": "object",
          "description": "Network status during measurement",
          "additionalProperties": true
        }
      }
    },
    "data_quality": {
      "type": "object",
      "description": "Quality metrics for the contained measurements",
      "properties": {
        "completeness": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "Fraction of expected measurements that were actually collected"
        },
        "error_count": {
          "type": "integer",
          "minimum": 0,
          "description": "Number of measurement errors encountered"
        },
        "suspect_readings": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "Indices of measurements that appear suspect or anomalous"
        },
        "calibration_status": {
          "type": "string",
          "enum": [
            "calibrated",
            "needs_calibration",
            "uncalibrated",
            "unknown"
          ],
          "description": "Status of sensor calibration during data collection"
        }
      }
    },
    "retention": {
      "type": "object",
      "description": "Data retention policies for this telemetry",
      "properties": {
        "priority": {
          "type": "string",
          "enum": [
            "essential",
            "high",
            "normal",
            "low",
            "transient"
          ],
          "default": "normal",
          "description": "Priority level for storage retention"
        },
        "retention_period_days": {
          "type": "integer",
          "minimum": 0,
          "description": "How long to retain this data (Unit: d, UCUM code for days)"
        },
        "archival_policy": {
          "type": "string",
          "enum": [
            "compress",
            "downsample",
            "summarize",
            "discard",
            "full"
          ],
          "description": "What to do with this data after retention period"
        }
      }
    },
    "compressed_readings": {
      "type": "object",
      "description": "For high-frequency telemetry, a more efficient representation than individual measurements",
      "properties": {
        "quantity_kind": {
          "type": "string",
          "description": "QUDT quantity kind for all readings in this array"
        },
        "unit": {
          "type": "string",
          "description": "UCUM or QUDT unit code for all values"
        },
        "timestamps": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "date-time"
          },
          "description": "Array of timestamps corresponding to each value"
        },
        "timestamp_start": {
          "type": "string",
          "format": "date-time",
          "description": "Start time for evenly-spaced time series"
        },
        "timestamp_interval_ms": {
          "type": "number",
          "minimum": 0,
          "description": "Milliseconds between readings for evenly-spaced time series"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "number"
          },
          "description": "Array of measurement values"
        },
        "observed_by": {
          "type": "string",
          "description": "ID of device that made these observations"
        },
        "feature_of_interest": {
          "type": "string",
          "description": "ID of the entity being measured"
        }
      },
      "required": [
        "quantity_kind",
        "unit",
        "values"
      ],
      "oneOf": [
        {
          "required": [
            "timestamps"
          ]
        },
        {
          "required": [
            "timestamp_start",
            "timestamp_interval_ms"
          ]
        }
      ]
    },
    "signature": {
      "type": "object",
      "description": "Optional cryptographic signature for data integrity verification",
      "required": [
        "value",
        "algorithm",
        "public_key"
      ],
      "properties": {
        "value": {
          "type": "string",
          "description": "Base64-encoded signature value"
        },
        "algorithm": {
          "type": "string",
          "description": "Signature algorithm used (e.g., 'ed25519', 'sha256-ecdsa')"
        },
        "public_key": {
          "type": "string",
          "description": "Public key or key identifier to use for verification"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "When the signature was created"
        }
      }
    }
  },
  "oneOf": [
    {
      "required": [
        "measurements"
      ]
    },
    {
      "required": [
        "measurements_by_kind"
      ]
    },
    {
      "required": [
        "compressed_readings"
      ]
    }
  ],
  "examples": [
    {
      "stream_id": "ts.server-health-metrics",
      "device_id": "dev.server-001",
      "timestamp": "2025-05-13T15:45:00Z",
      "sequence_number": 12345,
      "measurements": [
        {
          "quantity_kind": "Temperature",
          "value": 45.2,
          "unit": "Cel",
          "timestamp": "2025-05-13T15:44:50Z",
          "observed_by": "dev.sensor-cpu",
          "feature_of_interest": "dev.server-001.cpu"
        },
        {
          "quantity_kind": "Power",
          "value": 120.5,
          "unit": "W",
          "timestamp": "2025-05-13T15:44:55Z",
          "observed_by": "dev.power-meter",
          "feature_of_interest": "dev.server-001.psu"
        }
      ],
      "sampling_metadata": {
        "sampling_rate_hz": 0.2,
        "collection_method": "periodic"
      },
      "context": {
        "location": "dc.ams1.rack-b4",
        "task_id": "task.network-stress-test"
      }
    },
    {
      "stream_id": "ts.wifi-signal-monitoring",
      "device_id": "dev.wifi-scanner-001",
      "timestamp": "2025-05-13T15:46:00Z",
      "compressed_readings": {
        "quantity_kind": "SignalStrength",
        "unit": "dB[mW]",
        "timestamp_start": "2025-05-13T15:45:00Z",
        "timestamp_interval_ms": 100,
        "values": [
          -67.5,
          -68.2,
          -67.9,
          -68.0,
          -67.3,
          -67.8,
          -68.4,
          -68.9,
          -69.0,
          -68.5
        ],
        "observed_by": "dev.wifi-scanner-001",
        "feature_of_interest": "tm.wifi-channel-5"
      },
      "sampling_metadata": {
        "sampling_rate_hz": 10,
        "collection_method": "periodic"
      }
    }
  ],
  "__meta": {
    "file": "/Users/a/Documents/schemas/telemetry_stream.schema.json",
    "timestamp": "2025-05-13 11:34:31"
  }
}
,
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://dao.example.org/schemas/tool.schema.json",
  "title": "Tool",
  "description": "A function-specific artifact used by a device or contributor to complete a task. Tools may be digital or physical, and are typically transient, modular, or purpose-limited.",
  "type": "object",
  "properties": {
    "id": {
      "type": "string",
      "description": "Unique ID of the tool"
    },
    "name": {
      "type": "string",
      "description": "Human-readable name of the tool"
    },
    "tool_type": {
      "type": "string",
      "description": "General classification of the tool",
      "enum": [
        "software",
        "hardware",
        "hybrid"
      ]
    },
    "function": {
      "type": "string",
      "description": "Primary function or purpose of the tool"
    },
    "category": {
      "type": "string",
      "description": "Task domain or functional grouping",
      "enum": [
        "debugging",
        "data_collection",
        "signal_encoding",
        "cryptographic",
        "networking",
        "diagnostics",
        "covert_channel",
        "other"
      ]
    },
    "used_by_device": {
      "type": "string",
      "description": "ID of the device (node:Device) that uses this tool"
    },
    "used_in_task": {
      "type": "string",
      "description": "ID of the task (node:Task) in which the tool was applied"
    },
    "energy_cost_estimate_wh": {
      "type": "number",
      "description": "Estimated watt-hours required to use the tool per session"
    },
    "skill_required": {
      "type": "string",
      "description": "Minimum skill level or role needed to operate the tool",
      "enum": [
        "basic",
        "intermediate",
        "advanced",
        "specialist"
      ]
    },
    "risk_profile": {
      "type": "string",
      "description": "Operational or disclosure risk if misused",
      "enum": [
        "low",
        "moderate",
        "high",
        "critical"
      ]
    },
    "retired": {
      "type": "boolean",
      "description": "Whether this tool is obsolete or no longer in use",
      "default": false
    },
    "notes": {
      "type": "string",
      "description": "Additional metadata or human notes"
    },
    "required_resources": {
      "type": "array",
      "description": "Resources needed to use or operate this tool",
      "items": {
        "type": "object",
        "required": [
          "resource_id",
          "quantity"
        ],
        "properties": {
          "resource_id": {
            "type": "string",
            "description": "Reference to a resource schema id"
          },
          "quantity": {
            "type": "number",
            "description": "Amount of the resource required"
          },
          "unit": {
            "type": "string",
            "description": "Unit of measure (should match resource's unit_of_measure)"
          },
          "critical": {
            "type": "boolean",
            "description": "Whether tool operation is impossible without this resource",
            "default": true
          }
        }
      }
    },
    "consumes_resources": {
      "type": "array",
      "description": "Resources consumed when using this tool",
      "items": {
        "type": "object",
        "required": [
          "resource_id",
          "consumption_rate"
        ],
        "properties": {
          "resource_id": {
            "type": "string",
            "description": "Reference to a resource schema id"
          },
          "consumption_rate": {
            "type": "number",
            "description": "Rate of consumption per time or use"
          },
          "rate_unit": {
            "type": "string",
            "description": "Unit of consumption rate (e.g., 'kW.h/h' for kilowatt-hours per hour)"
          },
          "per_use": {
            "type": "boolean",
            "description": "Whether consumption is per use rather than per time",
            "default": false
          }
        }
      }
    },
    "component_resources": {
      "type": "array",
      "description": "Resources used in the construction or composition of the tool",
      "items": {
        "type": "object",
        "required": [
          "resource_id",
          "quantity"
        ],
        "properties": {
          "resource_id": {
            "type": "string",
            "description": "Reference to a resource schema id"
          },
          "quantity": {
            "type": "number",
            "description": "Amount of the resource in the tool"
          },
          "unit": {
            "type": "string",
            "description": "Unit of measure (should match resource's unit_of_measure)"
          },
          "recyclable": {
            "type": "boolean",
            "description": "Whether the resource can be recovered when the tool is disposed",
            "default": false
          }
        }
      }
    }
  },
  "required": [
    "id",
    "name",
    "tool_type",
    "function"
  ],
  "__meta": {
    "file": "/Users/a/Documents/schemas/tool.schema.json",
    "timestamp": "2025-05-13 13:03:16"
  }
}
,
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://dao.example.org/schemas/training_dataset.schema.json",
  "title": "Training Dataset",
  "description": "Schema for representing datasets used to train or fine-tune models, including provenance, licensing, contributor influence, access control, and ethical metadata.",
  "type": "object",
  "required": [
    "id",
    "title",
    "source_type",
    "data_types",
    "created_at"
  ],
  "properties": {
    "id": {
      "type": "string",
      "description": "Unique dataset identifier (slug or UUID)"
    },
    "title": {
      "type": "string",
      "description": "Human-readable title of the dataset"
    },
    "description": {
      "type": "string",
      "description": "Narrative explanation of what the dataset contains and how it was assembled"
    },
    "source_type": {
      "type": "string",
      "enum": [
        "collected",
        "scraped",
        "synthetic",
        "simulated",
        "annotated",
        "blended"
      ],
      "description": "Primary method of dataset construction"
    },
    "custody_log": {
      "type": "array",
      "description": "Chronological list of custody events for tamper-evident tracking and chain of custody",
      "items": {
        "$ref": "common/custody_event.schema.json"
      }
    },
    "data_types": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "High-level categories of data present (e.g., text, image, audio, sensor-fusion)",
      "minItems": 1
    },
    "format": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "Data file formats (e.g., CSV, JSON, TFRecord)"
    },
    "record_count": {
      "type": "integer",
      "description": "Approximate number of rows or records"
    },
    "size_bytes": {
      "type": "integer",
      "description": "Total uncompressed size (Unit: By, UCUM code for bytes)"
    },
    "created_at": {
      "type": "string",
      "format": "date-time",
      "description": "RFC 3339 timestamp when the dataset was first committed"
    },
    "license": {
      "type": "string",
      "description": "Applicable usage license (e.g., CC-BY, MIT, proprietary)"
    },
    "restricted_use": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "Contexts in which use of the dataset is restricted or forbidden"
    },
    "bias_notes": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "Narrative or flagged notes on known biases"
    },
    "alignment_risks": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "Downstream risks related to model alignment or misuse"
    },
    "influenced_by": {
      "type": "array",
      "items": {
        "type": "object",
        "required": [
          "contributor_id",
          "contribution_type",
          "weight"
        ],
        "properties": {
          "contributor_id": {
            "type": "string"
          },
          "contribution_type": {
            "type": "string",
            "enum": [
              "data_collection",
              "annotation",
              "synthetic_generation",
              "curation",
              "prompting"
            ]
          },
          "weight": {
            "type": "number",
            "minimum": 0,
            "maximum": 1,
            "description": "Relative influence or credit share (0–1)"
          }
        }
      },
      "description": "List of contributors or agents whose data influenced this dataset"
    },
    "attached_files": {
      "type": "array",
      "items": {
        "type": "object",
        "required": [
          "cid",
          "media_type"
        ],
        "properties": {
          "cid": {
            "type": "string"
          },
          "media_type": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "size_bytes": {
            "type": "integer",
            "description": "File size (Unit: By, UCUM code for bytes)"
          }
        }
      },
      "description": "Optional list of files or hashes linked to this dataset"
    },
    "linked_tasks": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "Tasks where this dataset was created or used"
    },
    "provenance": {
      "type": "array",
      "description": "Chain of custody or transformation steps",
      "items": {
        "type": "object",
        "required": [
          "event",
          "actor",
          "timestamp"
        ],
        "properties": {
          "event": {
            "type": "string"
          },
          "actor": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "notes": {
            "type": "string"
          }
        }
      }
    },
    "access_control": {
      "type": "array",
      "description": "Who currently has access to this dataset",
      "items": {
        "type": "object",
        "required": [
          "agent_id",
          "access_level"
        ],
        "properties": {
          "agent_id": {
            "type": "string"
          },
          "access_level": {
            "type": "string",
            "enum": [
              "read",
              "write",
              "admin"
            ]
          },
          "granted_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      }
    },
    "payments": {
      "type": "array",
      "description": "Who has been paid in relation to this dataset",
      "items": {
        "type": "object",
        "required": [
          "recipient_id",
          "amount",
          "timestamp"
        ],
        "properties": {
          "recipient_id": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "reason": {
            "type": "string"
          }
        }
      }
    },
    "copy_count": {
      "type": "integer",
      "description": "How many known instances or backups of the dataset exist"
    },
    "derived_from": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "description": "List of dataset IDs that this dataset was derived from"
    },
    "data_quality_metrics": {
      "type": "object",
      "description": "Quantitative measurements of data quality",
      "properties": {
        "completeness": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "Data completeness ratio (Unit: 1, UCUM code for dimensionless unit)"
        },
        "accuracy": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "Data accuracy ratio (Unit: 1, UCUM code for dimensionless unit)"
        },
        "noise_level": {
          "type": "number",
          "minimum": 0,
          "description": "Estimated noise level (Unit: %, UCUM code for percent)"
        }
      }
    },
    "resource_requirements": {
      "type": "object",
      "description": "Computational resources required to process this dataset",
      "properties": {
        "memory_bytes": {
          "type": "integer",
          "description": "Estimated memory required (Unit: By, UCUM code for bytes)"
        },
        "processing_time_s": {
          "type": "number",
          "description": "Estimated processing time (Unit: s, UCUM code for seconds)"
        },
        "storage_bytes": {
          "type": "integer",
          "description": "Total storage requirement including indices (Unit: By, UCUM code for bytes)"
        }
      }
    },
    "archival": {
      "type": "object",
      "properties": {
        "checksum": {
          "type": "string"
        },
        "checksum_algorithm": {
          "type": "string"
        },
        "format_version": {
          "type": "string"
        },
        "archive_status": {
          "type": "string",
          "enum": [
            "active",
            "frozen",
            "deprecated",
            "lost"
          ]
        },
        "last_verified_at": {
          "type": "string",
          "format": "date-time"
        },
        "curator_id": {
          "type": "string"
        },
        "retention_policy": {
          "type": "string"
        },
        "language": {
          "type": "string"
        },
        "rights_statement": {
          "type": "string"
        },
        "retention_period_days": {
          "type": "integer",
          "description": "Planned retention period (Unit: d, UCUM code for days)"
        }
      },
      "description": "Archival metadata used to support long-term storage and data integrity"
    },
    "meta": {
      "type": "object",
      "description": "Freeform metadata for internal versioning, annotations, tags, etc.",
      "additionalProperties": true
    }
  },
  "__meta": {
    "file": "/Users/a/Documents/schemas/training_dataset.schema.json",
    "timestamp": "2025-05-13 13:37:42"
  }
}
,
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://dao.example.org/schemas/transmission_medium.schema.json",
  "title": "Transmission Medium",
  "description": "Schema for a carrier that can ferry DAO micro‑transport packets (blockchain mempool, BLE beacon name, Wi‑Fi SSID, etc.). Used for capability matching and routing decisions in the offline‑first DAO graph.",
  "type": "object",
  "allOf": [
    {
      "$ref": "graph_node.meta.schema.json"
    }
  ],
  "required": [
    "id",
    "type",
    "category",
    "caps"
  ],
  "properties": {
    "id": {
      "type": "string",
      "pattern": "^tm\\.[a-z0-9_-]{3,64}$",
      "description": "Unique slug prefixed with 'tm.' (e.g., tm.bitcoin-mempool)."
    },
    "type": {
      "const": "TransmissionMedium"
    },
    "label": {
      "type": "string",
      "description": "Human‑readable name."
    },
    "category": {
      "type": "string",
      "enum": [
        "blockchain",
        "proximity-ble",
        "local-wifi",
        "p2p",
        "analog",
        "optical",
        "audio",
        "other"
      ]
    },
    "caps": {
      "type": "object",
      "description": "Quantitative and qualitative capabilities of the medium.",
      "required": [
        "max_payload_b",
        "typical_latency_s",
        "retention_s",
        "cost_model",
        "loss_profile",
        "privacy",
        "bidirectional"
      ],
      "properties": {
        "max_payload": {
          "$ref": "measurements/data_measurement.schema.json",
          "description": "Maximum payload size measurement"
        },
        "max_payload_b": {
          "type": "integer",
          "minimum": 1,
          "description": "Maximum payload size (Unit: By, UCUM code for bytes)"
        },
        "latency": {
          "$ref": "measurements/data_measurement.schema.json",
          "description": "Typical transmission latency measurement"
        },
        "typical_latency_s": {
          "type": "number",
          "minimum": 0,
          "description": "Typical transmission latency (Unit: s, UCUM code for seconds)"
        },
        "retention": {
          "$ref": "measurements/data_measurement.schema.json",
          "description": "Data retention time measurement"
        },
        "retention_s": {
          "type": "number",
          "minimum": 0,
          "description": "Data retention time (Unit: s, UCUM code for seconds)"
        },
        "cost_model": {
          "type": "string",
          "enum": [
            "free",
            "zero-fee",
            "per-byte",
            "per-tx",
            "subscription",
            "other"
          ]
        },
        "loss_profile": {
          "type": "string"
        },
        "privacy": {
          "type": "string",
          "enum": [
            "broadcast",
            "pseudo-anon",
            "private-icloud",
            "end-to-end",
            "none",
            "other"
          ]
        },
        "bidirectional": {
          "type": "boolean"
        },
        "range": {
          "$ref": "measurements/spatial_measurement.schema.json",
          "description": "Physical range measurement if applicable"
        },
        "range_m": {
          "type": "number",
          "minimum": 0,
          "description": "Physical range if applicable (Unit: m, UCUM code for meters)."
        },
        "bandwidth_measurement": {
          "$ref": "measurements/data_measurement.schema.json",
          "description": "Bandwidth capacity measurement"
        },
        "bandwidth": {
          "type": "number",
          "minimum": 0,
          "description": "Bandwidth capacity (Unit: bit/s, UCUM code for bits per second)"
        },
        "max_bandwidth": {
          "type": "number",
          "minimum": 0,
          "description": "Maximum bandwidth capacity (Unit: bit/s, UCUM code for bits per second)"
        },
        "frequency_measurement": {
          "$ref": "measurements/signal_measurement.schema.json",
          "description": "Carrier frequency measurement"
        },
        "frequency": {
          "type": "number",
          "description": "Carrier frequency if applicable (Unit: Hz, UCUM code for hertz)"
        },
        "frequency_band": {
          "type": "string",
          "description": "e.g., '2.4GHz', '5GHz', 'UHF'"
        },
        "signal_strength_measurement": {
          "$ref": "measurements/signal_measurement.schema.json",
          "description": "Signal strength measurement"
        },
        "signal_strength": {
          "type": "number",
          "description": "Signal strength (Unit: dB[mW], UCUM code for decibel-milliwatts)"
        },
        "packet_loss_measurement": {
          "$ref": "measurements/data_measurement.schema.json",
          "description": "Packet loss rate measurement"
        },
        "packet_loss_rate": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "Average packet loss rate (Unit: %, UCUM code for percent)"
        },
        "power_measurement": {
          "$ref": "measurements/power_measurement.schema.json",
          "description": "Power consumption measurement"
        },
        "power_consumption": {
          "type": "number",
          "description": "Power consumption during transmission (Unit: W, UCUM code for watts)"
        },
        "network": {
          "type": "string",
          "description": "e.g., 'mainnet', 'testnet', '2.4GHz'."
        },
        "relay_port": {
          "type": "integer",
          "minimum": 1,
          "maximum": 65535
        },
        "spec_ref": {
          "type": "string",
          "format": "uri"
        }
      },
      "additionalProperties": true
    },
    "measurements": {
      "type": "array",
      "description": "Collection of measurements related to this transmission medium",
      "items": {
        "$ref": "measurement.schema.json"
      }
    },
    "tags": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "meta": {
      "type": "object",
      "description": "Free‑form vendor or implementation notes.",
      "additionalProperties": true
    }
  },
  "additionalProperties": false,
  "__meta": {
    "file": "/Users/a/Documents/schemas/transmission_medium.schema.json",
    "timestamp": "2025-05-13 11:21:31"
  }
}
,
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://dao.example.org/schemas/transport.schema.json",
  "title": "DAO Micro‑Transport Schema",
  "description": "Canonical definition for any logical transport (TCP‑like, UDP‑like, FEC, DTN, etc.) that prepares DAO packets before they reach a ChannelTransport adapter.",
  "type": "object",
  "required": [
    "id",
    "type",
    "kind",
    "max_payload_b"
  ],
  "properties": {
    "id": {
      "type": "string",
      "pattern": "^tr\\.[a-z0-9_-]+$",
      "description": "Unique slug for the transport implementation, e.g., `tr.mctcp` or `tr.fountain`"
    },
    "type": {
      "const": "Transport",
      "description": "Fixed discriminator so graph loaders recognise this node‑class."
    },
    "label": {
      "type": "string",
      "description": "Human‑readable name (\"MC‑TCP reliable stream\")."
    },
    "kind": {
      "type": "string",
      "enum": [
        "reliable",
        "datagram",
        "fec",
        "dtn"
      ],
      "description": "Behavioural family of the transport.  `reliable` = ordered with ACK, `datagram` = fire‑and‑forget, `fec` = forward‑error‑correction shards, `dtn` = store‑and‑forward bundles."
    },
    "version": {
      "type": "string",
      "pattern": "^v[0-9]+(\\.[0-9]+)*$",
      "description": "Semantic version of the transport spec/implementation (e.g., v1.0)."
    },
    "max_payload_b": {
      "type": "integer",
      "minimum": 1,
      "description": "Maximum plaintext bytes the transport puts in a single DAO packet (Unit: By, UCUM code for bytes)."
    },
    "window": {
      "type": "integer",
      "minimum": 1,
      "description": "Sliding‑window size for reliable/FEC transports.  Omit for datagram kind."
    },
    "timeout_s": {
      "type": "number",
      "minimum": 0,
      "description": "Retransmission or acknowledgement timeout (Unit: s, UCUM code for seconds)."
    },
    "throughput": {
      "type": "number",
      "minimum": 0,
      "description": "Expected throughput (Unit: bit/s, UCUM code for bits per second)."
    },
    "latency_ms": {
      "type": "number",
      "minimum": 0,
      "description": "Expected end-to-end latency (Unit: ms, UCUM code for milliseconds)."
    },
    "jitter_ms": {
      "type": "number",
      "minimum": 0,
      "description": "Expected variation in latency (Unit: ms, UCUM code for milliseconds)."
    },
    "fec": {
      "$ref": "#/definitions/FECConfig"
    },
    "dtn": {
      "$ref": "#/definitions/DTNConfig"
    },
    "tags": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "uniqueItems": true,
      "description": "Taxonomy strings (e.g., protocol:stop‑and‑wait, feature:acks)."
    },
    "meta": {
      "type": "object",
      "description": "Open container for implementation‑specific details (Git repo, proof‑vector links…)."
    }
  },
  "allOf": [
    {
      "if": {
        "properties": {
          "kind": {
            "const": "fec"
          }
        }
      },
      "then": {
        "required": [
          "fec"
        ]
      }
    },
    {
      "if": {
        "properties": {
          "kind": {
            "const": "dtn"
          }
        }
      },
      "then": {
        "required": [
          "dtn"
        ]
      }
    }
  ],
  "definitions": {
    "FECConfig": {
      "type": "object",
      "required": [
        "symbol_size",
        "redundancy_ratio"
      ],
      "properties": {
        "symbol_size": {
          "type": "integer",
          "minimum": 8,
          "description": "Bytes per FEC symbol (Unit: By, UCUM code for bytes)."
        },
        "redundancy_ratio": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "k_extra / k_data (0.2 means 20% redundancy)."
        },
        "coding_rate": {
          "type": "number",
          "minimum": 0,
          "description": "Coding rate (Unit: bit/s, UCUM code for bits per second)."
        }
      }
    },
    "DTNConfig": {
      "type": "object",
      "required": [
        "ttl_s"
      ],
      "properties": {
        "ttl_s": {
          "type": "integer",
          "minimum": 60,
          "description": "Bundle's time‑to‑live (Unit: s, UCUM code for seconds)."
        },
        "custody_required": {
          "type": "boolean",
          "default": false
        },
        "bundle_size_limit": {
          "type": "integer",
          "description": "Maximum bundle size (Unit: By, UCUM code for bytes)."
        },
        "storage_quota": {
          "type": "integer",
          "description": "Maximum storage allocated for bundles (Unit: By, UCUM code for bytes)."
        }
      }
    }
  },
  "__meta": {
    "file": "/Users/a/Documents/schemas/transport.schema.json",
    "timestamp": "2025-05-13 11:10:34"
  }
}
,
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://dao.example.org/schemas/visualization_config.schema.json",
  "title": "Visualization Configuration",
  "description": "Schema for configuring measurement visualizations, dashboards, and visual alerts based on telemetry data.",
  "type": "object",
  "required": [
    "id",
    "title",
    "panels"
  ],
  "properties": {
    "id": {
      "type": "string",
      "description": "Unique identifier for this visualization configuration",
      "pattern": "^vc\\.[a-z0-9_-]{3,64}$"
    },
    "title": {
      "type": "string",
      "description": "Human-readable title for this visualization or dashboard"
    },
    "description": {
      "type": "string",
      "description": "Detailed description of the dashboard purpose and contents"
    },
    "created_by": {
      "type": "string",
      "description": "ID of contributor who created this visualization"
    },
    "created_at": {
      "type": "string",
      "format": "date-time",
      "description": "When this visualization was created"
    },
    "updated_at": {
      "type": "string",
      "format": "date-time",
      "description": "When this visualization was last modified"
    },
    "time_range": {
      "type": "object",
      "description": "Default time range for the visualization",
      "properties": {
        "start": {
          "type": "string",
          "description": "Start time (absolute or relative)",
          "examples": [
            "2025-05-13T00:00:00Z",
            "now-24h",
            "now-7d"
          ]
        },
        "end": {
          "type": "string",
          "description": "End time (absolute or relative)",
          "examples": [
            "2025-05-13T23:59:59Z",
            "now"
          ]
        },
        "auto_refresh_s": {
          "type": "integer",
          "description": "Auto-refresh interval in seconds (Unit: s, UCUM code for seconds)",
          "minimum": 0
        }
      },
      "required": [
        "start",
        "end"
      ]
    },
    "layout": {
      "type": "object",
      "description": "Layout configuration for the dashboard",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "grid",
            "flexible",
            "fixed",
            "auto"
          ],
          "default": "grid",
          "description": "Layout management strategy"
        },
        "columns": {
          "type": "integer",
          "minimum": 1,
          "maximum": 24,
          "default": 12,
          "description": "Number of columns in the grid layout"
        },
        "row_height_px": {
          "type": "integer",
          "minimum": 10,
          "description": "Height of a single row in pixels"
        },
        "padding_px": {
          "type": "integer",
          "minimum": 0,
          "description": "Padding between panels in pixels"
        },
        "background_color": {
          "type": "string",
          "description": "Background color in hex format or named color",
          "examples": [
            "#f0f0f0",
            "white"
          ]
        }
      }
    },
    "panels": {
      "type": "array",
      "description": "Array of visualization panels in the dashboard",
      "minItems": 1,
      "items": {
        "type": "object",
        "required": [
          "id",
          "type",
          "title",
          "data_source"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for this panel"
          },
          "type": {
            "type": "string",
            "enum": [
              "time_series",
              "gauge",
              "table",
              "stat",
              "heatmap",
              "alert_list",
              "text",
              "map"
            ],
            "description": "Type of visualization panel"
          },
          "title": {
            "type": "string",
            "description": "Title displayed on the panel"
          },
          "description": {
            "type": "string",
            "description": "Optional descriptive text for the panel"
          },
          "data_source": {
            "type": "object",
            "description": "Configuration of the data source for this panel",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "measurement_query",
                  "telemetry_stream",
                  "monitoring_rule"
                ],
                "description": "Type of data source"
              },
              "query": {
                "type": "object",
                "description": "Query configuration to select measurements",
                "properties": {
                  "quantity_kinds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "QUDT quantity kinds to include"
                  },
                  "features_of_interest": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Features to filter by"
                  },
                  "devices": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Devices to filter by"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Tags to filter by"
                  },
                  "aggregation": {
                    "type": "string",
                    "enum": [
                      "none",
                      "mean",
                      "min",
                      "max",
                      "sum",
                      "count",
                      "median",
                      "percentile"
                    ],
                    "default": "none",
                    "description": "Aggregation to apply to measurements"
                  },
                  "percentile": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 100,
                    "description": "Percentile value if aggregation is 'percentile'"
                  },
                  "group_by": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Fields to group measurements by"
                  },
                  "time_bucket_s": {
                    "type": "number",
                    "minimum": 0,
                    "description": "Time bucket size for aggregation (Unit: s, UCUM code for seconds)"
                  },
                  "limit": {
                    "type": "integer",
                    "minimum": 1,
                    "description": "Maximum number of data points to return"
                  },
                  "order_by": {
                    "type": "string",
                    "enum": [
                      "time_asc",
                      "time_desc",
                      "value_asc",
                      "value_desc"
                    ],
                    "default": "time_asc",
                    "description": "How to order the results"
                  },
                  "function": {
                    "type": "string",
                    "description": "Math function to apply to values (e.g., 'rate', 'derivative', 'integral')"
                  },
                  "raw_query": {
                    "type": "string",
                    "description": "Custom query string in implementation-specific format"
                  }
                }
              },
              "stream_id": {
                "type": "string",
                "description": "ID of telemetry stream to visualize (if type is 'telemetry_stream')"
              },
              "rule_id": {
                "type": "string",
                "description": "ID of monitoring rule to visualize (if type is 'monitoring_rule')"
              }
            },
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "measurement_query"
                    }
                  }
                },
                "then": {
                  "required": [
                    "query"
                  ]
                }
              },
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "telemetry_stream"
                    }
                  }
                },
                "then": {
                  "required": [
                    "stream_id"
                  ]
                }
              },
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "monitoring_rule"
                    }
                  }
                },
                "then": {
                  "required": [
                    "rule_id"
                  ]
                }
              }
            ]
          },
          "position": {
            "type": "object",
            "description": "Position and size of the panel in the dashboard",
            "properties": {
              "x": {
                "type": "integer",
                "minimum": 0,
                "description": "Grid column position (0-indexed)"
              },
              "y": {
                "type": "integer",
                "minimum": 0,
                "description": "Grid row position (0-indexed)"
              },
              "width": {
                "type": "integer",
                "minimum": 1,
                "description": "Panel width in grid columns"
              },
              "height": {
                "type": "integer",
                "minimum": 1,
                "description": "Panel height in grid rows"
              }
            }
          },
          "options": {
            "type": "object",
            "description": "Panel-specific visualization options",
            "properties": {
              "unit": {
                "type": "string",
                "description": "Display unit for values"
              },
              "decimals": {
                "type": "integer",
                "minimum": 0,
                "description": "Number of decimal places to display"
              },
              "min": {
                "type": "number",
                "description": "Minimum value for the scale"
              },
              "max": {
                "type": "number",
                "description": "Maximum value for the scale"
              },
              "thresholds": {
                "type": "array",
                "description": "Threshold levels for color-coding values",
                "items": {
                  "type": "object",
                  "required": [
                    "value",
                    "color"
                  ],
                  "properties": {
                    "value": {
                      "type": "number",
                      "description": "Threshold value"
                    },
                    "color": {
                      "type": "string",
                      "description": "Color for values above this threshold"
                    },
                    "label": {
                      "type": "string",
                      "description": "Optional label for this threshold"
                    }
                  }
                }
              },
              "color_scheme": {
                "type": "string",
                "description": "Color scheme for the visualization",
                "examples": [
                  "spectrum",
                  "bluered",
                  "greens"
                ]
              },
              "legend": {
                "type": "object",
                "properties": {
                  "show": {
                    "type": "boolean",
                    "default": true,
                    "description": "Whether to display the legend"
                  },
                  "position": {
                    "type": "string",
                    "enum": [
                      "bottom",
                      "right"
                    ],
                    "default": "bottom",
                    "description": "Where to place the legend"
                  }
                }
              },
              "axes": {
                "type": "object",
                "properties": {
                  "x_axis": {
                    "type": "object",
                    "properties": {
                      "label": {
                        "type": "string",
                        "description": "X-axis label"
                      },
                      "show": {
                        "type": "boolean",
                        "default": true,
                        "description": "Whether to show the x-axis"
                      }
                    }
                  },
                  "y_axis": {
                    "type": "object",
                    "properties": {
                      "label": {
                        "type": "string",
                        "description": "Y-axis label"
                      },
                      "show": {
                        "type": "boolean",
                        "default": true,
                        "description": "Whether to show the y-axis"
                      },
                      "log_scale": {
                        "type": "boolean",
                        "default": false,
                        "description": "Whether to use logarithmic scale"
                      }
                    }
                  }
                }
              },
              "tooltip": {
                "type": "object",
                "properties": {
                  "show": {
                    "type": "boolean",
                    "default": true,
                    "description": "Whether to show tooltips"
                  },
                  "mode": {
                    "type": "string",
                    "enum": [
                      "single",
                      "multi",
                      "all"
                    ],
                    "default": "single",
                    "description": "Tooltip display mode"
                  }
                }
              },
              "point_size": {
                "type": "integer",
                "minimum": 0,
                "description": "Size of data points in pixel radius"
              },
              "line_width": {
                "type": "integer",
                "minimum": 0,
                "description": "Width of lines in pixels"
              },
              "stacked": {
                "type": "boolean",
                "default": false,
                "description": "Whether to stack multiple series"
              },
              "fill_opacity": {
                "type": "number",
                "minimum": 0,
                "maximum": 1,
                "description": "Opacity for area fills (0-1)"
              },
              "show_bars": {
                "type": "boolean",
                "default": false,
                "description": "Show bar representation for time series"
              },
              "show_lines": {
                "type": "boolean",
                "default": true,
                "description": "Show line representation for time series"
              },
              "show_points": {
                "type": "boolean",
                "default": false,
                "description": "Show point markers for time series"
              }
            }
          },
          "alert_config": {
            "type": "object",
            "description": "Alert configuration linked to this visualization",
            "properties": {
              "rule_id": {
                "type": "string",
                "description": "ID of monitoring rule to link to this panel"
              },
              "show_alerts": {
                "type": "boolean",
                "default": true,
                "description": "Whether to show active alerts in this panel"
              },
              "threshold_line": {
                "type": "boolean",
                "default": true,
                "description": "Whether to display threshold lines from alert rules"
              },
              "alert_annotations": {
                "type": "boolean",
                "default": true,
                "description": "Whether to show markers when alerts were triggered"
              }
            }
          },
          "transformations": {
            "type": "array",
            "description": "Transformations to apply to the data before visualization",
            "items": {
              "type": "object",
              "required": [
                "type"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "filter",
                    "rename",
                    "aggregate",
                    "join",
                    "math"
                  ],
                  "description": "Type of transformation"
                },
                "options": {
                  "type": "object",
                  "description": "Transformation-specific options",
                  "additionalProperties": true
                }
              }
            }
          }
        }
      }
    },
    "variables": {
      "type": "array",
      "description": "Dashboard-level variables that can be used in queries and display",
      "items": {
        "type": "object",
        "required": [
          "name",
          "type"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Variable name (referenced as ${name})"
          },
          "display_name": {
            "type": "string",
            "description": "Human-readable label for the variable"
          },
          "type": {
            "type": "string",
            "enum": [
              "query",
              "custom",
              "constant",
              "interval",
              "textbox"
            ],
            "description": "Type of variable"
          },
          "default": {
            "description": "Default value for the variable",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "boolean"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "options": {
            "type": "array",
            "description": "Possible values for the variable (for custom type)",
            "items": {
              "type": "object",
              "required": [
                "value",
                "label"
              ],
              "properties": {
                "value": {
                  "type": "string",
                  "description": "Value to use in queries"
                },
                "label": {
                  "type": "string",
                  "description": "Human-readable label to display"
                }
              }
            }
          },
          "query": {
            "type": "string",
            "description": "Query to get variable values (for query type)"
          },
          "multi": {
            "type": "boolean",
            "default": false,
            "description": "Whether multiple values can be selected"
          },
          "include_all": {
            "type": "boolean",
            "default": false,
            "description": "Whether to include an 'All' option"
          }
        }
      }
    },
    "refresh_rate_s": {
      "type": "integer",
      "minimum": 0,
      "description": "How frequently the entire dashboard should refresh (Unit: s, UCUM code for seconds)"
    },
    "auto_fit": {
      "type": "boolean",
      "default": false,
      "description": "Whether to automatically fit visualizations to screen size"
    },
    "shared_tooltips": {
      "type": "boolean",
      "default": true,
      "description": "Whether tooltips should be synchronized across panels"
    },
    "meta": {
      "type": "object",
      "description": "Additional metadata for the dashboard",
      "additionalProperties": true
    },
    "tags": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "uniqueItems": true,
      "description": "Tags for dashboard categorization and search"
    }
  },
  "additionalProperties": false,
  "examples": [
    {
      "id": "vc.server-monitoring",
      "title": "Server Monitoring Dashboard",
      "description": "Real-time monitoring of server health metrics",
      "created_by": "anon.ops-manager",
      "created_at": "2025-05-13T12:00:00Z",
      "time_range": {
        "start": "now-1h",
        "end": "now",
        "auto_refresh_s": 60
      },
      "layout": {
        "type": "grid",
        "columns": 12
      },
      "panels": [
        {
          "id": "panel-1",
          "type": "time_series",
          "title": "CPU Temperature",
          "data_source": {
            "type": "measurement_query",
            "query": {
              "quantity_kinds": [
                "Temperature"
              ],
              "features_of_interest": [
                "dev.server-001.cpu",
                "dev.server-002.cpu"
              ],
              "time_bucket_s": 30
            }
          },
          "position": {
            "x": 0,
            "y": 0,
            "width": 6,
            "height": 8
          },
          "options": {
            "unit": "Cel",
            "decimals": 1,
            "thresholds": [
              {
                "value": 70,
                "color": "yellow",
                "label": "Warning"
              },
              {
                "value": 85,
                "color": "red",
                "label": "Critical"
              }
            ]
          },
          "alert_config": {
            "rule_id": "mr.high-temperature-alert",
            "show_alerts": true,
            "threshold_line": true
          }
        },
        {
          "id": "panel-2",
          "type": "gauge",
          "title": "Server Power Consumption",
          "data_source": {
            "type": "measurement_query",
            "query": {
              "quantity_kinds": [
                "Power"
              ],
              "features_of_interest": [
                "dev.server-001.psu"
              ],
              "aggregation": "mean"
            }
          },
          "position": {
            "x": 6,
            "y": 0,
            "width": 6,
            "height": 4
          },
          "options": {
            "unit": "W",
            "min": 0,
            "max": 500,
            "thresholds": [
              {
                "value": 300,
                "color": "yellow"
              },
              {
                "value": 400,
                "color": "red"
              }
            ]
          }
        },
        {
          "id": "panel-3",
          "type": "table",
          "title": "Recent Alerts",
          "data_source": {
            "type": "monitoring_rule",
            "rule_id": "mr.high-temperature-alert"
          },
          "position": {
            "x": 0,
            "y": 8,
            "width": 12,
            "height": 6
          }
        }
      ],
      "variables": [
        {
          "name": "server",
          "display_name": "Server",
          "type": "custom",
          "default": "dev.server-001",
          "options": [
            {
              "value": "dev.server-001",
              "label": "Server 1"
            },
            {
              "value": "dev.server-002",
              "label": "Server 2"
            }
          ],
          "multi": true,
          "include_all": true
        },
        {
          "name": "refresh",
          "display_name": "Refresh Rate",
          "type": "interval",
          "default": "30s",
          "options": [
            {
              "value": "10s",
              "label": "10s"
            },
            {
              "value": "30s",
              "label": "30s"
            },
            {
              "value": "1m",
              "label": "1m"
            }
          ]
        }
      ],
      "refresh_rate_s": 30,
      "shared_tooltips": true,
      "tags": [
        "operations",
        "server",
        "monitoring"
      ]
    }
  ],
  "__meta": {
    "file": "/Users/a/Documents/schemas/visualization_config.schema.json",
    "timestamp": "2025-05-13 11:34:31"
  }
}

]

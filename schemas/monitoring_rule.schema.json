{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://dao.example.org/schemas/monitoring_rule.schema.json",
  "title": "Monitoring Rule",
  "description": "Defines conditions for alerting and monitoring based on measurement values and thresholds.",
  "type": "object",
  "required": ["id", "name", "conditions", "created_at"],
  "properties": {
    "id": {
      "type": "string",
      "description": "Unique identifier for this monitoring rule",
      "pattern": "^mr\\.[a-z0-9_-]{3,64}$"
    },
    "name": {
      "type": "string",
      "description": "Human-readable name of the rule"
    },
    "description": {
      "type": "string",
      "description": "Detailed explanation of what this rule monitors"
    },
    "conditions": {
      "type": "array",
      "description": "Set of conditions that must be met to trigger this rule",
      "minItems": 1,
      "items": {
        "$ref": "#/definitions/Condition"
      }
    },
    "operator": {
      "type": "string",
      "description": "Boolean operator for combining multiple conditions",
      "enum": ["AND", "OR"],
      "default": "AND"
    },
    "scope": {
      "type": "object",
      "description": "Optional scope limitations for where this rule applies",
      "properties": {
        "device_ids": {
          "type": "array",
          "items": { "type": "string" },
          "description": "IDs of specific devices this rule monitors"
        },
        "task_ids": {
          "type": "array",
          "items": { "type": "string" },
          "description": "IDs of tasks during which this rule is active"
        },
        "features_of_interest": {
          "type": "array",
          "items": { "type": "string" },
          "description": "Entity IDs being measured (e.g., tm.wifi-ssid, dev.server-001)"
        },
        "tags": {
          "type": "array",
          "items": { "type": "string" },
          "description": "Any tags that devices/entities must have for this rule to apply"
        },
        "regions": {
          "type": "array",
          "items": { "type": "string" },
          "description": "Location identifiers where this rule applies"
        }
      }
    },
    "actions": {
      "type": "array",
      "description": "Actions to take when rule conditions are met",
      "minItems": 1,
      "items": {
        "$ref": "#/definitions/Action"
      }
    },
    "created_at": {
      "type": "string",
      "format": "date-time",
      "description": "When this rule was created"
    },
    "created_by": {
      "type": "string",
      "description": "ID of the contributor who created this rule"
    },
    "updated_at": {
      "type": "string",
      "format": "date-time",
      "description": "When this rule was last modified"
    },
    "schedule": {
      "type": "object",
      "description": "Optional time-based activation schedule",
      "properties": {
        "active_periods": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "start_time": { "type": "string", "format": "time" },
              "end_time": { "type": "string", "format": "time" },
              "days": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]
                }
              }
            },
            "required": ["start_time", "end_time"]
          }
        },
        "timezone": {
          "type": "string",
          "description": "IANA timezone identifier"
        }
      }
    },
    "severity": {
      "type": "string",
      "description": "Importance level of alerts generated by this rule",
      "enum": ["info", "warning", "critical", "emergency"]
    },
    "cooldown_s": {
      "type": "integer",
      "description": "Minimum seconds between repeated alerts (Unit: s, UCUM code for seconds)",
      "minimum": 0
    },
    "enabled": {
      "type": "boolean",
      "description": "Whether this rule is currently active",
      "default": true
    },
    "meta": {
      "type": "object",
      "description": "Free-form implementation details",
      "additionalProperties": true
    }
  },
  "additionalProperties": false,
  
  "definitions": {
    "Condition": {
      "type": "object",
      "required": ["type", "parameters"],
      "properties": {
        "id": {
          "type": "string",
          "description": "Optional identifier for this specific condition"
        },
        "type": {
          "type": "string",
          "description": "Type of condition to evaluate",
          "enum": ["threshold", "rate_of_change", "statistical", "state_change", "missing_data"]
        },
        "parameters": {
          "type": "object",
          "description": "Parameters specific to the condition type"
        },
        "description": {
          "type": "string",
          "description": "Human explanation of this condition"
        }
      },
      "allOf": [
        {
          "if": {
            "properties": { "type": { "const": "threshold" } }
          },
          "then": {
            "properties": {
              "parameters": {
                "type": "object",
                "required": ["quantity_kind", "comparator", "threshold_value"],
                "properties": {
                  "quantity_kind": {
                    "type": "string",
                    "description": "QUDT quantity kind to monitor (e.g., 'Temperature', 'Power')"
                  },
                  "comparator": {
                    "type": "string",
                    "enum": ["gt", "lt", "gte", "lte", "eq", "neq"],
                    "description": "Comparison operator"
                  },
                  "threshold_value": {
                    "type": "number",
                    "description": "Value to compare against"
                  },
                  "unit": {
                    "type": "string",
                    "description": "UCUM or QUDT unit code for the threshold value"
                  },
                  "duration_s": {
                    "type": "integer",
                    "description": "Optional duration the condition must be true to trigger (Unit: s, UCUM code for seconds)",
                    "minimum": 0
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": { "type": { "const": "rate_of_change" } }
          },
          "then": {
            "properties": {
              "parameters": {
                "type": "object",
                "required": ["quantity_kind", "rate_comparator", "rate_value", "time_window_s"],
                "properties": {
                  "quantity_kind": {
                    "type": "string",
                    "description": "QUDT quantity kind to monitor"
                  },
                  "rate_comparator": {
                    "type": "string",
                    "enum": ["gt", "lt", "gte", "lte"],
                    "description": "Comparison operator for the rate"
                  },
                  "rate_value": {
                    "type": "number",
                    "description": "Rate threshold to compare against"
                  },
                  "unit_per_s": {
                    "type": "string",
                    "description": "Unit per second for the rate"
                  },
                  "time_window_s": {
                    "type": "integer",
                    "description": "Time window to calculate rate over (Unit: s, UCUM code for seconds)",
                    "minimum": 1
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": { "type": { "const": "statistical" } }
          },
          "then": {
            "properties": {
              "parameters": {
                "type": "object",
                "required": ["quantity_kind", "statistic", "comparator", "threshold_value", "window_size"],
                "properties": {
                  "quantity_kind": {
                    "type": "string",
                    "description": "QUDT quantity kind to analyze"
                  },
                  "statistic": {
                    "type": "string",
                    "enum": ["mean", "median", "min", "max", "std_dev", "percentile"],
                    "description": "Statistical function to apply"
                  },
                  "percentile": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 100,
                    "description": "Percentile value if statistic is 'percentile'"
                  },
                  "comparator": {
                    "type": "string",
                    "enum": ["gt", "lt", "gte", "lte", "eq", "neq"]
                  },
                  "threshold_value": {
                    "type": "number"
                  },
                  "unit": {
                    "type": "string",
                    "description": "UCUM or QUDT unit code"
                  },
                  "window_size": {
                    "type": "integer",
                    "description": "Number of measurements to include in the statistical calculation",
                    "minimum": 2
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": { "type": { "const": "state_change" } }
          },
          "then": {
            "properties": {
              "parameters": {
                "type": "object",
                "required": ["entity_id", "property", "from_value", "to_value"],
                "properties": {
                  "entity_id": {
                    "type": "string",
                    "description": "ID of the entity to monitor state changes on"
                  },
                  "property": {
                    "type": "string",
                    "description": "Property or attribute to monitor"
                  },
                  "from_value": {
                    "description": "Previous state value",
                    "oneOf": [
                      { "type": "string" },
                      { "type": "number" },
                      { "type": "boolean" },
                      { "type": "null" }
                    ]
                  },
                  "to_value": {
                    "description": "New state value to alert on",
                    "oneOf": [
                      { "type": "string" },
                      { "type": "number" },
                      { "type": "boolean" },
                      { "type": "null" }
                    ]
                  },
                  "any_change": {
                    "type": "boolean",
                    "description": "If true, alert on any state change regardless of from/to values",
                    "default": false
                  }
                }
              }
            }
          }
        },
        {
          "if": {
            "properties": { "type": { "const": "missing_data" } }
          },
          "then": {
            "properties": {
              "parameters": {
                "type": "object",
                "required": ["quantity_kind", "expected_interval_s", "missing_duration_s"],
                "properties": {
                  "quantity_kind": {
                    "type": "string",
                    "description": "QUDT quantity kind expected to be reported"
                  },
                  "expected_interval_s": {
                    "type": "number",
                    "description": "Expected reporting interval (Unit: s, UCUM code for seconds)",
                    "minimum": 0
                  },
                  "missing_duration_s": {
                    "type": "number",
                    "description": "Duration of missing data to trigger alert (Unit: s, UCUM code for seconds)",
                    "minimum": 0
                  }
                }
              }
            }
          }
        }
      ]
    },
    "Action": {
      "type": "object",
      "required": ["type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": ["alert", "log", "task", "command"],
          "description": "Type of action to perform when rule conditions are met"
        },
        "id": {
          "type": "string",
          "description": "Optional identifier for this action"
        },
        "description": {
          "type": "string",
          "description": "Human explanation of this action"
        }
      },
      "allOf": [
        {
          "if": {
            "properties": { "type": { "const": "alert" } }
          },
          "then": {
            "properties": {
              "notify_channels": {
                "type": "array",
                "items": { "type": "string" },
                "description": "Channel IDs to send the alert to"
              },
              "message_template": {
                "type": "string",
                "description": "Template string for alert message with {variable} placeholders"
              },
              "escalation_interval_s": {
                "type": "integer",
                "description": "Seconds before escalating unacknowledged alerts (Unit: s, UCUM code for seconds)",
                "minimum": 0
              }
            },
            "required": ["notify_channels"]
          }
        },
        {
          "if": {
            "properties": { "type": { "const": "log" } }
          },
          "then": {
            "properties": {
              "log_level": {
                "type": "string",
                "enum": ["debug", "info", "warning", "error", "critical"],
                "default": "info"
              },
              "message_template": {
                "type": "string",
                "description": "Template string for log message with {variable} placeholders"
              },
              "include_measurements": {
                "type": "boolean",
                "default": true,
                "description": "Whether to include the triggering measurements in the log"
              }
            }
          }
        },
        {
          "if": {
            "properties": { "type": { "const": "task" } }
          },
          "then": {
            "properties": {
              "task_template_id": {
                "type": "string",
                "description": "ID of task template to instantiate"
              },
              "task_parameters": {
                "type": "object",
                "description": "Parameter values to populate in the task",
                "additionalProperties": true
              },
              "assign_to": {
                "type": "string",
                "description": "Optional contributor ID to assign the task to"
              },
              "priority": {
                "type": "string",
                "enum": ["low", "medium", "high", "urgent"]
              }
            },
            "required": ["task_template_id"]
          }
        },
        {
          "if": {
            "properties": { "type": { "const": "command" } }
          },
          "then": {
            "properties": {
              "command_id": {
                "type": "string",
                "description": "ID of the command to execute"
              },
              "target_device_id": {
                "type": "string",
                "description": "ID of device to execute command on"
              },
              "parameters": {
                "type": "object",
                "description": "Command-specific parameters",
                "additionalProperties": true
              },
              "require_authorization": {
                "type": "boolean",
                "default": true,
                "description": "Whether human approval is required before executing"
              }
            },
            "required": ["command_id"]
          }
        }
      ]
    }
  },
  "examples": [
    {
      "id": "mr.high-temperature-alert",
      "name": "High Temperature Alert",
      "description": "Alert when temperature exceeds safe threshold on any device",
      "conditions": [
        {
          "type": "threshold",
          "parameters": {
            "quantity_kind": "Temperature",
            "comparator": "gt",
            "threshold_value": 85.0,
            "unit": "Cel"
          },
          "description": "Temperature above 85°C"
        }
      ],
      "scope": {
        "tags": ["hardware", "sensor"]
      },
      "actions": [
        {
          "type": "alert",
          "notify_channels": ["ch.ops-team", "ch.device-owner"],
          "message_template": "High temperature ({value} {unit}) detected on {device_id}!"
        },
        {
          "type": "task",
          "task_template_id": "tt.investigate-overheating",
          "priority": "high"
        }
      ],
      "created_at": "2025-05-13T14:30:00Z",
      "created_by": "anon.sys-admin",
      "severity": "critical",
      "cooldown_s": 300,
      "enabled": true
    }
  ]
}